<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>B站视频m4s合成处理</title>
      <link href="/2020/05/07/2020/bilibili-m4s-process/"/>
      <url>/2020/05/07/2020/bilibili-m4s-process/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这两天在 B 站看到一些 JS 逆向方面的视频，因为一时半会儿看不完，而且怕过段时间视频会被删，我就把视频全部缓存了。</p><p>结果拉到电脑上一看，B 站缓存已经不再用 blv 格式了，改用了 m4s 分别保存音频和视频。虽然搞不懂为什么 B 站要搞这种无聊的事情，但既然它已经这么干了，我就只能写个程序批量把视频合成为 flv 文件了。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载好 FFmpeg，配置好环境变量，然后测试一下在 java 中能否正常调用 FFmpeg：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    ProcessBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">"ffmpeg"</span><span class="token punctuation">,</span> <span class="token string">"-version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Process process <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre><code>ffmpeg version git-2020-05-04-5767a2e Copyright (c) 2000-2020 the FFmpeg developersbuilt with gcc 9.3.1 (GCC) 20200328configuration: --enable-gpl --enable-version3 --enable-sdl2 --enable-fontconfig --enable-gnutls --enable-iconv --enable-libass --enable-libdav1d --enable-libbluray --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libsrt --enable-libtheora --enable-libtwolame --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libzimg --enable-lzma --enable-zlib --enable-gmp --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvo-amrwbenc --enable-libmysofa --enable-libspeex --enable-libxvid --enable-libaom --disable-w32threads --enable-libmfx --enable-ffnvcodec --enable-cuda-llvm --enable-cuvid --enable-d3d11va --enable-nvenc --enable-nvdec --enable-dxva2 --enable-avisynth --enable-libopenmpt --enable-amflibavutil      56. 43.100 / 56. 43.100libavcodec     58. 82.100 / 58. 82.100libavformat    58. 42.102 / 58. 42.102libavdevice    58.  9.103 / 58.  9.103libavfilter     7. 80.100 /  7. 80.100libswscale      5.  6.101 /  5.  6.101libswresample   3.  6.100 /  3.  6.100libpostproc    55.  6.100 / 55.  6.100</code></pre><p>没问题，那就正式开搞吧。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>观察 APP 缓存目录，其结构如下：</p><pre><code>|-- av号（将来应该会换成bv号）    |-- 分P号（从1开始）        |   danmaku.xml（弹幕）        |   entry.json（视频基本信息）        |-- 清晰度（16/32/64/80/112等）            |   audio.m4s（音频文件）            |   index.json（音视频资源信息）            |   video.m4s（视频文件）</code></pre><p><code>entry.json</code> 结构如下：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"media_type"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"has_dash_audio"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"is_completed"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"total_bytes"</span><span class="token operator">:</span><span class="token number">168190606</span><span class="token punctuation">,</span>    <span class="token property">"downloaded_bytes"</span><span class="token operator">:</span><span class="token number">168190606</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"小胖从易语言到JS破解系列课程"</span><span class="token punctuation">,</span>    <span class="token property">"type_tag"</span><span class="token operator">:</span><span class="token string">"80"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span><span class="token string">"http://i1.hdslb.com/bfs/archive/25534975dec25b1f42e6b36a85f5809ca170f9d3.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"prefered_video_quality"</span><span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">,</span>    <span class="token property">"guessed_total_bytes"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"total_time_milli"</span><span class="token operator">:</span><span class="token number">984533</span><span class="token punctuation">,</span>    <span class="token property">"danmaku_count"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"time_update_stamp"</span><span class="token operator">:</span><span class="token number">1588794825179</span><span class="token punctuation">,</span>    <span class="token property">"time_create_stamp"</span><span class="token operator">:</span><span class="token number">1588793523688</span><span class="token punctuation">,</span>    <span class="token property">"can_play_in_advance"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"interrupt_transform_temp_file"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"avid"</span><span class="token operator">:</span><span class="token number">61587452</span><span class="token punctuation">,</span>    <span class="token property">"spid"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"seasion_id"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"bvid"</span><span class="token operator">:</span><span class="token string">"BV1Gt411w7Yo"</span><span class="token punctuation">,</span>    <span class="token property">"owner_id"</span><span class="token operator">:</span><span class="token number">38192455</span><span class="token punctuation">,</span>    <span class="token property">"page_data"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"cid"</span><span class="token operator">:</span><span class="token number">107238393</span><span class="token punctuation">,</span>        <span class="token property">"page"</span><span class="token operator">:</span><span class="token number">29</span><span class="token punctuation">,</span>        <span class="token property">"from"</span><span class="token operator">:</span><span class="token string">"vupload"</span><span class="token punctuation">,</span>        <span class="token property">"part"</span><span class="token operator">:</span><span class="token string">"30.1.HTTP协议补充_极验滑块验证码对接滴滴打码"</span><span class="token punctuation">,</span>        <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"rich_vid"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"vid"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"has_alias"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"weblink"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"offsite"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"tid"</span><span class="token operator">:</span><span class="token number">39</span><span class="token punctuation">,</span>        <span class="token property">"width"</span><span class="token operator">:</span><span class="token number">1920</span><span class="token punctuation">,</span>        <span class="token property">"height"</span><span class="token operator">:</span><span class="token number">1080</span><span class="token punctuation">,</span>        <span class="token property">"rotate"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"download_title"</span><span class="token operator">:</span><span class="token string">"视频已缓存完成"</span><span class="token punctuation">,</span>        <span class="token property">"download_subtitle"</span><span class="token operator">:</span><span class="token string">"小胖从易语言到JS破解系列课程 30.1.HTTP协议补充_极验滑块验证码对接滴滴打码"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>entry.json</code> 中有用的字段是 <code>title</code> 和 <code>page_data.part</code>。</p><p>两个 m4s 文件都是未加密的，可以直接用 FFmpeg 合成 mp4 文件，具体语句是 <code>ffmpeg -i video.m4s -i audio.m4s -codec copy output.mp4</code></p><h2 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> bilibili<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Stream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yuan * @version 1.0 * @date 2020/5/7 15:12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">M4sProcesser</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BASE_PATH <span class="token operator">=</span> <span class="token string">"E:/bilibili/"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String OUTPUT_PATH <span class="token operator">=</span> <span class="token string">"E:/biblibili-output/"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String OUTPUT_FORMAT <span class="token operator">=</span> <span class="token string">".mp4"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ENTRY_JSON <span class="token operator">=</span> <span class="token string">"entry.json"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TITLE <span class="token operator">=</span> <span class="token string">"title"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PAGE_DATA <span class="token operator">=</span> <span class="token string">"page_data"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PART <span class="token operator">=</span> <span class="token string">"part"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ILLEGAL_CHARS <span class="token operator">=</span> <span class="token string">"[\\\\/:*?\"&lt;>|]+"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取一个目录下的所有子目录     *     * @param directory 目录     * @return 子目录列表     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">listSubDirectories</span><span class="token punctuation">(</span>File directory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>File<span class="token operator">:</span><span class="token operator">:</span>isDirectory<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>File<span class="token operator">:</span><span class="token operator">:</span>listFiles<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Stream<span class="token operator">:</span><span class="token operator">:</span>of<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fileStream <span class="token operator">-</span><span class="token operator">></span> fileStream                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>File<span class="token operator">:</span><span class="token operator">:</span>isDirectory<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从entry.json读取视频标题     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">readJson</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder jsonString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            jsonString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONObject json <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>TITLE<span class="token punctuation">,</span> json<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>TITLE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PART<span class="token punctuation">,</span> json<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span>PAGE_DATA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>PART<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成FFmpeg指令     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">generateCommand</span><span class="token punctuation">(</span>String video<span class="token punctuation">,</span> String audio<span class="token punctuation">,</span> String output<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ffmpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>video<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>audio<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>audio<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"-codec"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"copy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 合成音视频     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">processM4s</span><span class="token punctuation">(</span>File directory<span class="token punctuation">,</span> String avPath<span class="token punctuation">,</span> String partTitle<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        String video <span class="token operator">=</span> directory<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\video.m4s"</span><span class="token punctuation">;</span>        String audio <span class="token operator">=</span> directory<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\audio.m4s"</span><span class="token punctuation">;</span>        String output <span class="token operator">=</span> avPath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> partTitle<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>ILLEGAL_CHARS<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">+</span> OUTPUT_FORMAT<span class="token punctuation">;</span>        ProcessBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token function">generateCommand</span><span class="token punctuation">(</span>video<span class="token punctuation">,</span> audio<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Process process <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开两个专门的线程接收输入信息，防止死锁</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">getErrorStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 阻塞等待</span>        process<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建输出目录     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">markVideoDirectory</span><span class="token punctuation">(</span>String avTitle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String avPath <span class="token operator">=</span> OUTPUT_PATH <span class="token operator">+</span> avTitle<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>ILLEGAL_CHARS<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File avDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>avPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>avDirectory<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            avPath <span class="token operator">+=</span> <span class="token string">"-"</span><span class="token punctuation">;</span>            avDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>avPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> avPath<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理视频的各个分P     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">processParts</span><span class="token punctuation">(</span>File av<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取av号（目录标题），暂时用作视频标题</span>        String avTitle <span class="token operator">=</span> av<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获得分P</span>        List<span class="token operator">&lt;</span>File<span class="token operator">></span> parts <span class="token operator">=</span> <span class="token function">listSubDirectories</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>        String avPath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            File part <span class="token operator">=</span> parts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            String partTitle <span class="token operator">=</span> <span class="token string">"P"</span> <span class="token operator">+</span> part<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>File<span class="token operator">></span> files <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>part<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>asList<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> fileNames <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>File<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ENTRY_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 先获取视频标题和分P标题</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ENTRY_JSON<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> params <span class="token operator">=</span> <span class="token function">readJson</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        avTitle <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>TITLE<span class="token punctuation">,</span> avTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 如果只有1P就用视频标题作为分P标题</span>                    partTitle <span class="token operator">=</span> parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>                            <span class="token operator">?</span> avTitle                            <span class="token operator">:</span> params<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>PART<span class="token punctuation">,</span> partTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 创建视频对应的输出目录</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                avPath <span class="token operator">=</span> <span class="token function">markVideoDirectory</span><span class="token punctuation">(</span>avTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 传入标题用于合成，这里没有考虑下载了多种清晰度的情况</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] &lt;"</span> <span class="token operator">+</span> partTitle <span class="token operator">+</span> <span class="token string">"> 分P开始处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">processM4s</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> avPath<span class="token punctuation">,</span> partTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] &lt;"</span> <span class="token operator">+</span> partTitle <span class="token operator">+</span> <span class="token string">"> 分P处理完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> avTitle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>File<span class="token operator">></span> avList <span class="token operator">=</span> <span class="token function">listSubDirectories</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>BASE_PATH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        avList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>av <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                String avTitle <span class="token operator">=</span> <span class="token function">processParts</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[*] &lt;"</span> <span class="token operator">+</span> avTitle <span class="token operator">+</span> <span class="token string">"> 全部处理完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经测试，可以正确处理 B 站 APP 的视频缓存。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida学习笔记（4）：Java层Hook总结</title>
      <link href="/2020/05/06/2020/frida-java-hook/"/>
      <url>/2020/05/06/2020/frida-java-hook/</url>
      
        <content type="html"><![CDATA[<h2 id="编写测试-APP"><a href="#编写测试-APP" class="headerlink" title="编写测试 APP"></a>编写测试 APP</h2><p>为方便测试，先写一个简单的 <a href="app.apk">APP</a>。</p><p>布局文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/button<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>MainActivity</code> 代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myapplication<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>Gravity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yuan * @version 1.0 * @date 2020/5/6 17:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> MainActivity staticIntance<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        staticIntance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast toast <span class="token operator">=</span> Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">;</span>        toast<span class="token punctuation">.</span><span class="token function">setGravity</span><span class="token punctuation">(</span>Gravity<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"test "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"test "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span>String b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"test "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"test protected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"test private"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast toast <span class="token operator">=</span> Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>staticIntance<span class="token punctuation">,</span> <span class="token string">"static"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">;</span>        toast<span class="token punctuation">.</span><span class="token function">setGravity</span><span class="token punctuation">(</span>Gravity<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再写一个 <code>Student</code> 类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myapplication<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yuan * @version 1.0 * @date 2020/5/6 17:46 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">selfIntroduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"岁，是个学生。"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导出 APK 并安装到夜神模拟器，测试运行：</p><p><img src="Toast.png" alt="测试运行，点击按钮后弹出Toast"></p><h2 id="Java-层操作总结"><a href="#Java-层操作总结" class="headerlink" title="Java 层操作总结"></a>Java 层操作总结</h2><h3 id="获取重载方法"><a href="#获取重载方法" class="headerlink" title="获取重载方法"></a>获取重载方法</h3><p>如果要获取对应某个方法名的所有重载方法，可以使用语句 <code>ClassName.methodName.overloads</code>。</p><p>下面的代码获取了 <code>test1</code> 的各种重载，并输出了每种重载的参数类型：</p><pre class="line-numbers language-js"><code class="language-js">Java<span class="token punctuation">.</span><span class="token function">performNow</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> MainActivity <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.example.myapplication.MainActivity'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> methods <span class="token operator">=</span> MainActivity<span class="token punctuation">.</span>test1<span class="token punctuation">.</span>overloads<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> types <span class="token operator">=</span> methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>argumentTypes<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token keyword">in</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>types<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="overloads.png" alt="获取所有重载"></p><p>如果要获取其中的特定某个重载方法，可以使用 <code>ClassName.methodName.overload(argumentTypes..)</code>。</p><p>下面的代码 Hook 了 <code>test()</code> 方法，获取 <code>test1(int,int)</code> 并调用：</p><pre class="line-numbers language-js"><code class="language-js">Java<span class="token punctuation">.</span><span class="token function">performNow</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> MainActivity <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.example.myapplication.MainActivity'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  MainActivity<span class="token punctuation">.</span>test<span class="token punctuation">.</span>implementation <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>test1<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">,</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="overload.png" alt="指定单个重载"></p><p>如果参数类型不是基本类型，则需要使用类的全路径。例如 <code>String</code> 类需要使用 <code>java.lang.String</code> 来获取，<code>Integer</code> 需要使用 <code>java.lang.Integer</code> 来获取。数组类型需要加一个 <code>[</code> 作为前缀，比如 <code>int[]</code> 对应的是 <code>[I</code>，而 <code>String[]</code> 对应的是 <code>[java.lang.String</code>。</p><h3 id="获取-protected、private、static-方法"><a href="#获取-protected、private、static-方法" class="headerlink" title="获取 protected、private、static 方法"></a>获取 protected、private、static 方法</h3><p>要获取 protected、private、static 的方法，实际上和获取 public 方法是一样的，使用 <code>ClassName.mehtodName</code> 或 <code>ClassName.mehtodName.overloda(argumentTypes...)</code> 即可。</p><h3 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h3><p>要获取构造方法，可以使用 <code>ClassName.$init</code> 或 <code>ClassName.$init.overloda(argumentTypes...)</code>。</p><h3 id="对象的构造"><a href="#对象的构造" class="headerlink" title="对象的构造"></a>对象的构造</h3><p>要构造一个对象，可以使用语句 <code>ClassName.$new(argumentTypes...)</code>。</p><p>下面的代码调用了 <code>Student</code> 类的各个构造方法来构造对象：</p><pre class="line-numbers language-js"><code class="language-js">Java<span class="token punctuation">.</span><span class="token function">performNow</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> Student <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.example.myapplication.Student'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> Integer <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">'田所浩二'</span><span class="token punctuation">,</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">'田所浩二'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">'田所浩二'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="new.png" alt="构造对象"></p><h3 id="字段值的获取和设置"><a href="#字段值的获取和设置" class="headerlink" title="字段值的获取和设置"></a>字段值的获取和设置</h3><p>可以通过 <code>object.fieldName.value</code> 来获取对象的字段值，也可以直接进行设置。无论字段的访问权限是 public、protected、private 还是包可见，都可以使用这种方式进行操作。</p><p>下面的代码获取了 <code>Student</code> 对象的 <code>name</code> 和 <code>age</code> 字段：</p><pre class="line-numbers language-js"><code class="language-js">Java<span class="token punctuation">.</span><span class="token function">performNow</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> Student <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.example.myapplication.Student'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> student <span class="token operator">=</span> Student<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">'田所浩二'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// public</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// private</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>age<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="get.png" alt="获取对象属性"></p><pre class="line-numbers language-js"><code class="language-js">Java<span class="token punctuation">.</span><span class="token function">performNow</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> Student <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.example.myapplication.Student'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> Integer <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'java.lang.Integer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> student <span class="token operator">=</span> Student<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">'田所浩二'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>age<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  student<span class="token punctuation">.</span>age<span class="token punctuation">.</span>value <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>age<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="set.png" alt="设置对象属性"></p><h3 id="调用对象方法"><a href="#调用对象方法" class="headerlink" title="调用对象方法"></a>调用对象方法</h3><p>可以使用语句 <code>object.methodName()</code> 的方式来调用对象的方法，各种访问权限的方法都可以直接调用。</p><p>下面的代码调用了 <code>Student</code> 类的 <code>selfIntroduce()</code> 方法：</p><pre class="line-numbers language-js"><code class="language-js">Java<span class="token punctuation">.</span><span class="token function">performNow</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> Student <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.example.myapplication.Student'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> student <span class="token operator">=</span> Student<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">'田所浩二'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">selfIntroduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="call.png" alt="调用对象方法"></p><p>网上许多资料提到需要使用 <code>method.setAccessible(true)</code> 的方式设置私有方法的可访问性，我实际测试时并不需要使用 Java 中的反射写法，可能是新版的 Frida 在这方面做了一些优化。</p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>使用 <code>Java.cast(object,Class)</code> 可以转换一个对象的类型。</p><p>下面的代码将 <code>Student</code> 对象强制转换成了 <code>Object</code> 类型，然后再次转回 <code>Student</code> 类型：</p><pre class="line-numbers language-js"><code class="language-js">Java<span class="token punctuation">.</span><span class="token function">performNow</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> Student <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.example.myapplication.Student'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> student <span class="token operator">=</span> Student<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">'田所浩二'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span>Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  student <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span>Student<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="case.png" alt="强制类型转换"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 Frida 的 JS 脚本中操作 Java 类、方法和对象，和在 Java 中使用反射的思维方式差不多。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓逆向 </tag>
            
            <tag> Frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida学习笔记（3）：菜鸟级安卓实战</title>
      <link href="/2020/05/04/2020/frida-baby-android/"/>
      <url>/2020/05/04/2020/frida-baby-android/</url>
      
        <content type="html"><![CDATA[<p>使用《教我兄弟学Andriod逆向》系列教程<a href="https://www.52pojie.cn/thread-654654-1-1.html" target="_blank" rel="noopener">第三篇</a>的 APP 来练习，用 Frida 实现内购破解。</p><p>把 APK 拖到 JEB3.7 中，搜索购买失败，定位目标代码。</p><p><img src="JEB-search.png" alt="搜索结果"></p><p>可以看到是 <code>payResultFalse</code> 负责购买失败的相关逻辑，而 <code>payResultSuccess</code> 则实现了购买成功时的逻辑。</p><p>这两个函数都是无入参无返回值的，那么破解方式就很简单了，直接把 <code>payResultFalse</code> 的逻辑改成调用 <code>payResultSuccess</code> 即可。</p><p>开搞，写 JS 脚本：</p><pre class="line-numbers language-js"><code class="language-js">Java<span class="token punctuation">.</span><span class="token function">performNow</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fucking perform'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> MymmPay <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.mydefinemmpay.tool.MymmPay'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> payResultFalse <span class="token operator">=</span> MymmPay<span class="token punctuation">.</span>payResultFalse<span class="token punctuation">;</span>  payResultFalse<span class="token punctuation">.</span>implementation <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fucking false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">payResultSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开模拟器，安装好 APK。</p><p>开一个 cmd 窗口，连接到模拟器 shell 并启动 frida 服务：</p><pre class="line-numbers language-sh"><code class="language-sh">adb shell./data/local/frida/frida-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再开一个 cmd 窗口，设置 TCP 转发，然后通过 frida 启动 APP：</p><pre class="line-numbers language-sh"><code class="language-sh">adb forward tcp:27042 tcp:27042frida -U -f com.mf.xxyzgame.wpp.game.hlqsgdzz.huawei --no-pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然而我发现游戏会卡在主页面，一直播放音乐但点击按钮会无响应。</p><p>没办法，用 Python 吧：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> frida<span class="token punctuation">,</span> sysjscode <span class="token operator">=</span> <span class="token triple-quoted-string string">"""Java.perform(function () {  console.log('fucking perform');  var MymmPay = Java.use('com.mydefinemmpay.tool.MymmPay');  var payResultFalse = MymmPay.payResultFalse;  payResultFalse.implementation = function () {    console.log('fucking false');    this.payResultSuccess();  };});"""</span>process <span class="token operator">=</span> frida<span class="token punctuation">.</span>get_remote_device<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>attach<span class="token punctuation">(</span><span class="token string">'com.mf.xxyzgame.wpp.game.hlqsgdzz.huawei'</span><span class="token punctuation">)</span>script <span class="token operator">=</span> process<span class="token punctuation">.</span>create_script<span class="token punctuation">(</span>jscode<span class="token punctuation">)</span>script<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次成功了，点击购买后直接获得道具：</p><p><img src="fuck-fruit-phone.png" alt="购买成功-模拟器"></p><p>Python 端也收到了 <code>console.log</code> 的打印：</p><p><img src="fuck-fruit-cmd.png" alt="购买成功-cmd"></p><p>总结一下经验，直接通过命令行使用 <code>frida-java-bridge</code> 不如使用 Python 来得靠谱，以后老老实实用 Python。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓逆向 </tag>
            
            <tag> Frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida学习笔记（2）：第一个安卓例子</title>
      <link href="/2020/05/03/2020/frida-hello/"/>
      <url>/2020/05/03/2020/frida-hello/</url>
      
        <content type="html"><![CDATA[<h2 id="安装示例-APK"><a href="#安装示例-APK" class="headerlink" title="安装示例 APK"></a>安装示例 APK</h2><p>首先在模拟器上安装好官方提供的示例 <a href="https://github.com/ctfs/write-ups-2015/tree/master/seccon-quals-ctf-2015/binary/reverse-engineering-android-apk-1" target="_blank" rel="noopener">APK</a>。</p><p>打开运行，可以看到是一道 CTF 题，通过和 CPU 玩石头剪刀布连续获胜 1000 次可以得到 flag。</p><p><img src="ctf-game.png" alt="剪刀石头布"></p><p>显然这道题的做法有很多种，直接分析源码、修改源码、通过 Hook 修改获胜状态等方式都可以搞定。</p><p>那就根据官方文档来 Hook 一把玩玩吧。</p><h2 id="执行-python-脚本"><a href="#执行-python-脚本" class="headerlink" title="执行 python 脚本"></a>执行 python 脚本</h2><p>直接把<a href="https://frida.re/docs/examples/android/" target="_blank" rel="noopener">官方文档</a>的 python 代码拷下来：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> frida<span class="token punctuation">,</span> sys<span class="token keyword">def</span> <span class="token function">on_message</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> message<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'send'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*] {0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token string">'payload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>jscode <span class="token operator">=</span> <span class="token triple-quoted-string string">"""Java.perform(function () {  // 这里定义了需要被hook的函数（即安卓程序中的关键方法）  var MainActivity = Java.use('com.example.seccon2015.rock_paper_scissors.MainActivity');  // 当按钮按下时  var onClick = MainActivity.onClick;  onClick.implementation = function (v) {    // 打印一条消息来说明函数被调用    send('onClick');    // 执行原始的点击事件    onClick.call(this, v);    // 在执行原始点击事件后设置变量的值    this.m.value = 0;    this.n.value = 1;    this.cnt.value = 999;    // 在控制台打印消息，此时应该已经得到flag    console.log('Done:' + JSON.stringify(this.cnt));  };});"""</span><span class="token comment" spellcheck="true"># 官方文档用的是frida.get_usb_device()，这里因为使用模拟器，换成frida.get_remote_device()</span>process <span class="token operator">=</span> frida<span class="token punctuation">.</span>get_remote_device<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>attach<span class="token punctuation">(</span><span class="token string">'com.example.seccon2015.rock_paper_scissors'</span><span class="token punctuation">)</span>script <span class="token operator">=</span> process<span class="token punctuation">.</span>create_script<span class="token punctuation">(</span>jscode<span class="token punctuation">)</span>script<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> on_message<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*] Running CTF'</span><span class="token punctuation">)</span>script<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段 python 代码的作用是，连接到设备并附加到目标进程上，再将 JS 脚本注入到进程中。</p><p>而 JS 代码的作用则是让点击事件执行后变量的值改变。</p><p>通过 adb 连接到模拟器 shell，启动 frida 服务端。</p><p>再设置 TCP转发：</p><pre class="line-numbers language-sh"><code class="language-sh">adb forward tcp:27042 tcp:27042adb forward tcp:27043 tcp:27043<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在模拟器上启动石头剪刀布程序，最后在 Win10 上执行上面的 python 脚本。</p><p>现在，在模拟器上随便点一个按钮，都能拿到 flag：</p><p><img src="result-phone.png" alt="flag"></p><p>控制台也打印了语句：</p><p><img src="result-cmd.png" alt="console-log"></p><p>显然这一次 Hook 操作是成功了。</p><h2 id="直接使用-JS-脚本"><a href="#直接使用-JS-脚本" class="headerlink" title="直接使用 JS 脚本"></a>直接使用 JS 脚本</h2><p>先不启动 app，在 Win10 上执行命令:</p><pre class="line-numbers language-sh"><code class="language-sh">frida -U -f com.example.seccon2015.rock_paper_scissors --no-pause<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时模拟器上 app 会自动启动。并且命令行中会显示 frida 的界面：</p><p><img src="frida-U-f.png" alt="frida -U -f"></p><p>现在可以使用 frida 的 JavaScript Api 了。在 cmd 中执行以下 JS 脚本：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这里要用performNow</span>Java<span class="token punctuation">.</span><span class="token function">performNow</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> MainActivity <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.example.seccon2015.rock_paper_scissors.MainActivity'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> onClick <span class="token operator">=</span> MainActivity<span class="token punctuation">.</span>onClick<span class="token punctuation">;</span>  onClick<span class="token punctuation">.</span>implementation <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    onClick<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>m<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cnt<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Done:'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在回到模拟器中点击任意按钮，现象与使用 python 时相同，说明 Hook 成功。</p><p>实际上，frida 允许在 app 启动时直接以 <code>-l xx.js</code> 指定 JS 脚本。但在我进行测试时，使用 <code>Java.performNow()</code> 会出现类未加载的问题；而使用 <code>Java.perform()</code> 则会出现必须重新编辑 js 文件才执行的问题——这个缺点也是可利用的，修改 JS 文件后不需要重新运行 frida。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓逆向 </tag>
            
            <tag> Frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida学习笔记（1）：安装</title>
      <link href="/2020/05/02/2020/frida-install/"/>
      <url>/2020/05/02/2020/frida-install/</url>
      
        <content type="html"><![CDATA[<p>毕设做完后玩了一周，接下来该继续学习了！去年年尾学了点安卓逆向，到现在不知不觉过了半年了，全忘光了。没办法，从头来过吧。</p><h2 id="在-Win10-上安装-Frida-客户端"><a href="#在-Win10-上安装-Frida-客户端" class="headerlink" title="在 Win10 上安装 Frida 客户端"></a>在 Win10 上安装 Frida 客户端</h2><p>首先安装好 python3.8，之后安装 Frida 只需要一条命令：</p><pre class="line-numbers language-sh"><code class="language-sh">pip install frida-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>经过漫长的等待后完成安装。</p><h2 id="在模拟器上安装-Frida-服务端"><a href="#在模拟器上安装-Frida-服务端" class="headerlink" title="在模拟器上安装 Frida 服务端"></a>在模拟器上安装 Frida 服务端</h2><p>我使用的是夜神模拟器，使用 adb 连接查看 cpu 信息：</p><pre class="line-numbers language-sh"><code class="language-sh">adb shellcat /proc/cpuinfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到是 4 核的 32 位 x86 架构 CPU。</p><p>到 <a href="https://github.com/frida/frida/releases" target="_blank" rel="noopener">github</a> 上下载对应版本的服务端文件。</p><p>在另一个 cmd 窗口中通过 adb 将服务端放入模拟器中：</p><pre class="line-numbers language-sh"><code class="language-sh">adb push d:/test/frida-server /data/local/frida<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在模拟器系统中给服务端赋予执行权限并执行：</p><pre class="line-numbers language-sh"><code class="language-sh">chmod 777 frida-server./frida-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再在 Win10 中开启一个 cmd 窗口，使用 <code>frida-ps -U</code> 检查是否连接成功。能看到模拟器中运行的进程信息，说明运行成功。</p><p><img src="frida-ps.png" alt="frida-ps -u"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓逆向 </tag>
            
            <tag> Frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设开发记录(6)：重构杂记</title>
      <link href="/2020/04/14/graduation_project/graduation-project-6/"/>
      <url>/2020/04/14/graduation_project/graduation-project-6/</url>
      
        <content type="html"><![CDATA[<p>最近一周开始撸前端，本来搞得好好的，直到要做文档搜索了，才发现前期的设计有巨坑。</p><p>原本的想法是给一部分网站做专用的解析器，剩下的网站直接保存原始的 HTML，由于专门解析的这部分网页可以保存文章作者、发布时间等更丰富的信息，于是就搞了 <code>Article</code> 和 <code>OriginalDocument</code> 两个实体类，并且将它们分开保存。原本还想着现在是两种页面内容类型，之后还可以扩展到图片、视频等形式，这样搞的可扩展性更高。为了符合开闭原则，我就搞了<strong>扫包根据注解自动注册+路由分发请求</strong>的方式来实现对不同类型数据的访问。</p><p>这里面的问题在于，<code>Article</code> 和 <code>OriginalDocument</code> 都是文本数据，在进行文本搜索时，就必须要同时对两个索引同时进行搜索。如果要实现分页，就必须在内存中或者额外的数据源之中进行许多额外的操作，这会带来不小的工作量。</p><p>现在只好将 <code>Article</code> 删去，全部网页都以原始 <code>HTML</code> 的形式保存，也没有必要做专用解析器了。</p><p>记下此篇，以作日后之鉴。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设开发记录(5)：实现匹配度算法和队列算法</title>
      <link href="/2020/04/06/graduation_project/graduation-project-5/"/>
      <url>/2020/04/06/graduation_project/graduation-project-5/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-实现匹配度计算"><a href="#0x00-实现匹配度计算" class="headerlink" title="0x00 实现匹配度计算"></a>0x00 实现匹配度计算</h2><h3 id="写用例"><a href="#写用例" class="headerlink" title="写用例"></a>写用例</h3><p>为简便起见，全部使用标题包含规则。</p><p>规则 1：A and (B or C)</p><pre><code>文档 1-1：A文档 1-2：AB文档 1-3：C预期结果：0.5, 1.0, 0.5</code></pre><p>规则 2：A or B and C</p><pre><code>文档 2-1：A文档 2-2：AB文档 2-3：C预期结果：1.0, 1.0, 0.5</code></pre><p>规则 3：A or B and C or (D and (E and F) and (G or (not H and I)))</p><pre><code>文档 3-1：BDE文档 3-2：ACDFGI文档 3-3：FD文档 3-4：IB文档 3-5：I文档 3-6：GFC预期结果：0.6667, 1.0, 0.6667, 0.5, 0.3333, 0.5</code></pre><h3 id="想算法"><a href="#想算法" class="headerlink" title="想算法"></a>想算法</h3><p>由于兴趣规则是允许组嵌套的，因此兴趣规则的结构有着递归的性质。自然地，可以使用递归来完成规则匹配度的计算。</p><p>以规则 <code>A and (B or C and D)</code> 为例，这里假设 <code>A</code>、<code>B</code>、<code>C</code>、<code>D</code> 这四项既可能是一个单项，也可能是一个整组，它们的匹配度分别为 <code>a</code>、<code>b</code>、<code>c</code>、<code>d</code>，整条规则的人工计算思路如下：</p><pre><code>从左往右看，首先计算A的匹配度a继续往右，发现规则组(B or C and D)，计算这一组的规则匹配度：    从左往右看，计算B的匹配度b    继续往右，计算C的匹配度c    继续往右，计算D的匹配度d    由于and的优先级高于or，计算and运算，得到c and d，用x1表示c and d的结果    计算or运算，b or x1，用X2表示b or x1的结果    该组结果为x2计算and运算，a and x2，结果记为x3整个规则组匹配度为x3</code></pre><p>尽管 <code>A</code>、<code>B</code>、<code>C</code>、<code>D</code> 这几项本身可能仍嵌套着其它规则，例如 <code>B = B1 or B2 or B3</code>，但我们可以把各项视作一个独立的整体。从整个规则组的角度来看，<code>A</code> 和 <code>(B or C and D)</code> 处于同一层级，两者相互独立；而从 <code>(B or C and D)</code> 组内来看，<code>B</code>、<code>C</code>、<code>D</code> 处于同一层级，三者相互独立。</p><p>也就是说，在同一层次，是分别计算出各项的匹配度之后，再应用运算法则计算出整体的匹配度。</p><p>于是，算法的思路也就出来了：</p><pre><code>计算同一层次各项的匹配度（第一个循环）    对于每一项：        如果它是一个单项，直接调用单项匹配度函数计算        如果它是一个子组，递归计算该子组的匹配度应用运算法则计算综合匹配度（第二个循环）    首先计算所有连续的and运算    计算连续的or运算</code></pre><p>在第一个循环中，将各项的匹配度和逻辑运算符记录到队列中。在第二个循环中，从队列里取出操作数和操作符，并根据取出的操作符与前一个操作符是否相同，采取不同的操作，以保证优先计算各个连续的 and 运算组，最后计算一次连续的 or 运算。</p><h3 id="撸代码"><a href="#撸代码" class="headerlink" title="撸代码"></a>撸代码</h3><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 兴趣规则匹配器接口 * * @author yuan * @version 1.0 * @date 2020/4/4 16:09 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Estimater</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> TRUE <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> FALSE <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    DateTimeFormatter TIME_FORMATTER <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 单项匹配     *     * @param content  内容     * @param ruleItem 规则项     * @return 匹配度     */</span>    <span class="token keyword">double</span> <span class="token function">fit</span><span class="token punctuation">(</span>Object content<span class="token punctuation">,</span> SingleInterestRuleItem ruleItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 连续or运算     *     * @param compatibilities 各项匹配度     * @return 组匹配度     */</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">serialOr</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Double<span class="token operator">></span> compatibilities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> compatibilities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Double<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 连续and运算     *     * @param compatibilities 各项匹配度     * @return 组匹配度     */</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">serialAnd</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Double<span class="token operator">></span> compatibilities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> compatibilities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToDouble</span><span class="token punctuation">(</span>Double<span class="token operator">:</span><span class="token operator">:</span>doubleValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 匹配度评估     *     * @param content   内容     * @param ruleItems 规则项     * @return 匹配度     */</span>    <span class="token keyword">default</span> <span class="token keyword">double</span> <span class="token function">estimate</span><span class="token punctuation">(</span>Object content<span class="token punctuation">,</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractInterestRuleItem</span><span class="token operator">></span> ruleItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Queue<span class="token operator">&lt;</span>Double<span class="token operator">></span> compatibilities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>RuleItemLogicTypeEnum<span class="token operator">></span> logicTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算组内各项的匹配度</span>        ruleItems<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">InterestRuleItemGroup</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 递归计算子组</span>                compatibilities<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token function">estimate</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>InterestRuleItemGroup<span class="token punctuation">)</span> item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRuleItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 计算单项</span>                compatibilities<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token function">fit</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">(</span>SingleInterestRuleItem<span class="token punctuation">)</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            logicTypes<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getLogicType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行整组的逻辑运算</span>        List<span class="token operator">&lt;</span>Double<span class="token operator">></span> orGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>ruleItems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Double<span class="token operator">></span> andGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>ruleItems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RuleItemLogicTypeEnum currentLogic <span class="token operator">=</span> logicTypes<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>compatibilities<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Double compatibility <span class="token operator">=</span> compatibilities<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RuleItemLogicTypeEnum logic <span class="token operator">=</span> logicTypes<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>AND<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>logic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                andGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>compatibility<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>AND<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentLogic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                andGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>compatibility<span class="token punctuation">)</span><span class="token punctuation">;</span>                orGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">serialAnd</span><span class="token punctuation">(</span>andGroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                andGroup<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                orGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>compatibility<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            currentLogic <span class="token operator">=</span> logic<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">serialOr</span><span class="token punctuation">(</span>orGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 匹配度评估     *     * @param parseResult  解析结果     * @param interestRule 兴趣规则     * @return 匹配度     */</span>    <span class="token keyword">default</span> <span class="token keyword">double</span> <span class="token function">estimate</span><span class="token punctuation">(</span>ParseResult parseResult<span class="token punctuation">,</span> InterestRule interestRule<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">estimate</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interestRule<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写一个注解，用于实现自动扫包注册：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author yuan * @version 1.0 * @date 2020/4/6 19:50 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EstimaterFor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">entityType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"entityType"</span><span class="token punctuation">)</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 原始文档兴趣规则匹配器 * * @author yuan * @version 1.0 * @date 2020/4/4 16:11 */</span><span class="token annotation punctuation">@EstimaterFor</span><span class="token punctuation">(</span>OriginalDocument<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OringinalDocumentEstimater</span> <span class="token keyword">implements</span> <span class="token class-name">Estimater</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">fit</span><span class="token punctuation">(</span>Object content<span class="token punctuation">,</span> SingleInterestRuleItem ruleItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>content <span class="token keyword">instanceof</span> <span class="token class-name">OriginalDocument</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        OriginalDocument document <span class="token operator">=</span> <span class="token punctuation">(</span>OriginalDocument<span class="token punctuation">)</span> content<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getJudgeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> TITLE_CONTAIN<span class="token operator">:</span>                <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">case</span> TITLE_NOT_CONTAIN<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token operator">!</span>document<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">case</span> CONTENT_CONTAIN<span class="token operator">:</span>                <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">case</span> CONTENT_NOT_CONTAIN<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token operator">!</span>document<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">case</span> LATER_THAN<span class="token operator">:</span>                <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getUpdateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">case</span> EARLIER_THAN<span class="token operator">:</span>                <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getUpdateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">case</span> LONGER_THAN<span class="token operator">:</span>                <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">case</span> SHORTER_THAN<span class="token operator">:</span>                <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author yuan * @version 1.0 * @date 2020/4/6 20:44 */</span><span class="token annotation punctuation">@EstimaterFor</span><span class="token punctuation">(</span>HyperLink<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HyperLinkEstimater</span> <span class="token keyword">implements</span> <span class="token class-name">Estimater</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">fit</span><span class="token punctuation">(</span>Object content<span class="token punctuation">,</span> SingleInterestRuleItem ruleItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HyperLink link <span class="token operator">=</span> <span class="token punctuation">(</span>HyperLink<span class="token punctuation">)</span> content<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getJudgeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> TITLE_CONTAIN<span class="token operator">:</span>            <span class="token keyword">case</span> CONTENT_CONTAIN<span class="token operator">:</span>                <span class="token keyword">return</span> link<span class="token punctuation">.</span><span class="token function">getAnchorText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span>            <span class="token keyword">case</span> TITLE_NOT_CONTAIN<span class="token operator">:</span>            <span class="token keyword">case</span> CONTENT_NOT_CONTAIN<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token operator">!</span>link<span class="token punctuation">.</span><span class="token function">getAnchorText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ruleItem<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="跑测试"><a href="#跑测试" class="headerlink" title="跑测试"></a>跑测试</h3><p>测试代码（懒得写断言，直接打印）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> OringinalDocumentEstimater documentEstimater<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testEstimater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    InterestRule rule1 <span class="token operator">=</span> InterestRule<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>InterestRule<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                    SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document11 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document12 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"AB"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document13 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rule1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document11<span class="token punctuation">,</span> rule1<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document12<span class="token punctuation">,</span> rule1<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document13<span class="token punctuation">,</span> rule1<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    InterestRule rule2 <span class="token operator">=</span> InterestRule<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document21 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document22 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"AB"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document23 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document21<span class="token punctuation">,</span> rule2<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document22<span class="token punctuation">,</span> rule2<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document23<span class="token punctuation">,</span> rule2<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    InterestRule rule3 <span class="token operator">=</span> InterestRule<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>InterestRule<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                    SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    InterestRule<span class="token punctuation">.</span><span class="token function">andGroup</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                            SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    InterestRule<span class="token punctuation">.</span><span class="token function">andGroup</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                            SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"G"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            InterestRule<span class="token punctuation">.</span><span class="token function">orGroup</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                                    SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_NOT_CONTAIN<span class="token punctuation">,</span> <span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum<span class="token punctuation">.</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document31 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"BDE"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document32 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"ACDFGI"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document33 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"FD"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document34 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"IB"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document35 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OriginalDocument document36 <span class="token operator">=</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"GFC"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rule3<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document31<span class="token punctuation">,</span> rule3<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document32<span class="token punctuation">,</span> rule3<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document33<span class="token punctuation">,</span> rule3<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document34<span class="token punctuation">,</span> rule3<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document35<span class="token punctuation">,</span> rule3<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentEstimater<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>document36<span class="token punctuation">,</span> rule3<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">InterestRule</span><span class="token punctuation">(</span>interestRules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>首项<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>A<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>与<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>B<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>或<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>C<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">0.5</span><span class="token number">1.0</span><span class="token number">0.5</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token function">InterestRule</span><span class="token punctuation">(</span>interestRules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>首项<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>A<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>或<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>B<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>与<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>C<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">1.0</span><span class="token number">1.0</span><span class="token number">0.5</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token function">InterestRule</span><span class="token punctuation">(</span>interestRules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>首项<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>A<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>或<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>B<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>与<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>C<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>或<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>D<span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">(</span>与<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>E<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>与<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>F<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>与<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>G<span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">(</span>或<span class="token punctuation">:</span><span class="token operator">&lt;</span>首项<span class="token punctuation">;</span>标题不含<span class="token punctuation">;</span>H<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>与<span class="token punctuation">;</span>标题包含<span class="token punctuation">;</span>I<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">0.6666666666666666</span><span class="token number">1.0</span><span class="token number">0.6666666666666666</span><span class="token number">0.5</span><span class="token number">0.3333333333333333</span><span class="token number">0.5</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全部通过。</p><h2 id="0x01-实现优先级队列"><a href="#0x01-实现优先级队列" class="headerlink" title="0x01 实现优先级队列"></a>0x01 实现优先级队列</h2><p>先写一个内存队列：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 内存队列 * * @author yuan * @version 0.1 * @date 2020/3/30 16:50 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryHyperLinkExpandQueue</span> <span class="token keyword">implements</span> <span class="token class-name">HyperLinkExpandQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String URL_SEPARATION_TOKEN <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> PriorityQueue<span class="token operator">&lt;</span>HyperLinkToDownload<span class="token operator">></span> queue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 用于记录已在队的超链接 */</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>HyperLink<span class="token operator">></span> inQueue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Integer <span class="token function">getPathDepth</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token keyword">final</span> HyperLinkToDownload link<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> HttpUrlUtils<span class="token punctuation">.</span><span class="token function">parseUrl</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>URL_SEPARATION_TOKEN<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MemoryHyperLinkExpandQueue</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span>HyperLinkToDownload<span class="token operator">></span> comparator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>HyperLinkToDownload hyperLink<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>inQueue<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>hyperLink<span class="token punctuation">.</span><span class="token function">getLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>hyperLink<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>inQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hyperLink<span class="token punctuation">.</span><span class="token function">getLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> HyperLinkToDownload <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>PageCrawler</code> 中传入比较器：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> HyperLinkExpandQueue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryHyperLinkExpandQueue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> l2<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写一个评分路由：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author yuan * @version 1.0 * @date 2020/4/6 19:59 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EstimaterRouter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PACKAGE_PATH <span class="token operator">=</span> <span class="token string">"io.github.wrobezin.eunha.crawler.estimate"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Estimater<span class="token operator">></span> estimaterMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> PARENT_PAGE_RATE <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> LINK_SELF_RATE <span class="token operator">=</span> <span class="token number">0.7</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BeanHelper beanHelper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">EstimaterRouter</span><span class="token punctuation">(</span>BeanHelper beanHelper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>estimaterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beanHelper <span class="token operator">=</span> beanHelper<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 扫包注册</span>        PackageScanUtils<span class="token punctuation">.</span><span class="token function">classScan</span><span class="token punctuation">(</span>PACKAGE_PATH<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>c <span class="token operator">-</span><span class="token operator">></span> c<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>EstimaterFor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>c <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>AnnotationUtils<span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> EstimaterFor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>EstimaterFor<span class="token operator">:</span><span class="token operator">:</span>entityType<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>entityType <span class="token operator">-</span><span class="token operator">></span> estimaterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entityType<span class="token punctuation">,</span> <span class="token punctuation">(</span>Estimater<span class="token punctuation">)</span> beanHelper<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">estimate</span><span class="token punctuation">(</span>ParseResult parseResult<span class="token punctuation">,</span> InterestRule interestRule<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> estimaterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">,</span> interestRule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">estimate</span><span class="token punctuation">(</span>HyperLinkToDownload link<span class="token punctuation">,</span> InterestRule interestRule<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> estimaterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>HyperLink<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interestRule<span class="token punctuation">.</span><span class="token function">getInterestRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">estimate</span><span class="token punctuation">(</span>Double pageCompatibility<span class="token punctuation">,</span> HyperLinkToDownload link<span class="token punctuation">,</span> InterestRule interestRule<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 仿照Shark-Search</span>        <span class="token keyword">return</span> pageCompatibility <span class="token operator">*</span> PARENT_PAGE_RATE <span class="token operator">+</span> <span class="token function">estimate</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> interestRule<span class="token punctuation">)</span> <span class="token operator">*</span> LINK_SELF_RATE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>PageCrawler</code> 的抓取逻辑：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 前面是页面下载和页面解析</span><span class="token comment" spellcheck="true">// 评估页面与兴趣规则之间的匹配度</span><span class="token keyword">double</span> compatibility <span class="token operator">=</span> estimaterRouter<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">,</span> interestRule<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// URL扩展</span><span class="token keyword">if</span> <span class="token punctuation">(</span>crawlRule<span class="token punctuation">.</span><span class="token function">getExpandable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    parseResult<span class="token punctuation">.</span><span class="token function">getLinks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>url <span class="token operator">-</span><span class="token operator">></span> crawlRule<span class="token punctuation">.</span><span class="token function">getExpandToOtherSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> HttpUrlUtils<span class="token punctuation">.</span><span class="token function">hasSameHost</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> linkToDownload<span class="token punctuation">.</span><span class="token function">getLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>expandedLink <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">HyperLinkToDownload</span><span class="token punctuation">(</span>expandedLink<span class="token punctuation">,</span> linkToDownload<span class="token punctuation">,</span> parseResult<span class="token punctuation">,</span> interestRule<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>expandedLink <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                expandedLink<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span>estimaterRouter<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span>compatibility<span class="token punctuation">,</span> expandedLink<span class="token punctuation">,</span> interestRule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>expandedLink<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经测试，队列的效果符合预期。之后还要设法引入历史和时间因素。</p><p><del>今天就写这么点吧，继续征服卡拉迪亚大陆去。</del></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设开发记录(4)：超链接优先级的基本设计</title>
      <link href="/2020/04/03/graduation_project/graduation-project-4/"/>
      <url>/2020/04/03/graduation_project/graduation-project-4/</url>
      
        <content type="html"><![CDATA[<p><del>说好要好好做毕设的，怎么又玩了三天骑砍！远适之啊远适之！你怎么能如此堕落！先前订下的学习计划你都忘了吗？子曰：“吾日三省吾身。”不能再这样下去了！</del></p><h2 id="0x00-他山之石，水土不服：咱这情况不一样"><a href="#0x00-他山之石，水土不服：咱这情况不一样" class="headerlink" title="0x00 他山之石，水土不服：咱这情况不一样"></a>0x00 他山之石，水土不服：咱这情况不一样</h2><p>根据项目需求，爬虫应该在尽可能少的抓取次数内获取到用户感兴趣的内容，那么就必然要引入优先级队列。爬虫的队列算法大体上可以分为基于链接结构的算法和基于内容分析的算法。前期查阅文献时，看到了 <code>Fish-Search</code>、<code>Shark-Search</code>、<code>PageRank</code>、<code>HITS</code>、<code>OPIC</code>、<code>OTIE</code> 等算法，现在自然要借鉴一番。</p><p>要用优先级队列来给超链接排序，需要的是超链接的优先级，这是一个预测性的指标。</p><p>按照项目的实际情况，有这些已知因素可被用于预测一个超链接的价值：</p><ul><li>父页面的内容</li><li>超链接的锚文本</li><li>超链接的 URL</li><li>用户自定义兴趣规则</li></ul><p>由于项目做的不是垂直搜索，无法像主题爬虫那样计算页面的主题相关性，所以必须在用户自定义规则上想办法。算法的设计应当以兴趣规则为中心，借助父页面的内容和超链接本身来进行。</p><p>目前设计的兴趣规则是命题式的逻辑组合规则，类似于高级搜索的筛选条件。显然，页面内容是否匹配兴趣规则，是一个布尔型结果，而主题爬虫计算的页面相关性是一个 0 到 1 之间的浮点型结果。从这个角度来看，像 <code>Shark-Search</code> 和 <code>OTIE</code> 这样的算法都不能直接使用，只有 <code>Fish-Search</code> 是可以直接套用的。如果能设法把二值的 0 和 1 改进成一个 0 到 1 之间的浮点数，算法的性能无疑会更好。</p><h2 id="0x01-化离散为连续：咱这情况又一样了"><a href="#0x01-化离散为连续：咱这情况又一样了" class="headerlink" title="0x01 化离散为连续：咱这情况又一样了"></a>0x01 化离散为连续：咱这情况又一样了</h2><p>从 <code>Fish-Search</code> 到 <code>Shark-Search</code>，先贤是通过把“是否符合主题”改成“与主题的相关性”，从而实现了从布尔值到浮点值的改进。那么，我能否把“是否符合兴趣规则”改进为“符合兴趣规则的程度”呢？</p><p>之前设计的用户自定义兴趣规则形如 <code>标题包含“武汉” AND (标题包含“封城” OR 内容包含“封锁”)</code>，用 <code>A</code> 表示<code>标题包含“武汉”</code>，用 <code>B</code> 表示<code>标题包含“封城”</code>，用 <code>C</code> 表示<code>内容包含“封锁”</code>，那么整条规则就可以表示为 <code>A &amp; (B | C)</code>。如果用 <code>D</code> 来表示 <code>(B | C)</code> 这个整体，那么整条规则又可以表示成 <code>A &amp; D</code>。</p><p>于是，如果一个页面同时满足 <code>A</code> 和 <code>D</code>，那么它就满足了整条规则；如果它满足 <code>B</code> 或 <code>C</code> 其中之一，那么它就满足了 <code>D</code>。</p><p>假如一个页面只满足 <code>A</code> 而不满足 <code>D</code>，或者反过来，那我就认为页面满足了规则的二分之一，即与规则的匹配程度是 0.5。</p><p>换言之，通过将兴趣规则拆分成更细碎的命题，就可以衡量一个页面与兴趣规则之间的匹配程度。</p><p>接下来就是考虑如何对兴趣规则进行拆分了。</p><p>一种做法是按照整条规则中原子命题的满足数目来计算。设 <code>A and B or C and E and F</code> 中的 <code>A</code>、<code>B</code>、<code>C</code>、<code>D</code>、<code>E</code>、<code>F</code> 都是原子命题，且其中 <code>A</code> 和 <code>B</code> 为真，那么就认为匹配程度是 <code>2/5</code>。显然，这种做法没有考虑到<code>与</code>逻辑和<code>或</code>逻辑的区别，实际上也就是没有考虑到不同原子命题之间的重要性区别，是不合理的。</p><p>怎样才能从复杂的逻辑语句中看出每个原子命题的重要性呢？众所周知，<code>与</code>逻辑的优先级比<code>或</code>逻辑更高，这就是突破点。</p><p>设有一条规则 <code>A or B and C and D or E and F</code>，由于<code>与</code>逻辑的运算优先级比<code>或</code>逻辑高，那么整条规则就可以根据<code>或</code>逻辑拆分成三组：</p><ul><li><code>A</code></li><li><code>B and C and D</code></li><li><code>E and F</code></li></ul><p>页面只要符合其中一组，其规则匹配度就是 1。</p><p>那如果每一组都不满足呢？再来考虑 <code>B and C and D</code> 这一组，如果页面满足 <code>B</code> 和 <code>C</code> 两个原子命题而不满足 <code>D</code>，那么页面就匹配了这一组规则的三分之二。</p><p>那么，如果 <code>B and C and D</code> 和 <code>E and F</code> 都是部分满足，该取哪一组呢？假设 <code>B</code>、<code>C</code>、<code>E</code> 三个原子命题为真，<code>B and C and D</code> 就有三分之二符合，而 <code>E and F</code> 有二分之一符合，根据<code>或</code>逻辑的特性，<code>0 | 1</code> 的结果为 <code>1</code>，直觉上，<code>2/3 | 1/2</code> 结果为 <code>2/3</code> 会比 <code>1/2</code> 更加合理，因为 <code>1</code> 比 <code>0</code>大，而 <code>2/3</code> 比 <code>1/2</code> 大。这完全是依据直觉进行设计的。<del>我觉得这很 cooooooooool（Jeff 脸）！</del></p><p>当然，在上面这种情况中或许可以考虑用 <code>0</code>、<code>2/3</code>、<code>1/2</code> 这几个数值进行某种计算来获取一个综合性的结果，但我认为<code>或</code>逻辑带有<strong>选择</strong>的味道，所以取最大值是合情合理的。这样设计的缺点是，<code>or</code> 运算对最大值会非常敏感。在命题复杂的情况下，参与 <code>or</code> 运算的项越多，最终结果越可能会被放大，直接取最大值，整体匹配度很容易被匹配度最高的一个小项拉高。针对这种情况，我有一些不甚靠谱的改进想法，记录在博文的最后，目前还是先按取最大值做吧。</p><p>于是，几条运算法则就设计好了：</p><ul><li>从左到右计算</li><li>先计算括号内，后计算括号外</li><li>先计算 and，后计算 or</li><li>score(P1 and P2 and … and Pn) = sum(Pi)/n</li><li>score(P1 or P2 or … or Pn) = max{P1,P2,…,Pn}</li></ul><p>这里没有考虑<code>非</code>逻辑，实际上，由于<code>非</code>逻辑是单目运算的，我们可以把它消去，只需把命题的真值取反即可。</p><p>所以，计算一个页面与兴趣规则之间的匹配程度的过程如下：首先要将<code>非</code>逻辑消去，然后自顶向下地对兴趣规则命题进行拆分，最后应用运算法则进行计算。</p><p>再来模拟一下有规则组嵌套的情况，设有一条规则<code>A or B and C or (D and (E and F) and (G or (not H and I)))</code>，其中原子命题<code>B</code>、<code>D</code>、<code>E</code> 为真，其计算过程如下：</p><pre><code>  A or B and C or (D and (E and F) and (G or (not H and I)))= 0 or 1 and 0 or (1 and (1 and 0) and (0 or (not 0 and 0)))= 0 or 1 and 0 or (1 and (1 and 0) and (0 or (1 and 0)))= 0 or 1/2 or (1 and 1/2 and (0 or 1/2))= 0 or 1/2 or (1 and 1/2 and 1/2)= 0 or 1/2 or 2/3= 2/3</code></pre><p><code>2/3</code> 还是挺大的。如果只考虑原子命题的数量，并且把 <code>not H</code> 看作一个原子命题，那么 9 个原子命题中只满足 4 个，得分就只有 <code>4/9</code> 了。</p><p>之前做 java 类设计的时候已经考虑到了规则组嵌套的情况，写算法时只需来一发递归即可。</p><p>无论如何，兴趣规则拆分的做法只是一种根据直觉作出的设计，具体效果还得写出代码跑过才知道。当然，相比起 0/1 二值，拆分后的做法只不过是让原本得分为 0 的那些超链接有了得分大于 0 的可能而已，只要页面能完全匹配兴趣规则，仍然能得到满分，所以，这种做法的效果即使毫无改进，也肯定不会比直接使用布尔值差。</p><h2 id="0x02-超链接优先级设计：王侯将相皆有种也"><a href="#0x02-超链接优先级设计：王侯将相皆有种也" class="headerlink" title="0x02 超链接优先级设计：王侯将相皆有种也"></a>0x02 超链接优先级设计：王侯将相皆有种也</h2><p>评价页面和兴趣规则之间匹配程度的指标有了，接下来就该考虑怎样计算超链接的优先级了。</p><p><code>OPIC</code> 算法的主要思想是将网页现有的得分平均分配给它的出链，和 <code>PageRank</code> 相比，它不需要进行迭代计算。<code>OTIE</code> 则结合链接结构与内容分析，使用类似于 <code>OPIC</code> 算法的得分分配机制，并使得页面的得分与主题相关性成正比。</p><p><code>Fish-Search</code> 算法的主要思想是模拟鱼群繁衍生息的行为，捕食成功的鱼（与主题相关）能够生下更多的后代（出链优先抓取），反之，捕食失败的鱼（与主题无关）生下更少的后代（出链抓取优先级低）。在 <code>Fish-Search</code> 的基础上，<code>Shark-Search</code> 除了将离散布尔值改成连续的相关性值，还增加了锚文本信息和锚文本上下文两个计算因子。</p><p>仿照 <code>OTIE</code> 和 <code>Shark-Search</code> 的思想，我就可以设计出一种适用的超链接排序算法。</p><p>首先，基本思路就是以兴趣规则匹配度作为一个页面的得分，将该得分分配给页面中的超链接。显然，平均分配并不是一个好办法，而如果要将一个页面中的超链接分个三六九等，无非也就这么些办法：</p><ol><li>考虑链接在页面中的位置</li><li>考虑 URL</li><li>考虑链接的上下文</li><li>考虑锚文本</li><li>参照历史数据</li></ol><p>要考虑 URL 在页面中的位置，并不是一件容易的事情。如果是一个做了专用解析器的网站，还可以区分一个链接是否位于重要位置（工作量也要随之大增），而如果是一个没有做专门解析器的网站，区分每个超链接是否位于重要位置需要使用一些视觉分割算法或者是密度分割算法，对我来说这实在太难了。</p><p>如果要考虑 URL，可以使用的信息有 HOST、URL 长度、URL 层级深度（斜杠的数量）、URL 的单词文本等。像 URL 长度和层级深度这种信息，对通用爬虫来说的确有助于判断一个页面的重要程度，然而并不适用于我的毕设项目。URL 中的文本量也非常少，即使是传统的主题爬虫也很难利用。唯一可以设法利用的也就是 HOST 了，而我能想到的也只是判断链接的 HOST 是否与当前页面相同……URL 所蕴含的信息还是太难利用了。</p><p>链接上下文被 <code>Shark-Search</code> 所采用，但我认为这并不是一个很好的计算要素。以新浪、凤凰这样的门户网站首页为例，一大堆不相关的、指向不同新闻网页的链接挤在一块是一件非常常见的事情，“指向相关页面的链接会集中出现”并不是一个符合实际的假设。</p><p>至于锚文本，可以将其看作是对所指向页面内容的概括，可以近似看作是所指向页面的标题。因此，这是一个非常可靠的要素，计算锚文本与兴趣规则之间的匹配程度，可以用于表征一个超链接的重要程度。</p><p>历史数据也是可靠的参考要素。由于项目要做页面监控，爬虫就必然要重复抓取已经抓取过的页面。对于一个已经确定完全满足兴趣规则的页面，爬虫可以直接从数据库中取出其 URL 并进行下载。同样地，一个页面与一条兴趣规则之间的匹配程度也可以保存到数据库中，假如一个超链接所指向的页面曾经被抓取过，且其规则匹配度较高，向它分配更多的得分是合理的。另一方面，从历史数据中，可以得知一个经常抓取的页面的更新频率，如果一个页面更新很低，那么可以稍微降低其抓取优先级，因为项目的爬虫希望抓取的是用户感兴趣的页面更新信息，而不是重复地抓取用户已经阅读过的信息。</p><p>具体的计算式子，等写代码的时候再想吧。</p><h2 id="0x03-一些想法"><a href="#0x03-一些想法" class="headerlink" title="0x03 一些想法"></a>0x03 一些想法</h2><p>在计算网页与兴趣规则之间的匹配度时，我把 <code>or</code> 运算设计为取最大值，这可能会导致少数规则项过分拉高整体匹配度的情况。我有一些不知是否有效的改良方法，将来有精力再作探究。以 <code>0</code>、<code>1/2</code>、<code>2/3</code> 这一组数据为例，可以有这些替代的计算方法：</p><ul><li>取最大值的平方，即 <code>4/9</code>。</li><li>取最大值减去平均值的结果，即 <code>2/3 - (0 + 1/2 + 2/3) / 3 = 5/18</code>。</li><li>使用类似概率论的方法计算，直接不考虑 <code>0</code> 这一项，结果是 <code>1 - (1 - 0) * (1 - 1/2) * (1 - 2/3) = 5/6</code>。</li><li>取最大值和匹配概率值之差的绝对值，即 <code>|2/3 - 5/6| = 1/6</code>，这样计算在直觉上说不通，作差也并不合理。</li></ul><p>借助概率论来计算，咋一想似乎是一个不错的办法。然而，一方面，尽管让每一项都参与到了最终结果的计算，最终取值很可能甚至比直接取各项中的最大值还要大；另一方面，<code>1/2</code> 和 <code>2/3</code> 这样的值，是在 <code>and</code> 运算中取平均来获取的，真要根据<code>与</code>逻辑和概率论来计算，本来应该是 <code>0</code>。如果只对 <code>or</code> 运算应用概率论，而不对 <code>and</code> 运算应用，会显得非常奇怪。</p><p>想要找到一种完美的计算指标，或许是不太可能的。不管怎么说，从一开始，搞兴趣规则拆分并计算匹配程度，只是一种出于直觉的估算而已。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设开发记录(3)：基本爬虫框架</title>
      <link href="/2020/03/31/graduation_project/graduation-project-3/"/>
      <url>/2020/03/31/graduation_project/graduation-project-3/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-爬虫工作逻辑设计"><a href="#0x00-爬虫工作逻辑设计" class="headerlink" title="0x00 爬虫工作逻辑设计"></a>0x00 爬虫工作逻辑设计</h2><p>爬虫的工作过程由用户自定义规则决定，下载器从抓取规则中获取种子 URL，下载种子页面并提交给解析器进行解析。解析器从页面中提取网页内容和超链接，将网页内容提交到内容处理器（负责数据持久化等工作），并根据抓取规则将符合扩展要求的超链接提交到 URL 队列。URL 队列根据超链接的锚文本、父页面与兴趣规则的匹配程度、先代页面的链接结构等因素对每个超链接进行评分，以评分作为各个超链接的优先级。之后，下载器从 URL 队列中取下一个 URL，并重复上述过程。</p><p>在爬虫的工作流程中，会产生三种数据：网页下载结果数据、页面解析结果数据、爬取最终结果数据。这三种数据被用于不同组件之间的通信。于是有以下三个数据封装类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 下载结果 * * @author yuan * @version 1.0 * @date 2020/3/30 14:54 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownloadResult</span> <span class="token punctuation">{</span>    UrlInfo urlInfo<span class="token punctuation">;</span>    Response response<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 解析结果 * * @param &lt;T> 内容类型 * @author yuan * @version 1.0 * @date 2020/3/30 14:56 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParseResult</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    String url<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>HyperLink<span class="token operator">></span> links<span class="token punctuation">;</span>    T content<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 爬取结果 * * @author yuan * @version 1.0 * @date 2020/3/30 15:07 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrawlResult</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String searchEnginePageId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String databasePageId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> PageContentTypeEnum contentType<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean newPage<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean updated<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer version<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalDate finishTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每一个被抓取的网页都会分别产生一个上述三种类的对象。，根据用户自定义规则的不同，从一个种子 URL 出发，得到的爬取结果总数也不同。例如，只监控单个页面，就只会产生一条爬取结果；若扩展到相同站点的其它页面，则产生的爬取结果数目是不确定的。因此，调用爬虫的工作方法，返回的应该是一个爬取结果的列表。</p><p>另外，由于需要记录扩展深度，再编写一个 <code>HyperLinkToDownload</code> 类封装超链接及下载深度：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 待下载超链接 * * @author yuan * @version 1.0 * @date 2020/3/30 16:19 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HyperLinkToDownload</span> <span class="token punctuation">{</span>    Integer depth<span class="token punctuation">;</span>    HyperLink link<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x01-编写接口"><a href="#0x01-编写接口" class="headerlink" title="0x01 编写接口"></a>0x01 编写接口</h2><p>爬虫接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 爬虫接口 * * @author yuan * @version 1.0 * @date 2020/3/30 14:57 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Crawler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 爬取     *     * @param customizedRule 用户自定义规则     * @return 爬取结果     */</span>    List<span class="token operator">&lt;</span>CrawlResult<span class="token operator">></span> <span class="token function">crawl</span><span class="token punctuation">(</span>CustomizedRule customizedRule<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>URL 队列接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 超链接扩展队列 * * @author yuan * @version 0.1 * @apiNote 扩展新链接时应注意排除一定时间段内已抓取过的URL * @date 2020/3/30 15:35 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HyperLinkExpandQueue</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 增加超链接     *     * @param link 超链接     * @return 是否增加成功     */</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>HyperLinkToDownload link<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取下一个超链接     *     * @return 下一个超链接     */</span>    HyperLinkToDownload <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断队列是否为空     *     * @return 是否为空     */</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x02-解析器"><a href="#0x02-解析器" class="headerlink" title="0x02 解析器"></a>0x02 解析器</h2><p>由于不同的情况下需要使用不同的解析器，而不同的解析器中存在一些共同的步骤，因此先写一个抽象类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象解析器 * * @author yuan * @version 1.0 * @date 2020/3/31 21:16 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractParser</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 解析     *     * @param downloadResult 下载结果     * @return 解析结果     */</span>    <span class="token keyword">public</span> ParseResult <span class="token function">parse</span><span class="token punctuation">(</span>DownloadResult downloadResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ParseResult parseResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParseResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Document document <span class="token operator">=</span> Jsoup<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">getPayload</span><span class="token punctuation">(</span>downloadResult<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>HyperLink<span class="token operator">></span> hyperLinks <span class="token operator">=</span> HyperLinkUtils<span class="token punctuation">.</span><span class="token function">getAllLinks</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>        UrlInfo urlInfo <span class="token operator">=</span> downloadResult<span class="token punctuation">.</span><span class="token function">getUrlInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parseResult<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>urlInfo<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parseResult<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token function">parseContent</span><span class="token punctuation">(</span>urlInfo<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parseResult<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parseResult<span class="token punctuation">.</span><span class="token function">setLinks</span><span class="token punctuation">(</span>hyperLinks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> parseResult<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取请求载荷，默认取字符串形式     * TODO 支持GBK等字符集     *     * @param response     * @return     */</span>    <span class="token keyword">protected</span> String <span class="token function">getPayload</span><span class="token punctuation">(</span>Response response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Response<span class="token operator">:</span><span class="token operator">:</span>body<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>responseBody <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> responseBody<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取响应载荷字符串错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解析内容     *     * @param urlInfo  URL信息     * @param document HTML     * @return 解析结果     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Object <span class="token function">parseContent</span><span class="token punctuation">(</span>UrlInfo urlInfo<span class="token punctuation">,</span> Document document<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取内容类型     *     * @return 内容类型     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用模板方法模式，具体的解析工作由子类实现，通用 HTML 解析器代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 通用HTML解析器 * * @author yuan * @version 1.0 * @date 2020/3/31 21:44 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneralHtmlParser</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractParser</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">parseContent</span><span class="token punctuation">(</span>UrlInfo urlInfo<span class="token punctuation">,</span> Document document<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> OriginalDocument<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>urlInfo<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> OriginalDocument<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爬虫下载网页后需要将网页提交到不同的解析器，因此再设计一个解析器路由类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 解析器路由，根据下载结果获取对应解析器进行解析 * * @author yuan * @version 1.0 * @date 2020/3/31 21:16 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParserRouter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO 扫包注册专用解析器</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> AbstractParser<span class="token operator">></span> specificParsers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> GeneralHtmlParser generalHtmlParser<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ParserRouter</span><span class="token punctuation">(</span>GeneralHtmlParser generalHtmlParser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>specificParsers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>generalHtmlParser <span class="token operator">=</span> generalHtmlParser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ParseResult <span class="token function">parse</span><span class="token punctuation">(</span>DownloadResult downloadResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String host <span class="token operator">=</span> downloadResult<span class="token punctuation">.</span><span class="token function">getUrlInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractParser abstractParser <span class="token operator">=</span> specificParsers<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> generalHtmlParser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> abstractParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>downloadResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-爬虫类"><a href="#0x03-爬虫类" class="headerlink" title="0x03 爬虫类"></a>0x03 爬虫类</h2><p>先写出大致框架：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 网页爬虫类，抓取HTML内容 * * @author yuan * @version 1.0 * @date 2020/3/30 15:49 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageCrawler</span> <span class="token keyword">implements</span> <span class="token class-name">Crawler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ----------------------------------------工作逻辑相关----------------------------------------</span>    <span class="token comment" spellcheck="true">// TODO</span>    <span class="token keyword">private</span> HyperLinkExpandQueue queue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ParserRouter parserRouter<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PageCrawler</span><span class="token punctuation">(</span>ParserRouter parserRouter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parserRouter <span class="token operator">=</span> parserRouter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>CrawlResult<span class="token operator">></span> <span class="token function">crawl</span><span class="token punctuation">(</span>CustomizedRule customizedRule<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CrawlRule crawlRule <span class="token operator">=</span> customizedRule<span class="token punctuation">.</span><span class="token function">getCrawlRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将种子URL加入队列</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HyperLinkToDownload</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HyperLink</span><span class="token punctuation">(</span>crawlRule<span class="token punctuation">.</span><span class="token function">getSeedUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>CrawlResult<span class="token operator">></span> crawlResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            HyperLinkToDownload link <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Integer depth <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">getDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">></span> crawlRule<span class="token punctuation">.</span><span class="token function">getMaxExpandDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 下载页面</span>                DownloadResult downloadResult <span class="token operator">=</span> <span class="token function">downloadPage</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 调用解析器解析页面</span>                ParseResult parseResult <span class="token operator">=</span> parserRouter<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>downloadResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 处理解析结果并将最终爬取结果添加到爬取结果列表</span>                crawlResults<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">handleParseResult</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// URL扩展</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>crawlRule<span class="token punctuation">.</span><span class="token function">getExpandable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    parseResult<span class="token punctuation">.</span><span class="token function">getLinks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>url <span class="token operator">-</span><span class="token operator">></span> crawlRule<span class="token punctuation">.</span><span class="token function">getExpandToOtherSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> HttpUrlUtils<span class="token punctuation">.</span><span class="token function">hasSameHost</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> link<span class="token punctuation">.</span><span class="token function">getLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>expandedLink <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">HyperLinkToDownload</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> expandedLink<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>queue<span class="token operator">:</span><span class="token operator">:</span>offer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"下载{}出错：{}"</span><span class="token punctuation">,</span> link<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> crawlResults<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> DownloadResult <span class="token function">downloadPage</span><span class="token punctuation">(</span>HyperLink link<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        UrlInfo urlInfo <span class="token operator">=</span> HttpUrlUtils<span class="token punctuation">.</span><span class="token function">parseUrl</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Response response <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DownloadResult</span><span class="token punctuation">(</span>urlInfo<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理解析结果     *     * @param parseResult 解析结果     * @return 最终爬取结果     */</span>    <span class="token keyword">private</span> CrawlResult <span class="token function">handleParseResult</span><span class="token punctuation">(</span>ParseResult parseResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO 持久化</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>parseResult<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ------------------------------------------网络相关------------------------------------------</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> OkHttpClient HTTP_CLIENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Response <span class="token function">get</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> HTTP_CLIENT<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Response <span class="token function">post</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> formParam<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FormBody<span class="token punctuation">.</span>Builder formBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormBody<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        formParam<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>formBuilder<span class="token operator">:</span><span class="token operator">:</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> HTTP_CLIENT<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>formBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Response <span class="token function">postJson</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String json<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> HTTP_CLIENT<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"application/json; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>持久化涉及多种实体类，并且需要连接 ElasticSearch 和 MongoDB，之后再写，目前只需要打印日志观察。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设开发记录(2)：数据实体及其持久化</title>
      <link href="/2020/03/29/graduation_project/graduation-project-2/"/>
      <url>/2020/03/29/graduation_project/graduation-project-2/</url>
      
        <content type="html"><![CDATA[<h2 id="设计需要持久化的类"><a href="#设计需要持久化的类" class="headerlink" title="设计需要持久化的类"></a>设计需要持久化的类</h2><h3 id="页面信息"><a href="#页面信息" class="headerlink" title="页面信息"></a>页面信息</h3><p>抓取到的网页内容需要存到 ElasticSearch 中，因此要有对应实体类 <code>Page</code>。</p><p>问题在于，只能为一部分网站编写专门的解析器，这部分网站的页面内容可以直接被提取成带有标题、作者、正文等信息的文章，并以文章的形式保存；而其它网站的页面，只能直接存储原始的 HTML 标签。另外，即使是提供了专门解析器的网站，也可能存在仅含超链接而不含正文的页面（导航页），这些页面也应该以原始 HTML 的方式保存。</p><p>为了让两种情况兼容，我可以在 <code>Page</code> 类中设置 <code>contentType</code> 和 <code>contentId</code> 两个字段。而提取的文章和原始 HTML 文档分别保存到另外的 ElasticSearch 索引上。如果采用这种做法，在增删改查时需要多进行一次操作，总计需要维护 3 个索引。如果将来还需要扩展到文章以外的其它内容形式（比如视频），也很容易扩展。</p><p>另一种做法是，分别设置 <code>article</code> 和 <code>originalDocument</code> 两个字段，直接将解析后的文章或原始 HTML 内容与 <code>Page</code> 一起保存，两者取其中之一，另一个字段置空。如果采用这种做法，只需要维护一个索引，并对这个索引进行增删改查；如果采用这种做法，必须针对置空的字段进行额外的判断操作，尽管在性能上来看，在 Java 中多一次额外的判断操作远远优于多一次 ElasticSearch 操作，但在设计上总让我感觉很不优雅，一来必定存在空字段，二来可扩展性也很差。</p><p>最后我还是选择了第一种方案，尽管需要维护 3 个索引，但每个索引都可以相对清爽。由于页面及其中的文章和原始 HTML 都对应着相同的 URL，我删去了 <code>contentId</code> 字段，让 <code>Page</code> 和它所对应的 <code>Article</code> 或 <code>OriginalDocument</code> 使用相同的 id（URL 的哈希），由于它们被保存在不同的索引上，这并不会引发冲突。此外，因为需要使用 DB 来保存历史版本数据，在 DB 上也需要做相应的维护。</p><h3 id="用户自定义规则"><a href="#用户自定义规则" class="headerlink" title="用户自定义规则"></a>用户自定义规则</h3><p>用户自定义规则包括兴趣规则和抓取规则。</p><p>兴趣规则的类需要支持复杂的逻辑，比如<strong>内容包含“疫情”且(标题不包含“武汉”且标题不包含“意大利”)</strong>。一条完整的复杂规则可以被拆分为若干个逻辑组，一个逻辑组中可以嵌套包含子逻辑组。</p><p>因此，用户自定义规则的实体类 <code>CustomizedRule</code> 需要包含一个规则组列表 <code>List&lt;RuleItemGroup&gt; ruleItems</code>。规则组 <code>RuleItemGroup</code> 和单一规则 <code>SingleRuleItem</code> 都是规则项，于是抽象出一个共同的父类 <code>AbstractRuleItem</code>。在规则组类 <code>RuleItemGroup</code> 中，持有一个规则项列表 <code>List&lt;AbstractRuleItem&gt; ruleItems</code>，列表中的元素类型为抽象的父类，以支持规则组嵌套。</p><p>抓取规则非常简单，目前只需记录种子 URL 和扩展设置即可。之后也可以对抓取规则进行扩展，</p><p>最终代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抓取规则 * * @author yuan * @version 1.0 * @date 2020/3/30 13:52 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrawlRule</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** 种子URL */</span>    <span class="token keyword">private</span> String seedUrl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 是否扩展到其它页面 */</span>    <span class="token keyword">private</span> Boolean expandable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 是否扩展到其它网站，若expandable为false则该项失效 */</span>    <span class="token keyword">private</span> Boolean expandToOtherSite<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 最大扩展深度 */</span>    <span class="token keyword">private</span> Integer maxExpandDepth<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer EXPAND_DEPTH_INFINITE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer EXPAND_DEPTH_ZERO <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer EXPAND_DEPTH_DEFAULT <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 规则项逻辑类型枚举 * * @author yuan * @version 1.0 * @date 2020/3/28 20:17 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RuleItemLogicTypeEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** 第一个规则项，前面不带逻辑运算符 **/</span>    <span class="token function">FIRST</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"首项"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AND</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"与"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">OR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"或"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AND_NOT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"与非"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">OR_NOT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"或非"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer logic<span class="token punctuation">;</span>    <span class="token keyword">private</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 规则项判断类型枚举 * * @author yuan * @version 1.0 * @date 2020/3/28 20:36 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RuleItemJudgeTypeEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** 网页标题包含某个词组 */</span>    <span class="token function">TITLE_CONTAIN</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"标题包含"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 网页标题不含某个词组 */</span>    <span class="token function">TITLE_NOT_CONTAIN</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"标题不含"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 网页内容包含某个词组 */</span>    <span class="token function">CONTENT_CONTAIN</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"内容包含"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 网页内容不含某个词组 */</span>    <span class="token function">CONTENT_NOT_CONTAIN</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"内容不含"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 抓取时间早于或等于某个值 */</span>    <span class="token function">EARLIER_THAN</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"早于"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 抓取时间晚于或等于某个值 */</span>    <span class="token function">LATER_THAN</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"晚于"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 页面内容长度大于或等于某个值 */</span>    <span class="token function">LONGER_THAN</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"长于"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 页面内容长度小于或等于某个值 */</span>    <span class="token function">SHORTER_THAN</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"短于"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer type<span class="token punctuation">;</span>    <span class="token keyword">private</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象兴趣规则项 * * @author yuan * @version 1.0 * @date 2020/3/28 20:30 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractInterestRuleItem</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> RuleItemLogicTypeEnum logicType<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 单一兴趣规则项 * * @author yuan * @version 1.0 * @date 2020/3/28 20:44 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleInterestRuleItem</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractInterestRuleItem</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> RuleItemJudgeTypeEnum judgeType<span class="token punctuation">;</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleInterestRuleItem</span><span class="token punctuation">(</span>RuleItemLogicTypeEnum logicType<span class="token punctuation">,</span> RuleItemJudgeTypeEnum judgeType<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>logicType <span class="token operator">=</span> logicType<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>judgeType <span class="token operator">=</span> judgeType<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleInterestRuleItem <span class="token function">first</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum judgeType<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SingleInterestRuleItem</span><span class="token punctuation">(</span>RuleItemLogicTypeEnum<span class="token punctuation">.</span>FIRST<span class="token punctuation">,</span> judgeType<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleInterestRuleItem <span class="token function">and</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum judgeType<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SingleInterestRuleItem</span><span class="token punctuation">(</span>RuleItemLogicTypeEnum<span class="token punctuation">.</span>AND<span class="token punctuation">,</span> judgeType<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleInterestRuleItem <span class="token function">or</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum judgeType<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SingleInterestRuleItem</span><span class="token punctuation">(</span>RuleItemLogicTypeEnum<span class="token punctuation">.</span>OR<span class="token punctuation">,</span> judgeType<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"&lt;"</span> <span class="token operator">+</span> logicType<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";"</span> <span class="token operator">+</span> judgeType<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">">"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 兴趣规则项组 * * @author yuan * @version 1.0 * @date 2020/3/28 20:28 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">InterestRuleItemGroup</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractInterestRuleItem</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>AbstractInterestRuleItem<span class="token operator">></span> ruleItems<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">InterestRuleItemGroup</span><span class="token punctuation">(</span>AbstractInterestRuleItem<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ruleItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ruleItems<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"规则项组为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ruleItems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>logicType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>RuleItemLogicTypeEnum<span class="token punctuation">.</span>FIRST<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"规则项组第一项的逻辑类型必须为FIRST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ruleItems <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>ruleItems<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"("</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logicType<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> ruleItems<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Objects<span class="token operator">:</span><span class="token operator">:</span>toString<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 兴趣规则 * * @author yuan * @version 1.0 * @date 2020/3/28 20:05 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterestRule</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>InterestRuleItemGroup<span class="token operator">></span> interestRules<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InterestRuleItemGroup <span class="token function">group</span><span class="token punctuation">(</span>AbstractInterestRuleItem<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ruleItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InterestRuleItemGroup</span><span class="token punctuation">(</span>ruleItems<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InterestRule <span class="token function">first</span><span class="token punctuation">(</span>InterestRuleItemGroup group<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InterestRule interestRule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterestRule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">setLogicType</span><span class="token punctuation">(</span>FIRST<span class="token punctuation">)</span><span class="token punctuation">;</span>        interestRule<span class="token punctuation">.</span>interestRules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interestRule<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InterestRule <span class="token function">first</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum judgeType<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterestRuleItemGroup</span><span class="token punctuation">(</span>SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>judgeType<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> InterestRule <span class="token function">and</span><span class="token punctuation">(</span>InterestRuleItemGroup group<span class="token punctuation">)</span> <span class="token punctuation">{</span>        group<span class="token punctuation">.</span><span class="token function">setLogicType</span><span class="token punctuation">(</span>AND<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>interestRules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> InterestRule <span class="token function">and</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum judgeType<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterestRuleItemGroup</span><span class="token punctuation">(</span>SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>judgeType<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> InterestRule <span class="token function">or</span><span class="token punctuation">(</span>InterestRuleItemGroup group<span class="token punctuation">)</span> <span class="token punctuation">{</span>        group<span class="token punctuation">.</span><span class="token function">setLogicType</span><span class="token punctuation">(</span>OR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>interestRules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> InterestRule <span class="token function">or</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum judgeType<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">or</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterestRuleItemGroup</span><span class="token punctuation">(</span>SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>judgeType<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> InterestRule <span class="token function">andNot</span><span class="token punctuation">(</span>InterestRuleItemGroup group<span class="token punctuation">)</span> <span class="token punctuation">{</span>        group<span class="token punctuation">.</span><span class="token function">setLogicType</span><span class="token punctuation">(</span>AND_NOT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>interestRules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> InterestRule <span class="token function">andNot</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum judgeType<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">andNot</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterestRuleItemGroup</span><span class="token punctuation">(</span>SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>judgeType<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> InterestRule <span class="token function">orNot</span><span class="token punctuation">(</span>InterestRuleItemGroup group<span class="token punctuation">)</span> <span class="token punctuation">{</span>        group<span class="token punctuation">.</span><span class="token function">setLogicType</span><span class="token punctuation">(</span>OR_NOT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>interestRules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> InterestRule <span class="token function">orNot</span><span class="token punctuation">(</span>RuleItemJudgeTypeEnum judgeType<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">orNot</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterestRuleItemGroup</span><span class="token punctuation">(</span>SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>judgeType<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InterestRule rule1 <span class="token operator">=</span> InterestRule<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"武汉"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"新冠肺炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rule1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InterestRule rule2 <span class="token operator">=</span> InterestRule<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"武汉"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">group</span><span class="token punctuation">(</span>                        SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"新冠肺炎"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"新冠病毒"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"新冠肺炎病毒"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"新型冠状肺炎"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"新型冠状肺炎病毒"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        SingleInterestRuleItem<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>TITLE_CONTAIN<span class="token punctuation">,</span> <span class="token string">"新型冠状病毒"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rule2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用户自定义规则 * * @author yuan * @version 1.0 * @date 2020/3/30 13:50 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomizedRule</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> CrawlRule crawlRule<span class="token punctuation">;</span>    <span class="token keyword">private</span> InterestRule interestRule<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalDateTime createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalDateTime updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="意外：spring-data-mongodb-与-spring-data-elasticsearch-共存导致的问题"><a href="#意外：spring-data-mongodb-与-spring-data-elasticsearch-共存导致的问题" class="headerlink" title="意外：spring-data-mongodb 与 spring-data-elasticsearch 共存导致的问题"></a>意外：spring-data-mongodb 与 spring-data-elasticsearch 共存导致的问题</h2><p>当我尝试使用 SpringData 连接 ElasticSearch 进行页面数据保存和查询时，测试成功。然而，在引入 MongoDB 后，项目启动时报错了：</p><pre><code>Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.2020-03-29 02:50:54.386 ERROR 4972 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : ***************************APPLICATION FAILED TO START***************************Description:The bean 'pageMongoRepository' could not be registered. A bean with that name has already been defined and overriding is disabled.Action:Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true</code></pre><p>Bean 重复，一个不应该出现的问题。我另开了一个项目，写了一个简单的 demo，却无法复现问题。最后我发现，在去掉 <code>Page</code> 类上的 <code>@Document(indexName = "xxx")</code> 之后问题得到解决。然而，这个注解用于标注 ES 索引，如果将它删去，就不能正常地连接 ElasticSearch。换言之，是使用 SpringData 同时连接 ElasticSearch 和 MongoDB 的问题，以前同时连接 MySQL 和 MongoDB 是不会出现这个问题的。</p><p>根据提示，可以尝试 “setting spring.main.allow-bean-definition-overriding=true”，然而，这样做只不过是拉偏架而已，并不能达到两种 Repository 共存的目的。</p><p>百度无果，只好到 StackOverFlow 去啃英文了。一番搜索之后，果然找到了类似的问题：</p><ul><li><a href="https://stackoverflow.com/questions/24472296/how-to-modeling-when-use-spring-data-mongo-and-spring-data-elasticearch" target="_blank" rel="noopener">How to modeling when use Spring data mongo and Spring data elasticearch?</a></li><li><a href="https://stackoverflow.com/questions/36376447/combining-spring-data-for-mongodb-and-elasticsearch" target="_blank" rel="noopener">Combining SpringData for MongoDB and Elasticsearch</a></li></ul><p>一种可行的方案是分别为 ElasticSearch 和 MongoDB 各写一个 model 类。这种做法是我无法接受的，分开写两个几乎完全一样 entity 实在是太蠢了。</p><p>最后还是找到了 Spring 官方网站上的这条 issue：<br><a href="https://jira.spring.io/browse/DATAES-57" target="_blank" rel="noopener">DATAES-57</a></p><p>按照官方给出的解答，顺利解决问题。StackOverFlow 上外国程序员给出的解答一直都在强调分包和给 <code>@EnableXXXRepositories</code> 注解加 <code>basePackages</code> 值，实际上关键在于给 <code>@EnableAutoConfiguration</code> 加上 <code>exclude = MongoRepositoriesAutoConfiguration.class</code>。似乎是 spring-data-mongodb 和 spring-data-elasticsearch 的默认配置冲突了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设开发记录(1)：初步设计</title>
      <link href="/2020/03/28/graduation_project/graduation-project-1/"/>
      <url>/2020/03/28/graduation_project/graduation-project-1/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-基本需求"><a href="#0x00-基本需求" class="headerlink" title="0x00 基本需求"></a>0x00 基本需求</h2><ul><li>定时爬取并存储指定网站或页面的数据。</li><li>捕获页面的变更信息及特征信息。</li><li>发现用户感兴趣的页面变更信息时通知用户。</li><li>提供对已存储数据的搜索功能。</li></ul><h2 id="0x01-要点设计"><a href="#0x01-要点设计" class="headerlink" title="0x01 要点设计"></a>0x01 要点设计</h2><h3 id="页面解析"><a href="#页面解析" class="headerlink" title="页面解析"></a>页面解析</h3><p>如果是针对特定的网站，当然可以编写一个专用的解析器来提取内容，但这个项目要求用户可以自定义信源，那么就必须要有一个通用的内容提取方法。初步设计是，对于部分网站，编写专门的解析器；而未提供专门解析器的网站，则像百度快照那样直接保存原始 HTML 的部分，默认直接提取 body 标签，也可以允许用户指定若干个 XPath。在界面上告知用户，是否提供对其所指定的网站或页面的专门解析服务。</p><h3 id="用户自定义规则"><a href="#用户自定义规则" class="headerlink" title="用户自定义规则"></a>用户自定义规则</h3><p>因为要允许用户自行指定要抓取的网站，并且要发现用户感兴趣的变更信息，那么就需要设计一套支持自定义抓取和解析规则的爬虫系统。用户自定义规则可以包括关键字包含、关键字组合、更新时间限制、更新文本量限制等逻辑，并且应当允许与或非组合。为简单起见，文本主题之类的可能需要借助 NLP、机器学习等技术的规则就不做了，但是应该留下可扩展空间（其实新闻类网站的文章本身就带有分类信息，可以利用）。</p><p>用户自定义规则主要用在两处，一是兴趣点信息变更通知，二是 URL 优先级。</p><p>用户自定义规则是需要持久化的，初步计划是设计一个对应的类，存储到 MongoDB 中。在定时任务中，调用规则类对象来判断是否符合用户的兴趣。</p><h3 id="抓取优先级"><a href="#抓取优先级" class="headerlink" title="抓取优先级"></a>抓取优先级</h3><p>爬虫只会从用户指定的种子 URL 开始抓取，抓取范围是限定的；每个用户只对具有指定特征的信息感兴趣；但在系统开发者的角度来看，用户的兴趣又是未知的。因此，可以让爬虫在限定范围内尽可能抓取更多的网页，同时，使用优先级队列，优先抓取更可能满足用户兴趣的网页。由于用户兴趣是难以预测的，也难以引入协同过滤之类的推荐算法，因此，只能根据已知的用户兴趣来衡量页面的价值。</p><p>对网页的优先级进行评价，可以根据链接结构或页面内容。目前的计划是，使用类似 Shark-Search 的算法，借助用户自定义规则（而不是主题相关性）来对网页的价值进行评估。后期若有足够的时间和精力，可以引入 OTIE 之类的考虑链接结构的算法再作进一步的优化。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>以前从来没有做过相关的开发，这次正好学一点 ElasticSearch。初步计划很简单，直接把解析后的网页存入 ElasticSearc，用 IK 分词器来分词，配一个过得去的词典，完全依赖 ElasticSearc 和 SpringData 来实现相关功能。之后如果有足够的时间，再进行优化。</p><h3 id="信息变更捕获"><a href="#信息变更捕获" class="headerlink" title="信息变更捕获"></a>信息变更捕获</h3><p>当初选题的时候，看到这个需求，我首先想到的就是 github 的代码对比功能。经过一番搜索，找到了介绍 diff 算法的文章，也找到了现成的工具。嗯，前人造好了轮子，拿过来封装一下就好了。</p><h3 id="历史文档信息"><a href="#历史文档信息" class="headerlink" title="历史文档信息"></a>历史文档信息</h3><p>由于需要实现新旧网页内容的比较，必须要保存旧版的数据，而使用 ElasticSearch 保存旧版数据并不是一个好办法。于是，只能采取 DB 与 ES 双写的办法，ES 上保留最新版数据并用于搜索，DB 保存各版本的信息。</p><h2 id="0x02-技术方案"><a href="#0x02-技术方案" class="headerlink" title="0x02 技术方案"></a>0x02 技术方案</h2><p>用户信息和用户自定义规则之类的东西存进 MongoDB，抓取到的文档存入 ElasticSearch，然后用 SpringData 来访问。</p><p>优先级队列先用 JDK 中的 PriorityQueue，之后如果有时间再改成 RabbitMQ。</p><p>由于已经浪费了两个月，只能先用 SpringBoot 写出单机可用的系统，然后抓紧时间写完前端，最后有空再用 SpringCloud 重构成微服务的形式，试试分布式部署。 </p><p>各模块的具体设计，走一步看一步吧。虽然整体上看起来挺简单的，但时间不多了，不能再摸鱼了！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设开发记录(0)：开题报告</title>
      <link href="/2020/03/27/graduation_project/graduation-project-0/"/>
      <url>/2020/03/27/graduation_project/graduation-project-0/</url>
      
        <content type="html"><![CDATA[<p>不知不觉马上就要 4 月了，到现在毕业设计还只做了一点点，加上最近几周一直在玩游戏，连之前写的那一点点代码都看不懂了。反正之前写的那一点写得也很烂，干脆重新做好了。后面的日子要勒紧了，顺便写下博客记录一下关键内容吧。开题报告也直接贴上来吧。</p><blockquote><p>胡适之啊胡适之!你怎么能如此堕落!先前订下的学习计划你都忘了吗?子曰:“吾日三省吾身。”不能再这样下去了!</p></blockquote><hr><h2 id="设计题目"><a href="#设计题目" class="headerlink" title="设计题目"></a>设计题目</h2><p>基于网络爬虫的网站页面更新监测系统</p><h2 id="设计的目的及意义"><a href="#设计的目的及意义" class="headerlink" title="设计的目的及意义"></a>设计的目的及意义</h2><h3 id="设计背景"><a href="#设计背景" class="headerlink" title="设计背景"></a>设计背景</h3><p>随着互联网上信息的爆炸式增长，人们对信息聚合和信息检索的需求也日益提升。为了满足用户的信息获取需求，分类目录、门户网站、搜索引擎、新闻资讯推送应用等服务陆续诞生。</p><p>分类目录是一种导航网站，以国外的 Yahoo 和国内的 hao123 为代表。这种网站通过人工整理的方式把各种各样的高质量网站分类整理 $^{[1]}$，以黄页的形式罗列出来，供用户自行查找和跳转。这种服务只适合桌面端用户，且仅能用作导航，已无法满足当今用户对简便性和高效性的需求。</p><p>门户网站是一种提供综合性互联网信息资源的应用系统，国内的新浪、网易、搜狐等网站均属此类。这类服务的主要缺点是内容需要编辑人员人工维护，并且信息过于繁杂，需要用户自行过滤不感兴趣的内容。门户网站的全站主页和各分类主页更新频率较高，用户在访问时只能看到最新的推荐内容，需要花费较多的时间才能找到历史信息。</p><p>搜索引擎是一种在万维网上搜集并组织信息然后供用户查询的软件系统 $^{[1],[2]}$，它允许用户有目的性地通过关键词查询所需的信息。常见的搜索引擎主要有通用搜索引擎、垂直搜索引擎和元搜索引擎。通用搜索引擎在收录信息时，考虑的是信息的综合价值，而不会考虑用户的潜在兴趣，有用信息含量较低，无法满足用户的专门性、针对性检索需求。同时，如果查询关键词存在多种语义，通用搜索引擎的用户必须自行分辨和筛选查得的信息。垂直搜索引擎专注于特定领域或特定类型的信息 $^{[3]}$，是专为查询某一学科或主题的信息而产生的查询工具。相比通用搜索引擎，垂直搜索引擎在查询准确率和查询深度上都具有很大的优势。然而，垂直搜索引擎面向的是特定的领域或主题，仍然无法满足用户的个性化信息需求。元搜索引擎则是一种将用户查询提交到其它搜索引擎并将结果汇总的搜索引擎 $^{[4]}$，其检索结果的质量在很大程度上受到其它搜索引擎的掣肘。</p><p>新闻资讯推送应用是移动互联时代的最重要信息获取工具之一，2017、2018 两年中新闻资讯类应用的用户总增量接近 2.3 亿 $^{[5]}$。其中，以今日头条为代表的内容聚合分发平台采用大数据技术 $^{[6]}$，根据用户的兴趣、行为、地理位置等信息，结合文本分类、文本聚类、用户画像、协同过滤等算法和技术，为用户提供个性化推送服务 $^{[7]}$。这些应用所提供的推送服务往往存在内容同质化、信源窄化、噪声敏感等问题 $^{[7],[8],[9]}$，无法区分用户的长期兴趣、短期兴趣和潜在兴趣，也不能准确地跟踪用户的兴趣迁移。新闻资讯类应用，尤其是具有个性化推送服务的移动端应用，在继承了门户网站优点的基础上，弥补了门户网站在便捷性和个性化上的缺陷，但其检索能力远不如搜索引擎。</p><p>上述几种信息服务，在一定程度上可以满足用户的部分信息获取需求。其中，搜索引擎是相对最高效的主动信息获取工具，而个性化新闻资讯推送应用则是相对最友好的被动信息获取工具。然而，这些信息服务都无法很好地满足用户在一段时间内跟踪指定兴趣点的需求，用户也无法自行指定信息来源。换言之，当今的信息服务仍未能很好地满足用户自定义信息获取规则的需求，这方面存在研究和开拓的空间。</p><p>假如结合垂直搜索引擎与个性化新闻资讯推送应用的优点，根据用户指定的规则进行信息采集和信息推送，就可以在一定程度上解决上述问题。针对该问题，本设计将信息获取简化为网页内容获取，设计和开发一个用户可定义规则的、面向网页信息采集和推送的软件系统。</p><h3 id="目的与意义"><a href="#目的与意义" class="headerlink" title="目的与意义"></a>目的与意义</h3><h3 id="1-自动化监控网站页面变更，解决小场景下的用户痛点"><a href="#1-自动化监控网站页面变更，解决小场景下的用户痛点" class="headerlink" title="1. 自动化监控网站页面变更，解决小场景下的用户痛点"></a>1. 自动化监控网站页面变更，解决小场景下的用户痛点</h3><p>假如用户需要人工监控某个或某群网站的页面增加、页面删除、页面内容更改，就需要付出大量人力反复进行页面访问、页面内容比对等工作，工作量将随网站规模的增大而急剧增长，其成本十分昂贵，监控质量也无法得到保障。针对这一场景，设计一个网站页面更新监控系统，自动采集目标网站数据，并捕获网页的变更信息和特征信息，若发现网站或独立页面发生了用户感兴趣的更新，就通过邮件、短信等方式通知用户。该系统不仅可以免除人工访问页面和对比数据之劳，更可以根据用户设定的规则有选择地将页面变更信息推送给用户。</p><p>基于网络爬虫的网站页面更新监控系统不仅能实现监控指定网站或独立页面更新的功能，如果以类似搜索引擎的工作方式遍历指定范围内的可访问页面，并提取这些页面的内容，实际上也可以提供搜索服务。因此，该系统实际上可以充当一个针对特定范围信息的搜索引擎，其搜索服务介于通用搜索引擎和垂直搜索引擎之间，同时能够提供可定制的信息推送服务。另一方面，通过网络爬虫从不同页面获取的内容，在经过处理后，也可以系统</p><p>单从页面监控的角度来看，该系统的应用场景包括但不仅限于网页防篡改监控、产品价格跟踪、连载作品更新跟踪、公示公告信息跟踪、留言评论提醒等；若考虑附带的搜索服务，则可以为用户带来信源可定制的信息获取能力。</p><h3 id="2-由点及面，探索信息服务发展可能"><a href="#2-由点及面，探索信息服务发展可能" class="headerlink" title="2. 由点及面，探索信息服务发展可能"></a>2. 由点及面，探索信息服务发展可能</h3><p>该系统是一个检索与推送相结合的信息服务软件系统，兼具搜索引擎与信息推送应用的部分特点，能同时提供主动和被动的信息服务。尽管该系统面向的内容载体是网站页面，但网页与其它信息形式并没有本质的区别，该系统所探究的可定制化信息服务能在细化场景下为用户带来更好的体验，是一个有价值的信息服务发展方向。如今，各行各业都在寻求在细分领域下的发展 $^{[10]-[14]}$，本设计所关注的应用场景，加以扩展后就是一个可开拓的细分领域。通过设计和实现一个提供搜索功能的网站页面更新监测系统，得以一叶知秋，探索兼具监控与搜索功能的信息服务的发展可能。</p><h2 id="基本内容和技术方案"><a href="#基本内容和技术方案" class="headerlink" title="基本内容和技术方案"></a>基本内容和技术方案</h2><h3 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h3><ul><li>定时爬取并存储指定网站或页面的数据。</li><li>捕获页面的变更信息及特征信息。</li><li>发现用户感兴趣的页面变更信息时通知用户。</li><li>提供对已存储数据的搜索功能。</li></ul><h3 id="目标期望"><a href="#目标期望" class="headerlink" title="目标期望"></a>目标期望</h3><ul><li>用自己熟悉的开发工具和数据库完成系统的开发，使人机交互界面简单友好，易于操作。</li><li>提供详尽、规范的开发文档。</li><li>完成 10000 字以上的毕业论文。</li><li>严格遵守毕业设计相应的规范和要求，积极与指导教师沟通，汇报进度，提高毕业设计水平。</li></ul><h3 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h3><h4 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h4><p>如图 1 所示，箭头方向表示发送请求方向，系统由爬虫模块、数据处理模块、页面数据库、任务调度器、搜索模块、推送模块、用户规则库、用户前端共 8 个主要部件组成。</p><p><img src="%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt="图 1 整体架构"></p><p>其中，任务调度器定时从用户规则库获取用户自定义的信源配置和信息兴趣配置，并控制爬虫模块对用户配置的目标网站或页面进行抓取。爬虫模块抓取到页面数据后，提交到数据处理模块，数据处理模块提取页面的特征信息，并与页面数据库中已存在的页面特征信息进行比对，若页面特征信息存在更新则提交给任务调度器，同时将新的页面特征信息存储到页面数据库。任务调度器接收到页面更新信息后，根据用户定义的规则，决定是否推送给用户，若符合推送规则，则将页面更新信息提交到推送模块，由推送模块通知用户。用户可以通过搜索模块查询页面数据库中已存储的页面特征信息。</p><h4 id="开发技术"><a href="#开发技术" class="headerlink" title="开发技术"></a>开发技术</h4><p>使用 Java 语言完成后端系统的编码。Java 是一门面向对象高级语言，拥有完善的软件生态和活跃的社区环境，允许开发者以优雅的思维方式进行复杂的编程，借助 Java 生态下的开源技术完成系统各模块的开发。使用 Vue 编写用户前端，借助 Web 的跨平台性同时支持桌面端和移动端访问。</p><p>借助 SpringCloud 和 SpringBoot 框架完成系统的搭建，实现各主要组件之间的有序协调。SpringCloud 和 SpringBoot 都是 Java 生态下目前最火热的技术之一，两者相结合，可以大大提高开发效率，让开发者得以方便地整合各种服务，搭建高性能的软件平台 $^{[15]}$。</p><p>使用 ElasticSearch 以文档形式存储页面信息，ElasticSearch 是一个全文搜索引擎，允许用户以 RESTful 接口进行文档操作 $^{[16]}$。使用 IK 分词器对 ElasticSearch 中存储的文档进行中文分词。ElasticSearch提供了高性能的索引服务，使得用户能在毫秒级的时间内完成对大量数据的查询 $^{[17]}$，因此，搜索模块亦可借助 ElasticSearch 来实现。</p><p>使用 MongoDB 存储用户自定义规则等其它非页面信息数据。MongoDB 是一个基于分布式文件存储的列式非关系型数据库，支持复杂的数据类型。用户自定义规则包括关键字包含、关键字组合、更新时间限制、更新文本量限制等复杂逻辑，若采用 MySQL 等关系型数据库，关系表将变得相当复杂和冗余，而使用 MongoDB 则可以使用 BSON 格式来存储数据，使得数据的维护更加容易。</p><p>使用 SpringData 完成对 ElastichSearch 和 MongoDB 的数据操作。SpringData 封装了一系列统一的抽象数据访问接口，允许开发者以相同的方式访问和操作不同的数据源，将开发者从繁复的数据操作中解放出来。由于 ElasticSearch 和 MongoDB 本身的访问方式大不相同，直接使用原生的 Java 来操作会带来许多额外的工作量，而使用 SpringData 则能以优雅的方式解决问题。</p><p>在爬虫模块中，使用 OkHttp 框架进行网络请求的发送，使用最佳优先搜索遍历优先级队列中的链接 $^{[18]}$，该优先级队列使用 RabbitMQ 组件实现，其中优先级采用改良的 Shark-Search 算法进行计算 $^{[19]}$。在数据处理模块中，使用 JSoup 框架实现页面数据的解析，并使用 Myers 差分算法实现新旧页面信息的对比 $^{[20]}$。在推送模块中，使用电子邮件服务实现邮件通知，并使用 JavaScript Web Notification API 实现浏览器的消息推送。</p><h3 id="进度安排"><a href="#进度安排" class="headerlink" title="进度安排"></a>进度安排</h3><ul><li>2 月 28 日之前：结合选题和任务书的目标要求，完成开题报告的撰写；</li><li>2 月 29 日至 3 月 22 日：学习系统开发所需的各项技术，并完成后端系统的部分开发；</li><li>3 月 23 日至 4 月 15 日：完成后端系统的全部开发，并进行主要测试；完成后端系统的文档编写；</li><li>4 月 16 日至 4 月 25 日：完成前端系统开发；</li><li>4 月 25 日至 4 月 30 日：进行系统优化；</li><li>5 月 1 日至 5 月 25 日：撰写及修改毕业论文；</li><li>5 月 26 日至 6 月 5 日：准备答辩。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] 张俊林.这就是搜索引擎 核心技术详解[M].北京:电子工业出版社,2012.</p><p>[2] 宋春阳,金可音.Web搜索引擎技术综述[J].现代计算机(专业版),2008(05):82-85.</p><p>[3] 王文钧,李巍.垂直搜索引擎的现状与发展探究[J].情报科学,2010,28(03):477-480.</p><p>[4] 李广建,黄崑.元搜索引擎及其主要技术[J].情报科学,2002(02):175-179.</p><p>[5] 马俊华. 新闻资讯类APP的用户体验研究[D].长春工业大学,2019.</p><p>[6] 熊敏 . 内容智能分发平台对新闻传播的价值创新分析——以“今日头条”为例［J］. 编辑学刊，2017（02）：94-99.</p><p>[7] 宋佳琳,唐英.大数据背景下个性化新闻推送的问题及策略[J].青年记者,2019(35):27-28.</p><p>[8] 沈姝彤.浅析算法推送下的“个性化”新闻传播现状[J].传播力研究,2019,3(15):260.</p><p>[9] 蔡磊平.凸显与遮蔽:个性化推荐算法下的信息茧房现象[J].东南传播,2017(07):12-13.</p><p>[10] 惠州日报记者 冯丽均 李向英. 更多细分市场领域富矿有待深挖[N]. 惠州日报,2019-08-16(A02).</p><p>[11] 吕长顺.从区块链金融、政务、医疗三个细分领域抓住未来的投资机遇[J].财富时代,2019(11):3-5.</p><p>[12] 张媛珍.化妆品冰箱“空降”市场,开辟细分领域新战场[J].电器,2020(02):26-28.</p><p>[13] 吕长顺.硬核科技板块 从科技基金与细分领域中寻找投资机会[J].财富时代,2019(12):13-15.</p><p>[14] 欧鹏飞,冯乾隆.中国汽车市场预测及细分领域市场案例分析[J].汽车实用技术,2019(23):239-244.</p><p>[15] 王方旭.基于Spring Cloud实现业务系统微服务化的设计与实现[J].电子技术与软件工程,2018(08):60-61.</p><p>[16] 王伟,魏乐,刘文清,舒红平.基于ElasticSearch的分布式全文搜索系统[J].电子科技,2018,31(08):56-59+65.</p><p>[17] Chen D, Yi C, Brownlow B N, et al. Real-Time or Near Real-Time Persisting DailyHealthcare Data Into HDFS and ElasticSearch Index Inside a Big Data Platform[J]. IEEE Transactions on Industrial Informatics, 2017, 13(2):595-606.</p><p>[18] Yong-Bin Yu,Shi-Lei Huang,Nyima Tashi, et al.A Survey about Algorithms Utilized by Focused Web Crawler[J].电子科技学刊,2018,16(2):129-138. DOI:10.11989/JEST.1674-862X.70116018.</p><p>[19] 朱庆生,徐宁,周瑜.一种基于链接和内容分析的自适应主题爬虫算法[J].计算机与现代化,2015(09):77-80+89.</p><p>[20] Nugroho Y S , Hata H , Matsumoto K . How different are different diff algorithms in Git?: Use –histogram for code changes[J]. Empirical Software Engineering, 2019(7).</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一道CTF题的JS逆向</title>
      <link href="/2019/10/18/2019/ctf-js-game/"/>
      <url>/2019/10/18/2019/ctf-js-game/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前两个朋友参加了某 CTF 比赛（他们已经忘了是哪个比赛），在一道安卓逆向题中提取到了一个网页小游戏，无奈小游戏的 JS 做过混淆和反调试，加上时间不够，当时就没拿下这道题。</p><p>最近我从它们那里要来了<a href="game.tar">这个网页小游戏</a>，练习一下 JS 逆向。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="看看目录结构和HTML"><a href="#看看目录结构和HTML" class="headerlink" title="看看目录结构和HTML"></a>看看目录结构和HTML</h3><p>拿到文件，先看目录结构：</p><p><img src="dir.png" alt="目录结构"></p><p>简单而典型的 Web 前端项目结构，没有什么特别的。</p><p>既然是个网页小游戏，当然还要看看它的 HTML 是怎么写的：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Game<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/font-awesome.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/app.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Game<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>score-panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stars<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-star<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-star<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-star<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>moves<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> Moves        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>restart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-repeat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deck<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deck<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/app.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HTML 部分看来没什么特别的，引入了 jquery 和 <code>app.js</code>，这里的 <code>app.js</code> 才是我关注的重点。</p><h3 id="试玩"><a href="#试玩" class="headerlink" title="试玩"></a>试玩</h3><p>这个小游戏是一个记忆翻牌游戏，一共有 4×4=16 张牌，也就是 8 组牌。</p><p>翻出两张同样的牌之后，就可以让这两张牌保持朝上，否则两张牌都要翻回去。每次翻牌都会记录步数。</p><p><img src="tryToPlay1.png" alt="试玩-1"></p><p>当翻到两组同样的牌时，会提示游戏结束，此时如果步数不为 4，会提示让玩家在 4 步以内完成。而把 8 组牌全部翻出来，并不会发生什么特别的事情。</p><p><img src="tryToPlay2.png" alt="试玩-2"></p><h3 id="尝试使用开发者工具"><a href="#尝试使用开发者工具" class="headerlink" title="尝试使用开发者工具"></a>尝试使用开发者工具</h3><p>打开控制台，调试器会陷入无穷无尽的 debugger，显然是做了反调试。</p><p>查看调用堆栈，可知是从 <code>_0x4c9a5d</code> 这个函数内进入了 debugger。</p><p><img src="bugStack.png" alt="调用堆栈"></p><p>到查看器去看 JS 渲染后的 DOM 结构，不难发现每张牌的种类与 class 相关。</p><p><img src="htmlStyle.png" alt="查看器"></p><p>在查看器里直接修改样式，发现令 <code>.card</code> 类的 <code>font-size=0</code> 失效后可以直接看到牌的种类。</p><p><img src="perspective.png" alt="透视"></p><p>也就是说，只要改一下 CSS 文件，就可以做到透视。</p><h3 id="看看CSS"><a href="#看看CSS" class="headerlink" title="看看CSS"></a>看看CSS</h3><p>先把 <code>.card</code> 类的 <code>font-size=0</code> 注释掉。</p><p>然后扫一眼其它内容，发现一件很奇怪的事情，背景图片居然是用 Base64 形式直接写在 CSS 里的：</p><p><img src="strangeCss.png" alt="CSS"></p><p>把 Base64 复制到浏览器地址栏按下回车，可以看到正是小游戏的背景图片，右键另存得到一张大小为 9.63KB 的 PNG 图片。</p><p>而在 /img 目录下有一张看起来一模一样，大小却只有 2.08KB 的图片。</p><p>两张大小不同却内容相同的图片，非常可疑，很有可能存在隐写情况。不过反正咱也不是要做 CTF 题，JS 逆向才是我的首要目标，之后再来研究这两张图片。</p><p>修改 CSS 后，再打开 index.html，在透视的情况下尝试玩这个小游戏。4 步翻出两组后，弹出对话框，提示用 BurpSuite，嗯，先不管，继续做 JS 逆向。</p><p><img src="useBurpSuite.png" alt="提示BurpSuite是个好东西"></p><p>不过，看来真的就只要翻开两组牌就算作游戏结束了……出题的人这是在放水吧？</p><h3 id="尝试查看window变量"><a href="#尝试查看window变量" class="headerlink" title="尝试查看window变量"></a>尝试查看window变量</h3><p>尽管 <code>app.js</code> 做了反调试，几乎相当于把我们的调试器废掉了，然而控制台还是可以用的。</p><p>刷新页面，到控制台去，先看看 window 里面有什么再说：</p><p><img src="windowBefore.png" alt="window"></p><p>不难发现有 <code>gg</code> 和 <code>ss</code> 两个整型变量，有可能是用来计算步数和翻出牌组数的。</p><p>存在 a、b、c、d 四个函数，函数名没有被混淆，这是一个可能有用的信息。</p><p><code>Myarr</code> 数组 存储的显然是 16 张牌的类型。</p><p>再来看看两个 <code>_0x</code> 开头的东西。</p><p><code>_0x1141</code> 是一个函数，里面有一个 Base64 解码器，有点意思：</p><p><img src="0x1141.png" alt="0x1141"></p><p><code>_0x1411</code> 是一个数组，里面放的是一些 Base64 字符串。根据我的经验，这个数组就是用来存放各种变量名、函数名和字符串常量的，而上面那个 <code>_0x1141</code> 应该就是用来取这些字符串的值的。</p><p><img src="0x1411.png" alt="0x1411"></p><p>再次刷新页面，完成一次游戏后，再来看一下 window，发现多了一些东西，也改了一些东西：</p><p><img src="windowAfter.png" alt="处理后的window"></p><p>现在基本可以确定 <code>gg</code> 就是用于记录翻出牌组数的，初始为 0，翻出一组后变为 1，再翻出一组则游戏结束，此时也没必要再改成 2了。</p><p>现在也可以百分百确定 <code>ss</code> 就是操作的步数。</p><p>可以发现多了一个 <code>__0x3696d</code> 数组，里面是 4 个 Base64 字符串。另外有一个字符串变量 <code>xcsmo</code>，值也为 <code>__0x3696d</code>。</p><p>用 <code>atob</code> 函数分别解码这几个 Base64 字符串，没得到有用结果：</p><p><img src="atob0x3696d.png" alt="atob0x3696d"></p><p>考虑到这 4 个字符串里有 3 个带有等于号，显然把它们组合拼接是没什么用的。</p><p>最后试试使用 <code>console</code>，发现不能正常打日志，应该是被重定向了。不过，<code>alert</code> 可以正常使用（毕竟游戏本身也要做弹窗）。</p><p>不过，不让用 console，又能防得住什么呢？顶多也就吓唬吓唬小白而已。</p><h2 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h2><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p><code>app.js</code> 只有一行，要做逆向，自然要把它格式化。直接用浏览器开发者工具里的调试器格式化即可，格式化以后原代码中的各种十六进制转义字符串都会变成可读的字符串，各种十六进制整数常量也会变成十进制。</p><p>新建一个 <code>fucking.js</code> 文件，把格式化以后的代码丢进去，然后到 <code>index.html</code> 里改成引入这个 <code>fucking.js</code> 文件。</p><p>格式化以后先看一眼代码，开头就是字符串数组赋值，嗯，<a href="/2019/09/19/2019/aaa-voter.html">熟悉的味道</a>：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 共249个Base64字符串</span><span class="token keyword">var</span> _0x1411 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'Z01o'</span><span class="token punctuation">,</span>    <span class="token string">'ZUhK'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 中间省略……</span>    <span class="token string">'bHNL'</span><span class="token punctuation">,</span>    <span class="token string">'TGZL'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照经验，这个数组的顺序估计在后面还会被打乱，呵呵，都是套路。</p><p>接下来一段是一个函数：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>_0x1f407c<span class="token punctuation">,</span> _0xa4456f<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _0x23ff7b <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x5512ce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>_0x5512ce<span class="token punctuation">)</span> <span class="token punctuation">{</span>            _0x1f407c<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x1f407c<span class="token punctuation">[</span><span class="token string">'shift'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _0x6356fe <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _0x14a619 <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'cookie'</span><span class="token punctuation">,</span>                <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'timeout'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">'setCookie'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x203115<span class="token punctuation">,</span> _0x4f60ad<span class="token punctuation">,</span> _0x1735f1<span class="token punctuation">,</span> _0x554095<span class="token punctuation">)</span> <span class="token punctuation">{</span>                _0x554095 <span class="token operator">=</span> _0x554095 <span class="token operator">||</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> _0x412bba <span class="token operator">=</span> _0x4f60ad <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> _0x1735f1<span class="token punctuation">;</span>                <span class="token keyword">var</span> _0x1e4c16 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _0x1e4c16 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _0x2a08bc <span class="token operator">=</span> _0x203115<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> _0x1e4c16 <span class="token operator">&lt;</span> _0x2a08bc<span class="token punctuation">;</span> _0x1e4c16<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> _0x34f2ed <span class="token operator">=</span> _0x203115<span class="token punctuation">[</span>_0x1e4c16<span class="token punctuation">]</span><span class="token punctuation">;</span>                    _0x412bba <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'; '</span> <span class="token operator">+</span> _0x34f2ed<span class="token punctuation">;</span>                    <span class="token keyword">var</span> _0x3fa8a0 <span class="token operator">=</span> _0x203115<span class="token punctuation">[</span>_0x34f2ed<span class="token punctuation">]</span><span class="token punctuation">;</span>                    _0x203115<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3fa8a0<span class="token punctuation">)</span><span class="token punctuation">;</span>                    _0x2a08bc <span class="token operator">=</span> _0x203115<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>_0x3fa8a0 <span class="token operator">!==</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        _0x412bba <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'='</span> <span class="token operator">+</span> _0x3fa8a0<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                _0x554095<span class="token punctuation">[</span><span class="token string">'cookie'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x412bba<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">'removeCookie'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">'dev'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">'getCookie'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x5359c4<span class="token punctuation">,</span> _0x2281bb<span class="token punctuation">)</span> <span class="token punctuation">{</span>                _0x5359c4 <span class="token operator">=</span> _0x5359c4 <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x3d096d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> _0x3d096d<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> _0x3237d0 <span class="token operator">=</span> <span class="token function">_0x5359c4</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(?:^|; )'</span> <span class="token operator">+</span> _0x2281bb<span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token regex">/([.$?*|{}()[]\/+^])/g</span><span class="token punctuation">,</span> <span class="token string">'$1'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'=([^;]*)'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> _0x23f4b4 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x20d231<span class="token punctuation">,</span> _0x2acbc9<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">_0x20d231</span><span class="token punctuation">(</span><span class="token operator">++</span>_0x2acbc9<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token function">_0x23f4b4</span><span class="token punctuation">(</span>_0x23ff7b<span class="token punctuation">,</span> _0xa4456f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> _0x3237d0 <span class="token operator">?</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>_0x3237d0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> undefined<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> _0x4861b8 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> _0x36ab13 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\\w+ *\\(\\) *{\\w+ *[\'|"].+[\'|"];? *}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> _0x36ab13<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x14a619<span class="token punctuation">[</span><span class="token string">'removeCookie'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        _0x14a619<span class="token punctuation">[</span><span class="token string">'updateCookie'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x4861b8<span class="token punctuation">;</span>        <span class="token keyword">var</span> _0xe7991f <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> _0x359685 <span class="token operator">=</span> _0x14a619<span class="token punctuation">[</span><span class="token string">'updateCookie'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_0x359685<span class="token punctuation">)</span> <span class="token punctuation">{</span>            _0x14a619<span class="token punctuation">[</span><span class="token string">'setCookie'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'counter'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_0x359685<span class="token punctuation">)</span> <span class="token punctuation">{</span>            _0xe7991f <span class="token operator">=</span> _0x14a619<span class="token punctuation">[</span><span class="token string">'getCookie'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'counter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            _0x14a619<span class="token punctuation">[</span><span class="token string">'removeCookie'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">_0x6356fe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span>_0x1411<span class="token punctuation">,</span> <span class="token number">355</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现函数调用时传入了 <code>_0x1411</code>，函数开头的 <code>_0x23ff7b</code> 里面还对其进行 <code>push</code> 和 <code>shift</code> 这类操作，应该就是在调整 <code>_0x1411</code> 的顺序。</p><p>接下来的 <code>_0x6356fe</code> 和 <code>_0x1411</code> 已经没有关系了，表面上看它是在操作 cookie，但是仔细一看其实和 cookie 根本没有半点关系，最明显的就是 <code>removeCookie</code> 这个函数，直接返回字符串 <code>dev</code>。都做了代码混淆了，这整一段还留下这些可读的函数名，要说不是在误导人，我真不信。</p><p>一时半会儿看不出来这个 <code>_0x6356fe</code> 是干什么用的。</p><p>再次打开 <code>index.html</code>，发现 JS 居然不能正常运行，疑似进入了无穷递归：</p><p><img src="recursion.png" alt="js不能正常运行"></p><p>可能就是在 <code>setCookie</code> 这个函数附近做了反格式化。</p><p>再来细读 <code>_0x6356fe</code> 这整一段，发现在 <code>var _0x14a619</code> 和 <code>var _0x4861b8</code> 中都是在定义各种东西，直到下面这一段才开始执行操作：</p><pre class="line-numbers language-js"><code class="language-js">_0x14a619<span class="token punctuation">[</span><span class="token string">'updateCookie'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x4861b8<span class="token punctuation">;</span><span class="token keyword">var</span> _0xe7991f <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">var</span> _0x359685 <span class="token operator">=</span> _0x14a619<span class="token punctuation">[</span><span class="token string">'updateCookie'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_0x359685<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _0x14a619<span class="token punctuation">[</span><span class="token string">'setCookie'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'counter'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_0x359685<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _0xe7991f <span class="token operator">=</span> _0x14a619<span class="token punctuation">[</span><span class="token string">'getCookie'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'counter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    _0x14a619<span class="token punctuation">[</span><span class="token string">'removeCookie'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先是把 <code>_0x14a619['updateCookie']</code> 重定向到 <code>_0x4861b8</code>，然后通过调用它得到了一个用于 <code>if-else_if-else</code> 结构判断的布尔值。<code>_0x359685</code> 为假时，调用 <code>_0x14a619['setCookie']</code> 进入无穷递归。</p><p>研究一下这个 <code>_0x4861b8</code>函数：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> _0x4861b8 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _0x36ab13 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\\w+ *\\(\\) *{\\w+ *[\'|"].+[\'|"];? *}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _0x36ab13<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x14a619<span class="token punctuation">[</span><span class="token string">'removeCookie'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它调用了 <code>removeCookie</code> 函数的 <code>toString</code> 方法！</p><p>当你调用一个函数的 <code>toString</code> 方法，实际上会得到在定义这个函数时所编写的代码。跑一下下面这段代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果是：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以，格式化以后，<code>removeCookie</code> 函数就会变成多行，从而不满足正则表达式 <code>\\w+ *\\(\\) *{\\w+ *['|"].+[\'|"];? *}</code>。</p><p>那么破解反格式化也就很简单了，把 <code>_0x4861b8</code> 这个函数改成直接返回 true 即可。</p><p>这里注意不能暴力地直接把 <code>_0x6356fe</code> 这一整段全部删除，否则会影响 <code>_0x1411</code> 的顺序调整，导致后面的其它语句出现问题。</p><p>修改以后再打开 <code>index.html</code>，又出现了新的问题，这一次是在 <code>_0x1141</code> 函数里面卡死，且此时仍未进入 deubgger 状态（因为反调试代码还没起作用就卡死了）。</p><p><code>_0x1141</code> 函数代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> _0x1141 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x36b633<span class="token punctuation">,</span> _0x568f8c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _0x36b633 <span class="token operator">=</span> _0x36b633 <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _0x46a8cd <span class="token operator">=</span> _0x1411<span class="token punctuation">[</span>_0x36b633<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_0x1141<span class="token punctuation">[</span><span class="token string">'initialized'</span><span class="token punctuation">]</span> <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> _0x442ff8 <span class="token operator">=</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token string">'return (function () '</span> <span class="token operator">+</span> <span class="token string">'{}.constructor("return this")()'</span> <span class="token operator">+</span> <span class="token string">');'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> _0x4a08d2 <span class="token operator">=</span> <span class="token function">_0x442ff8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> _0x4c6606 <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='</span><span class="token punctuation">;</span>            _0x4a08d2<span class="token punctuation">[</span><span class="token string">'atob'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_0x4a08d2<span class="token punctuation">[</span><span class="token string">'atob'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x45ae9b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> _0x4a37b0 <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>_0x45ae9b<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token regex">/=+$/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _0x27389e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _0xf732f0<span class="token punctuation">,</span> _0x21f772<span class="token punctuation">,</span> _0x12957d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _0x32b485 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> _0x21f772 <span class="token operator">=</span> _0x4a37b0<span class="token punctuation">[</span><span class="token string">'charAt'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x12957d<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">~</span>_0x21f772 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_0xf732f0 <span class="token operator">=</span> _0x27389e <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">?</span> _0xf732f0 <span class="token operator">*</span> <span class="token number">64</span> <span class="token operator">+</span> _0x21f772 <span class="token punctuation">:</span> _0x21f772<span class="token punctuation">,</span> _0x27389e<span class="token operator">++</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">?</span> _0x32b485 <span class="token operator">+</span><span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token string">'fromCharCode'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">&amp;</span> _0xf732f0 <span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> _0x27389e <span class="token operator">&amp;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    _0x21f772 <span class="token operator">=</span> _0x4c6606<span class="token punctuation">[</span><span class="token string">'indexOf'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x21f772<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _0x32b485<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _0x1141<span class="token punctuation">[</span><span class="token string">'base64DecodeUnicode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x4a0c8c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> _0x18e806 <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>_0x4a0c8c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> _0x247b5d <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _0x4d4ae1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _0xfcb5ed <span class="token operator">=</span> _0x18e806<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> _0x4d4ae1 <span class="token operator">&lt;</span> _0xfcb5ed<span class="token punctuation">;</span> _0x4d4ae1<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                _0x247b5d <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'00'</span> <span class="token operator">+</span> _0x18e806<span class="token punctuation">[</span><span class="token string">'charCodeAt'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x4d4ae1<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">'slice'</span><span class="token punctuation">]</span><span class="token punctuation">(</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>_0x247b5d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        _0x1141<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        _0x1141<span class="token punctuation">[</span><span class="token string">'initialized'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_0x1141<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>_0x36b633<span class="token punctuation">]</span> <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _0xf0e55d <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x585984<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'rc4Bytes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x585984<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'states'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>                <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token number">0</span>            <span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'newState'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">'newState'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'firstState'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\\w+ *\\(\\) *{\\w+ *'</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'secondState'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'[\'|"].+[\'|"];? *}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        _0xf0e55d<span class="token punctuation">[</span><span class="token string">'prototype'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'checkState'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> _0x42ca96 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'firstState'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'secondState'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'runState'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x42ca96<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'newState'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'states'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'states'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        _0xf0e55d<span class="token punctuation">[</span><span class="token string">'prototype'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'runState'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x5bffed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">~</span>_0x5bffed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> _0x5bffed<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'getState'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'rc4Bytes'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        _0xf0e55d<span class="token punctuation">[</span><span class="token string">'prototype'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'getState'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x29a616<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _0x9fc071 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _0x69531f <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'states'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> _0x9fc071 <span class="token operator">&lt;</span> _0x69531f<span class="token punctuation">;</span> _0x9fc071<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'states'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Math<span class="token punctuation">[</span><span class="token string">'round'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Math<span class="token punctuation">[</span><span class="token string">'random'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                _0x69531f <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'states'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">_0x29a616</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'states'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">_0xf0e55d</span><span class="token punctuation">(</span>_0x1141<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">'checkState'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _0x46a8cd <span class="token operator">=</span> _0x1141<span class="token punctuation">[</span><span class="token string">'base64DecodeUnicode'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x46a8cd<span class="token punctuation">)</span><span class="token punctuation">;</span>        _0x1141<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>_0x36b633<span class="token punctuation">]</span> <span class="token operator">=</span> _0x46a8cd<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        _0x46a8cd <span class="token operator">=</span> _0x1141<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>_0x36b633<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> _0x46a8cd<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数定义以后没有直接调用，在 <code>fucking.js</code> 里搜索，很容易发现到处都是它的身影，调用方式都是 <code>_0x1141('0x1')</code> 和 <code>_0x1141('0xce')</code> 之类的，不难判断它确实是用于取 <code>_0x1411</code> 数组内的字符串的，它的第二个参数 <code>_0x568f8c</code> 实际上没有任何用处，而 <code>_0x36b633</code> 实际上是下标。</p><p>一眼扫下来，不难发现这一段似曾相识：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> _0xf0e55d <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x585984<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'rc4Bytes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x585984<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'states'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">0</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'newState'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'newState'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'firstState'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\\w+ *\\(\\) *{\\w+ *'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'secondState'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'[\'|"].+[\'|"];? *}'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>_0xf0e55d<span class="token punctuation">[</span><span class="token string">'prototype'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'checkState'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _0x42ca96 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'firstState'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'secondState'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'runState'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x42ca96<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'newState'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'states'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'states'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">}</span><span class="token punctuation">;</span>_0xf0e55d<span class="token punctuation">[</span><span class="token string">'prototype'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'runState'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x5bffed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">~</span>_0x5bffed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> _0x5bffed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'getState'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'rc4Bytes'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些正则表达式，显然就是前面用于反格式化的单行判断正则。</p><p>不管三七二十一，先把正则匹配的地方改成 <code>return true</code> 试试再说。</p><p>再次打开 <code>index.html</code> 发现代码可以正常运行了。</p><h3 id="处理-0x1141-i"><a href="#处理-0x1141-i" class="headerlink" title="处理_0x1141(i)"></a>处理_0x1141(i)</h3><p>代码中到处都在通过 <code>_0x1141(i)</code> 获取 <code>_0x1411</code> 中的字符串，我们先把这些 <code>_0x1141(i)</code> 换成可以直接阅读的字符串。</p><p>先通过控制台获取顺序调整后的 <code>_0x1411</code> 数组：</p><p><img src="getStr.png" alt="获取_0x1411"></p><p>全部复制出来就好。</p><p>然后用写个程序把这些该死的 <code>_0x1141(i)</code> 全部替换掉：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64Utils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yuan * @version 0.1 * @date 2019/10/18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsFucking</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> STRINGS <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"eXVj"</span>            <span class="token punctuation">,</span> <span class="token string">"ZmEtZGlhbW9uZA=="</span>            <span class="token punctuation">,</span> <span class="token string">"ZmEtcGFwZXItcGxhbmUtbw=="</span>            <span class="token punctuation">,</span> <span class="token string">"ZmEtYW5jaG9y"</span>            <span class="token comment" spellcheck="true">// 中间的省略……</span>            <span class="token punctuation">,</span> <span class="token string">"ZGVidWdnZXI="</span>            <span class="token punctuation">,</span> <span class="token string">"aHRv"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decode</span><span class="token punctuation">(</span>String base64String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64Utils<span class="token punctuation">.</span><span class="token function">decodeFromString</span><span class="token punctuation">(</span>base64String<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> String text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String hex <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        String toBeReplaced <span class="token operator">=</span> <span class="token string">"_0x1141('0x"</span> <span class="token operator">+</span> hex <span class="token operator">+</span> <span class="token string">"')"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>toBeReplaced<span class="token punctuation">,</span> <span class="token string">"'"</span> <span class="token operator">+</span> <span class="token function">decode</span><span class="token punctuation">(</span>STRINGS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读取文件</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"fucking.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder textBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            textBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            textBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转换</span>        String text <span class="token operator">=</span> textBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> STRINGS<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            text <span class="token operator">=</span> <span class="token function">transform</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>替换完成后，代码读起来就方便多了。</p><p>如果不想在程序里写 Base64 解码，也可以像这样直接获取解码后的数组，再在程序里替换：</p><pre class="line-numbers language-js"><code class="language-js">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">249</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">_0x1141</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不难发现，经过一次 Base64 解码之后，有部分字符串仍然是 Base64，代码中多处使用 <code>atob</code> 进行第二次解码。这些地方都值得重点关注，不过，在这之前，还是先把恶心的反调试的搞掉吧！</p><h3 id="反反调试"><a href="#反反调试" class="headerlink" title="反反调试"></a>反反调试</h3><p>前面我们从调用堆栈得知，debugger 是在 <code>0x4c9a5d</code> 处的匿名函数进入的，要解决反调试，显然这里必须得看看。</p><p>通过 CTRL+F 查找 <code>0x4c9a5d</code>，在 <code>fucking.js</code> 的末尾找到了这一段代码（又是在尾部，呵呵）：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> _0x25cf83 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _0x8500bc <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'LIM'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x2cd9f3</span><span class="token punctuation">(</span>_0x306251<span class="token punctuation">,</span> _0xd153ad<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x306251 <span class="token operator">!==</span> _0xd153ad<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'IrU'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x389b73</span><span class="token punctuation">(</span>_0x1d4a8f<span class="token punctuation">,</span> _0x3f5aa7<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x1d4a8f <span class="token operator">+</span> _0x3f5aa7<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'smn'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x451b03</span><span class="token punctuation">(</span>_0x1fbf33<span class="token punctuation">,</span> _0x4a4c9<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x1fbf33 <span class="token operator">/</span> _0x4a4c9<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'Qsc'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x478a5c</span><span class="token punctuation">(</span>_0x58ffc9<span class="token punctuation">,</span> _0xf137dc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x58ffc9 <span class="token operator">===</span> _0xf137dc<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'Toi'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x41fb91</span><span class="token punctuation">(</span>_0x22f563<span class="token punctuation">,</span> _0x5f069e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x22f563 <span class="token operator">%</span> _0x5f069e<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'hto'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x42d5ff</span><span class="token punctuation">(</span>_0x3e7cbe<span class="token punctuation">,</span> _0x16782d<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">_0x3e7cbe</span><span class="token punctuation">(</span>_0x16782d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">_0x4c9a5d</span><span class="token punctuation">(</span>_0x394373<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_0x8500bc<span class="token punctuation">[</span><span class="token string">'LIM'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x8500bc<span class="token punctuation">[</span><span class="token string">'IrU'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> _0x8500bc<span class="token punctuation">[</span><span class="token string">'smn'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x394373<span class="token punctuation">,</span> _0x394373<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> _0x8500bc<span class="token punctuation">[</span><span class="token string">'Qsc'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x8500bc<span class="token punctuation">[</span><span class="token string">'Toi'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x394373<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>                <span class="token punctuation">[</span>                <span class="token string">'constructor'</span>                <span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'debugger'</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>                <span class="token punctuation">[</span>                <span class="token string">'constructor'</span>                <span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'debugger'</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        _0x8500bc<span class="token punctuation">[</span><span class="token string">'hto'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x4c9a5d<span class="token punctuation">,</span> <span class="token operator">++</span>_0x394373<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        _0x8500bc<span class="token punctuation">[</span><span class="token string">'hto'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x4c9a5d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">_0x2463d0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>_0x8500bc</code> 很明显是把加法、除法、判等、取模、函数执行这五个操作封装了而已，其实在整个 <code>fucking.js</code> 文件里有很多处类似的代码。</p><p><code>_0x4c9a5d</code> 中的 <code>if</code> 块简单翻译一下其实就是 <code>if ( (''+(_0x394373/_0x394373)).length !== 1 || _0x394373 % 20 === 0 )</code>，这里的 <code>_0x394373</code> 其实是一个整数。而 <code>_0x8500bc['hto'](_0x4c9a5d, ++_0x394373);</code> 这一句就是在递归调用，造成无穷 debugger。当然，其实也没什么看懂这个函数的必要，直接把函数体全部注释掉就好。</p><p>搞完之后重新打开 <code>index.html</code>，发现在下面这段代码这里也进入了 debugger：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _0x3fe12b <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'bNm'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x539eff</span><span class="token punctuation">(</span>_0x2e6435<span class="token punctuation">,</span> _0x1adba7<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x2e6435 <span class="token operator">></span> _0x1adba7<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'eIB'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x539e7c</span><span class="token punctuation">(</span>_0x23efc6<span class="token punctuation">,</span> _0x449a76<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x23efc6 <span class="token operator">-</span> _0x449a76<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _0x1c1749 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">debugger</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> _0x3fe12b<span class="token punctuation">[</span><span class="token string">'bNm'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3fe12b<span class="token punctuation">[</span><span class="token string">'eIB'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _0x1c1749<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很简单，整段注释掉就行。</p><p>还可以继续在 <code>fucking.js</code> 里面搜索 <code>debugger</code> 和 <code>setInterval</code>，把所有可疑的代码都注释掉，不过这里其实只搞定上面这两处就够了。</p><p>再次打开页面，发现不会再进入 debugger，反反调试成功。</p><h3 id="恢复console（非必要）"><a href="#恢复console（非必要）" class="headerlink" title="恢复console（非必要）"></a>恢复console（非必要）</h3><p>在做 JS 逆向时，console 打日志还是比较常用的，这个 JS 文件把 console 给破坏掉了，让我有点不爽，所以，尽管这一步不是必要的，我还是把 console 恢复了再搞别的。</p><p>直接搜索 <code>console</code>，定位到这段代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> _0x6e15d8 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> _0x3e7522 <span class="token operator">=</span> _0x25aba8<span class="token punctuation">[</span><span class="token string">'UTw'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x335ecd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_0x3e7522<span class="token punctuation">[</span><span class="token string">'console'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _0x3e7522<span class="token punctuation">[</span><span class="token string">'console'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x4203eb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _0x45a5a5 <span class="token operator">=</span> <span class="token string">'3|2|0|8|6|7|1|4|5'</span> <span class="token punctuation">[</span><span class="token string">'split'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            _0x16723b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>_0x45a5a5<span class="token punctuation">[</span>_0x16723b<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'0'</span><span class="token punctuation">:</span>                    _0x15d4e2<span class="token punctuation">[</span><span class="token string">'warn'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x4203eb<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                    _0x15d4e2<span class="token punctuation">[</span><span class="token string">'exception'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x4203eb<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token punctuation">:</span>                    _0x15d4e2<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x4203eb<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token punctuation">:</span>                    <span class="token keyword">var</span> _0x15d4e2 <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'4'</span><span class="token punctuation">:</span>                    _0x15d4e2<span class="token punctuation">[</span><span class="token string">'trace'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x4203eb<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'5'</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> _0x15d4e2<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'6'</span><span class="token punctuation">:</span>                    _0x15d4e2<span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x4203eb<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'7'</span><span class="token punctuation">:</span>                    _0x15d4e2<span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x4203eb<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'8'</span><span class="token punctuation">:</span>                    _0x15d4e2<span class="token punctuation">[</span><span class="token string">'debug'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x4203eb<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span>_0x6e15d8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _0x404414 <span class="token operator">=</span> <span class="token string">'1|5|3|6|4|2|0'</span> <span class="token punctuation">[</span><span class="token string">'split'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        _0x49ae44 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>_0x404414<span class="token punctuation">[</span>_0x49ae44<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'0'</span><span class="token punctuation">:</span>                _0x3e7522<span class="token punctuation">[</span><span class="token string">'console'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'trace'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x6e15d8<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                _0x3e7522<span class="token punctuation">[</span><span class="token string">'console'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x6e15d8<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token punctuation">:</span>                _0x3e7522<span class="token punctuation">[</span><span class="token string">'console'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'exception'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x6e15d8<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token punctuation">:</span>                _0x3e7522<span class="token punctuation">[</span><span class="token string">'console'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'debug'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x6e15d8<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'4'</span><span class="token punctuation">:</span>                _0x3e7522<span class="token punctuation">[</span><span class="token string">'console'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x6e15d8<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'5'</span><span class="token punctuation">:</span>                _0x3e7522<span class="token punctuation">[</span><span class="token string">'console'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'warn'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x6e15d8<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'6'</span><span class="token punctuation">:</span>                _0x3e7522<span class="token punctuation">[</span><span class="token string">'console'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x6e15d8<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实只需要处理 <code>else</code> 块即可。把这些函数重定向语句全部注释掉，搞定。</p><p>这里有两段 <code>while(!![]){break;}</code> 结构，<code>!![]</code> 其实就是 true，在 <code>while(true)</code> 里面写一段代码，最后 break，纯属脱裤子放屁。正常编程当然不会这样写，但在混淆过的 JS 代码中似乎还挺常见的，这样搞可以增加一层嵌套，恶心读代码的人。</p><p><code>while</code> 块里面是 <code>switch(i++) {case}</code> 结构，实际上相当于一个 <code>for-i</code> 循环，而且需要注意下标要从 <code>'1|5|3|6|4|2|0'</code> 这类字符串中取，这种结构在混淆代码中也是比较常见的。</p><h3 id="搞懂abcd四个函数"><a href="#搞懂abcd四个函数" class="headerlink" title="搞懂abcd四个函数"></a>搞懂abcd四个函数</h3><p>现在我们已经解决了反格式化和反调试，接下来可以为所欲为了。</p><p>现在还没搞明白的其实就只有 a、b、c、d 四个函数了。</p><p>扫一眼整个 JS 文件，会发现这样一段孤零零的代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.restart'</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _0x3df382 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'jrm'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x1fa289</span><span class="token punctuation">(</span>_0x4eed9e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">_0x4eed9e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    _0x3df382<span class="token punctuation">[</span><span class="token string">'jrm'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然 c() 就是初始化和重置用的了，但也不排除它还有其它作用。</p><p>至于 b()，先看看它的代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span>_0x5bd23e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _0x41b815 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Wao'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x2f0970</span><span class="token punctuation">(</span>_0x143d10<span class="token punctuation">,</span> _0x480efb<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x143d10 <span class="token operator">!==</span> _0x480efb<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'ZWP'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x348253</span><span class="token punctuation">(</span>_0x1ba02f<span class="token punctuation">,</span> _0x41d55f<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x1ba02f <span class="token operator">*</span> _0x41d55f<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _0x2b5d66 <span class="token operator">=</span> _0x5bd23e<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        _0x5c0992<span class="token punctuation">,</span>        _0x2fdf45<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>_0x41b815<span class="token punctuation">[</span><span class="token string">'Wao'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x2b5d66<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _0x472699 <span class="token operator">=</span> <span class="token string">'0|3|2|1|4'</span> <span class="token punctuation">[</span><span class="token string">'split'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            _0x4f7c22 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>_0x472699<span class="token punctuation">[</span>_0x4f7c22<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'0'</span><span class="token punctuation">:</span>                    _0x2fdf45 <span class="token operator">=</span> Math<span class="token punctuation">[</span><span class="token string">'floor'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x41b815<span class="token punctuation">[</span><span class="token string">'ZWP'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Math<span class="token punctuation">[</span><span class="token string">'random'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _0x2b5d66<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                    _0x5bd23e<span class="token punctuation">[</span>_0x2b5d66<span class="token punctuation">]</span> <span class="token operator">=</span> _0x5bd23e<span class="token punctuation">[</span>_0x2fdf45<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token punctuation">:</span>                    _0x5c0992 <span class="token operator">=</span> _0x5bd23e<span class="token punctuation">[</span>_0x2b5d66<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token punctuation">:</span>                    _0x2b5d66 <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'4'</span><span class="token punctuation">:</span>                    _0x5bd23e<span class="token punctuation">[</span>_0x2fdf45<span class="token punctuation">]</span> <span class="token operator">=</span> _0x5c0992<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> _0x5bd23e<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好像不是很明显，那就先打个断点，运行后发现传入的参数就是 <code>Myarr</code>：</p><p><img src="bDebug.png" alt="获取_0x1411"></p><p>结合代码中的 <code>Math['floor'](_0x41b815['ZWP'](Math['random'](), _0x2b5d66))</code>，不难推测是在洗牌。</p><p>接下来看 d()：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _0x520c63 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'yhR'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x3d82ec</span><span class="token punctuation">(</span>_0x29038b<span class="token punctuation">,</span> _0x48050f<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">_0x29038b</span><span class="token punctuation">(</span>_0x48050f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'QkR'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x47325b</span><span class="token punctuation">(</span>_0x1c9cf7<span class="token punctuation">,</span> _0xe61305<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x1c9cf7 <span class="token operator">+</span> _0xe61305<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'bbi'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x5d9ea5</span><span class="token punctuation">(</span>_0x2f0d78<span class="token punctuation">,</span> _0x1578ff<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x2f0d78 <span class="token operator">+</span> _0x1578ff<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'YGB'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x386c6d</span><span class="token punctuation">(</span>_0x4828fc<span class="token punctuation">,</span> _0x23bee5<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x4828fc <span class="token operator">+</span> _0x23bee5<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'AtG'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x5641db</span><span class="token punctuation">(</span>_0x13bfa5<span class="token punctuation">,</span> _0x2dda21<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x13bfa5 <span class="token operator">+</span> _0x2dda21<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'Wmj'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x570a43</span><span class="token punctuation">(</span>_0x32910c<span class="token punctuation">,</span> _0x2d39de<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x32910c <span class="token operator">+</span> _0x2d39de<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'XWQ'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x992d73</span><span class="token punctuation">(</span>_0x13947a<span class="token punctuation">,</span> _0x3d8e5b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x13947a <span class="token operator">+</span> _0x3d8e5b<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'mgE'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0x3ee468</span><span class="token punctuation">(</span>_0x34fa4d<span class="token punctuation">,</span> _0x1045fc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">_0x34fa4d</span><span class="token punctuation">(</span>_0x1045fc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    h <span class="token operator">=</span> _0x520c63<span class="token punctuation">[</span><span class="token string">'yhR'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>atob<span class="token punctuation">,</span> <span class="token string">'SW50ZWxsaWdlbmNlIGlzIHRoZSBhYmlsaXR5IHRvIGFkYXB0IHRvIGNoYW5nZS4gTGlmZSB3b3VsZCBiZSB0cmFnaWMgaWYgaXQgd2VyZW4ndCBmdW5ueS4='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    z <span class="token operator">=</span> _0x520c63<span class="token punctuation">[</span><span class="token string">'QkR'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x520c63<span class="token punctuation">[</span><span class="token string">'bbi'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x520c63<span class="token punctuation">[</span><span class="token string">'YGB'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x520c63<span class="token punctuation">[</span><span class="token string">'AtG'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token string">'substr'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span><span class="token string">'substr'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span><span class="token string">'substr'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span><span class="token string">'substr'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span><span class="token string">'substr'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q <span class="token operator">=</span> _0x520c63<span class="token punctuation">[</span><span class="token string">'Wmj'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x520c63<span class="token punctuation">[</span><span class="token string">'XWQ'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x520c63<span class="token punctuation">[</span><span class="token string">'XWQ'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token string">'("'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _0x520c63<span class="token punctuation">[</span><span class="token string">'mgE'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>atob<span class="token punctuation">,</span> <span class="token string">'R2FtZSBvdmVyISBDYW4geW91IGZpbmlzaCB0aGUgZ2FtZSBpbiA0IG1vdmVzPw=='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'")'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _0x520c63<span class="token punctuation">[</span><span class="token string">'mgE'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>eval<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>h 这一串 Base64 解码后是 “Intelligence is the ability to adapt to change. Life would be tragic if it weren’t funny.”。刚看到这一句东西我还以为是作者在嘲讽：“你个呆瓜，叫你用 BurpSuite，你还在这看 JS，不懂得变通”。</p><p>然后我再往下看，z 这个字符串是在 h 里面截取字母拼接，然后拼出来个 “alert”……</p><p>q 是 “Game over! Can you finish the game in 4 moves?”。</p><p>看来 d() 这个函数是 4 步以上完成游戏时执行的。</p><p>a 的作用还无法这么简单地搞懂，现在我们可以利用之前得到的一条重要线索：<code>_0x1411</code> 数组中有些字符串解码之后仍是 Base64，必须在代码中再次解码。</p><p>继续找下一个 <code>atob</code>，跑到了 c() 里面（完整代码就不贴了）：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">case</span> <span class="token string">'8'</span><span class="token punctuation">:</span>    <span class="token keyword">var</span> _0x28347b <span class="token operator">=</span> _0x5ac296<span class="token punctuation">[</span><span class="token string">'eMG'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>setInterval<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        gg <span class="token operator">=</span> _0x25aba8<span class="token punctuation">[</span><span class="token string">'LdO'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">,</span> sessionStorage<span class="token punctuation">[</span><span class="token string">'getItem'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'gg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ss <span class="token operator">=</span> _0x25aba8<span class="token punctuation">[</span><span class="token string">'LdO'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">,</span> sessionStorage<span class="token punctuation">[</span><span class="token string">'getItem'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_0x25aba8<span class="token punctuation">[</span><span class="token string">'QXJ'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>gg<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> _0x25aba8<span class="token punctuation">[</span><span class="token string">'QXJ'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">'gg'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> _0x25aba8<span class="token punctuation">[</span><span class="token string">'vMv'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> _0x31842c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _0x31842c<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x25aba8<span class="token punctuation">[</span><span class="token string">'LdO'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>atob<span class="token punctuation">,</span> <span class="token string">'UE9TVA=='</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _0x25aba8<span class="token punctuation">[</span><span class="token string">'LdO'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>atob<span class="token punctuation">,</span> <span class="token string">'aHR0cDovL2cuY24veW91LmNhbi5maW5kL3RoZS9zZWNyZXQvaW4/dGhlPWltYWdlJnQ9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _0x31842c<span class="token punctuation">[</span><span class="token string">'send'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            window<span class="token punctuation">[</span><span class="token string">'clearInterval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x28347b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>'UE9TVA=='</code> 和 <code>'aHR0cDovL2cuY24veW91LmNhbi5maW5kL3RoZS9zZWNyZXQvaW4/dGhlPWltYWdlJnQ9'</code> 解码之后分别是 <code>'POST'</code> 和 <code>'http://g.cn/you.can.find/the/secret/in?the=image&amp;t='</code>。</p><p>也就是说这里会发 POST 请求，而这个 URL 显然是在给提示。图片里面找秘密，显然是隐写了。这和前面得到其它解题线索相吻合（两张大小不同的图片、弹窗让用 BurpSuite），当然我的关注点不在于做 CTF 题，而在于 JS 逆向。</p><p>继续找其它 <code>atob</code>，然后解码看是什么字符串。容易发现，a() 里面有大量的 <code>atob</code> 和 <code>subString</code> 配合的代码，显然又是在搞拼接。比如这里：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">case</span><span class="token string">'1'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// YnVycHN1aXRl解码是burpsuite</span>    d <span class="token operator">=</span> _0x3e0016<span class="token punctuation">[</span><span class="token string">'gII'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'gII'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'Dsj'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>decodeURIComponent<span class="token punctuation">,</span> <span class="token string">'%28%22'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window<span class="token punctuation">[</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'foy'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>atob<span class="token punctuation">,</span> <span class="token string">'YnVycHN1aXRl'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\")'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token string">'2'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// V0lORE9X解码是WINDOW ; YWJjZGU=解码是abcde ； d2hvaXN0aGVsdWNreW1hbg==解码是whoistheluckyman ；配合substr，这里也是在拼alert</span>    c <span class="token operator">=</span> _0x3e0016<span class="token punctuation">[</span><span class="token string">'WDP'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'WDP'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'WDP'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'WkK'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'EiR'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'EiR'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'DIE'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'CmQ'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>atob<span class="token punctuation">,</span> <span class="token string">'V0lORE9X'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'toLowerCase'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _0x3e0016<span class="token punctuation">[</span><span class="token string">'CmQ'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>decodeURIComponent<span class="token punctuation">,</span> _0x3e0016<span class="token punctuation">[</span><span class="token string">'hmC'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'%5b%'</span><span class="token punctuation">,</span> _0x3e0016<span class="token punctuation">[</span><span class="token string">'hmC'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'Zae'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _0x3e0016<span class="token punctuation">[</span><span class="token string">'cTg'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>atob<span class="token punctuation">,</span> <span class="token string">'YWJjZGU='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'substr'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _0x3e0016<span class="token punctuation">[</span><span class="token string">'CLB'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>atob<span class="token punctuation">,</span> <span class="token string">'d2hvaXN0aGVsdWNreW1hbg=='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'substr'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _0x3e0016<span class="token punctuation">[</span><span class="token string">'hmC'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x3e0016<span class="token punctuation">[</span><span class="token string">'DGP'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>console<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 后面的不贴了，是在构造 alert 的剩下三个字母，又长又臭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续往下找，可以找到这么一段：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">case</span> <span class="token string">'1'</span><span class="token punctuation">:</span>    girl <span class="token operator">=</span> <span class="token string">'cokey'</span><span class="token punctuation">,</span>        xcsmo <span class="token operator">=</span> <span class="token string">'__0x3696d'</span><span class="token punctuation">,</span>        __0x3696d <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'Q8O+fEHDp2bClQ3ChA=='</span><span class="token punctuation">,</span>            <span class="token string">'wp/CrxzCgMOCEMOkZcKD'</span><span class="token punctuation">,</span>            <span class="token string">'woR5KDN8wqLCh3vCskbChsKfwpPCusKPw406wq/DjmBSRcOuCH3CscOCKHfDtcKzfMKRFMKsKsKRVMOFEsOmw7XCrR7DkHhDDsK/LsORWcKXwqzDo0PDk8KTNsO5w7nCuR7DtDHCisOlQw=='</span><span class="token punctuation">,</span>            <span class="token string">'5LuH6IOA5Yq66ZulPW5Sw50/Y8KCwrzCoQ=='</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'2'</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>_0x183bf2<span class="token punctuation">,</span> _0x2f3b1c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _0x482104 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_0x5e5475<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>_0x5e5475<span class="token punctuation">)</span> <span class="token punctuation">{</span>                _0x183bf2<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x183bf2<span class="token punctuation">[</span><span class="token string">'shift'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        _0x421411<span class="token punctuation">[</span><span class="token string">'nhq'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x482104<span class="token punctuation">,</span> <span class="token operator">++</span>_0x2f3b1c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span>__0x3696d<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'3'</span><span class="token punctuation">:</span>    girl <span class="token operator">=</span> <span class="token string">'cokey'</span><span class="token punctuation">;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'4'</span><span class="token punctuation">:</span>    <span class="token keyword">var</span> _0x421411 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'nhq'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">_0xbcffa3</span><span class="token punctuation">(</span>_0x45dbff<span class="token punctuation">,</span> _0x30a017<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x1062f9<span class="token punctuation">[</span><span class="token string">'KjR'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x45dbff<span class="token punctuation">,</span> _0x30a017<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'5'</span><span class="token punctuation">:</span>    _0x1062f9<span class="token punctuation">[</span><span class="token string">'KjR'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>atob<span class="token punctuation">,</span> _0x1062f9<span class="token punctuation">[</span><span class="token string">'Tdu'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x13598f<span class="token punctuation">,</span> <span class="token string">'0x2'</span><span class="token punctuation">,</span> <span class="token string">'x^@a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先 <code>case '1'</code> 和 <code>case '2'</code> 里面，出现了 <code>xcsmo</code> 和 <code>__0x3696d</code>，这是一开始我们通过 window 看到过的。</p><p><code>case '5'</code> 这里的 <code>_0x1062f9['KjR']</code> 是用来执行函数的。这整一句应该是有一个字符串返回值的，然而却没有用任何变量去接收，很可疑。</p><p>在 <code>case '5'</code> 这个地方打个断点，然后 4 步完成游戏。</p><p>果然，断在这里了。然后把 <code>_0x1062f9['KjR'](atob, _0x1062f9['Tdu'](_0x13598f, '0x2', 'x^@a'))</code> 拿到控制台去运行：</p><p><img src="gotoGithub.png" alt="去github拿工具"></p><p><code>"please goto: https://github.com/kingthy/imagemask"</code>，呵呵，提示去 github 拿一个 PNG 图片隐写内容读取工具。</p><p>之后再往下找，没有什么有意义的 <code>atob</code> 了。</p><p>a() 整个函数的代码又长又臭，但是可以看到一些 CSS 操作的代码，应该是在做控制翻牌效果之类的事情。</p><p>至此，除了 a() 有些代码懒得看以外，整个 JS 文件的逆向完成了。</p><h2 id="把题做一下"><a href="#把题做一下" class="headerlink" title="把题做一下"></a>把题做一下</h2><p>让我用 BurpSuite，我偏要用 Fiddler。</p><p>打开抓包工具，在 4 步完成游戏时，能抓到 <code>POST http://g.cn/you.can.find/the/secret/in?the=image&amp;t=</code> 的包。</p><p>因为没专门学过隐写，我到 github 上下载了 <code>imagemask</code> 这个工具，然后用它从 9.63KB 的图片里，拿到了隐写的字符串 <code>ppassword: 5025d58c109de120a142d3c27a432989</code>，这估计就是重要线索了。之后的问题应该要在 so 层解决，那才是安卓逆向的真正战场。</p><p>正常做这道题，应该是发现图片有问题，然后手动分析 PNG 隐写。</p><p>不过，还是那句话，咱今天是来练习 JS 逆向的！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笨读JDK8源码(5)-Stream</title>
      <link href="/2019/10/09/jdk_source_read/jsr-stream/"/>
      <url>/2019/10/09/jdk_source_read/jsr-stream/</url>
      
        <content type="html"><![CDATA[<h2 id="源码文档及注释翻译"><a href="#源码文档及注释翻译" class="headerlink" title="源码文档及注释翻译"></a>源码文档及注释翻译</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 一个支持串行和并行聚合操作的元素序列。 * 下面的例子用{@link Stream}和{@link IntStream}演示了聚合操作： * &lt;pre>{@code *     int sum = widgets.stream() *                      .filter(w -> w.getColor() == RED) *                      .mapToInt(w -> w.getWeight()) *                      .sum(); * }&lt;/pre> * &lt;p> * 在这个例子中，{@code widgets}是一个{@code Collection&lt;Widget>}。我们通过 * {@link Collection#stream Collection.stream()}创建了一个{@code Widget}流， * 并过滤成一个只含有红色widget的流，然后转换成一个由这些红色widget的weight * 组成的{@code int}流，接着把流合计产生weight总和。 * * &lt;p>除了对象引用流{@code Stream}，还有专门的原始类型流{@link IntStream}、 * {@link LongStream}和{@link DoubleStream}，这些都被称为流，符合流的特征且 * 遵循流的规范。 * * &lt;p>为了执行计算，&lt;a href="package-summary.html#StreamOps">流操作&lt;/a>将组成 * 一个&lt;em>流管道&lt;/em>。一个流管道由数据源（可以为数组、容器、构造函数、I/O通道等） * 、零个或多个&lt;em>中间操作&lt;/em>（把流转换成另一个流的操作，比如 * {@link Stream#filter(Predicate)}），和一个终止操作（产生一个结果或副作用的 * 操作，比如{@link Stream#count()}或者{@link Stream#forEach(Consumer)}）组成。 * 流是惰性的，对源数据的操作仅在启动终止操作时执行，且仅在需要是消费源数据。 * * &lt;p>容器和流，尽管有一些表面上的相似性，但使用目的不同。容器主要考虑对所包含 * 元素的有效管理和访问，相比之下，流并不提供直接访问和操纵其元素的方法，而是 * 声明性地描述数据源和将在该数据源上聚合执行的计算操作。然而，如果给定的流操 * 作没有提供所需的函数式操作能力，可以用{@link #iterator()}和{@link #spliterator()} * 执行受控遍历。 * * &lt;p>一个像上述widget例子那样的流管道，可以被视作一个对流数据源的&lt;em>查询&lt;/em>。 * 除非数据源是明确被设计于并行修改的（比如{@link ConcurrentHashMap}），查询流 * 数据源的过程中对数据源的修改可能导致非预期或错误结果。 * * &lt;p>多数流操作接收的是描述用户指定行为的参数，比如Lambda表达式{@code w -> w.getWeight()} * 在上述例子中被传递给{@code mapToInt}方法。为了确保行为正确，这些行为参数应 * 满足以下要求： * &lt;ul> * &lt;li>必须是非侵入性的（不改变数据源）&lt;/li> * &lt;li>多数情况下应是无状态性的（结果不依赖于流管道执行期间可能更改的状态）&lt;/li> * &lt;/ul> * * &lt;p>这些行为参数永远都是函数式接口实例，比如{@link Function} * 实例，并且常常以Lambda表达式或者方法引用形式出现。除非另有规定，否则这些 * 参数都必须是非null的。 * * &lt;p>一个只能被操作一次（执行中间或终止操作）。这避免了分支流的出现，即同一数据 * 源同时被多个流管道操作，或对同一个流的多次遍历。如果流被检测到重用，可能会抛 * 出{@link IllegalStateException}异常。然而，由于一些流可能会返回它们的接收器 * 而非一个新的流对象，重用可能不会在所有情况下都被检测到。 * * &lt;p>流拥有{@link #close()}方法且实现了{@link AutoCloseable}接口，但几乎所有流 * 实例在被使用后都不需要关闭。通常，只有以I/O通道（比如{@link Files#lines(Path, Charset)} * 所返回的）作为数据源的流需要被关闭。多数流都基于容器、数组或构造函数，这些流 * 不需要特别的资源管理。（如果一个流需要被关闭，它可以作为try-with代码块的资源） * * &lt;p>流管道要么是串行执行的，要么就是并行执行的。执行模式是流的一个属性。 * 流可以被初始创建为串行或并行的（比如{@link Collection#stream() Collection.stream()} * 创建一个串行流而{@link Collection#parallelStream() Collection.parallelStream()} * 创建一个并行流）。对执行模式的选择可以用{@link #sequential()}或{@link #parallel()} * 方法改变，也可以用{@link #isParallel()}方法查询。 * * @author jdk */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Stream</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseStream</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Stream<span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 返回一个由本流中满足给定谓词的元素组成的流。     *     * &lt;p>这是一个中间操作。     */</span>    Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个用本流中元素作为参数执行给定函数所得结果的流。     *     * @param &lt;R> 结果流的元素类型     *            &lt;p>这是一个中间操作。     */</span>    <span class="token operator">&lt;</span>R<span class="token operator">></span> Stream<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">R</span><span class="token operator">></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个用本流中元素作为参数执行给定函数所得Integer结果的流。     *     * &lt;p>这是一个中间操作。     */</span>    IntStream <span class="token function">mapToInt</span><span class="token punctuation">(</span>ToIntFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个用本流中元素作为参数执行给定函数所得Long结果的流。     *     * &lt;p>这是一个中间操作。     */</span>    LongStream <span class="token function">mapToLong</span><span class="token punctuation">(</span>ToLongFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个用本流中元素作为参数执行给定函数所得Double结果的流。     *     * &lt;p>这是一个中间操作。     */</span>    DoubleStream <span class="token function">mapToDouble</span><span class="token punctuation">(</span>ToDoubleFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个用给定映射函数把本流中每个元素映射为一个流后由这些流     * 中的元素聚合而成的流。每个映射流在其所含元素被置入本流后都会     * 被关闭（如果一个映射流是null，会以空流替代）。     *     * &lt;p>这是一个中间操作。     *     * @param &lt;R> 结果流的元素类型     * @apiNote {@code flatMap()}操作的作用是对流的元素进行一对多转换，     * 然后将结果拉伸为一个新的流。     *     * &lt;p>假设{@code orders}是一个采购订单的流，并且每个采购订单包含一     * 个含有一系列项目的容器，下面的代码将生成一个包含所有采购订单中     * 所有项目的流：     * &lt;pre>{@code     *     orders.flatMap(order -> order.getLineItems().stream())...     * }&lt;/pre>     *     * &lt;p>假设{@code path}是一个文件的路径，下面的代码将生成一个由文件     * 中所有单词组成的流：     * &lt;pre>{@code     *     Stream&lt;String> lines = Files.lines(path, StandardCharsets.UTF_8);     *     Stream&lt;String> words = lines.flatMap(line -> Stream.of(line.split(" +")));     * }&lt;/pre>     */</span>    <span class="token operator">&lt;</span>R<span class="token operator">></span> Stream<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">flatMap</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Stream</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">R</span><span class="token operator">>></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个用给定映射函数把本流中每个元素映射为一个IntStream后由这些流     * 中的元素聚合而成的IntStream。每个映射流在其所含元素被置入本流后都会     * 被关闭（如果一个映射流是null，会以空流替代）。     *     * &lt;p>这是一个中间操作。     */</span>    IntStream <span class="token function">flatMapToInt</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">IntStream</span><span class="token operator">></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个用给定映射函数把本流中每个元素映射为一个LongStream后由这些流     * 中的元素聚合而成的LongStream。每个映射流在其所含元素被置入本流后都会     * 被关闭（如果一个映射流是null，会以空流替代）。     *     * &lt;p>这是一个中间操作。     */</span>    LongStream <span class="token function">flatMapToLong</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">LongStream</span><span class="token operator">></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个用给定映射函数把本流中每个元素映射为一个DoubleStream后由这些流     * 中的元素聚合而成的DoubleStream。每个映射流在其所含元素被置入本流后都会     * 被关闭（如果一个映射流是null，会以空流替代）。     *     * &lt;p>这是一个中间操作。     */</span>    DoubleStream <span class="token function">flatMapToDouble</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DoubleStream</span><span class="token operator">></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个本流去重产生的流。     *     * &lt;p>对于有序流，元素的选择是稳定的（取首次出现）；对于无序流，不作稳定性     * 保障。     *     * &lt;p>这是一个有状态性中间操作。     *     * @apiNote 在并行管道中保持{@code distinct()}的稳定性相对昂贵（要求操作     * 充当完整屏障，且伴随大量缓冲开销），并且稳定性通常是不需要的。使用无序     * 流数据源（例如{@link #generate(Supplier)}）或使用{@link #unordered()}     * 移除有序性约束可能会使得在并行流中{@code distinct()}的执行效率显著提高。     * 如果需要保持与初始顺序一致，并且{@code distinct()}性能或内存利用率较差，     * 转而使用串行执行的{@link #sequential()}可能会提高性能。     */</span>    Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个由本流中元素自然排序而成的流。如果本流中的元素没有实现     * {@code Comparable}接口，将会在执行终止操作时抛出     * {@code java.lang.ClassCastException}异常。     *     *     * &lt;p>对于有序流，排序是稳定的；无序流没有稳定性保障。     *     * &lt;p>这是一个有状态性操作。     */</span>    Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个由本流中元素根据给定{@code Comparator}排序而成的流。     *     * &lt;p>对于有序流，排序是稳定的；无序流没有稳定性保障。     *     * &lt;p>这是一个有状态性操作。     */</span>    Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个由本流中元素组成的流，并在流中的每个元素被消费时对其执行给定方法。     *     * &lt;p>这是一个中间操作。     *     * &lt;p>对于并行流管道，该操作可能在任何时间或任何执行了上游操作的线程中被执行。     * 如果操作中修改了共享状态，则它应负责提供同步。     *     * @apiNote 这个方法主要用于在调试时观察变量的变化，如下所示：     * &lt;pre>{@code     *     Stream.of("one", "two", "three", "four")     *         .filter(e -> e.length() > 3)     *         .peek(e -> System.out.println("Filtered value: " + e))     *         .map(String::toUpperCase)     *         .peek(e -> System.out.println("Mapped value: " + e))     *         .collect(Collectors.toList());     * }&lt;/pre>     */</span>    Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">peek</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个由不超过{@code maxSize}个本流元素组成的流。     *     * &lt;p>这是一个短路性、有状态性的中间操作。     *     * @throws IllegalArgumentException {@code maxSize}为负时抛出     * @apiNote 虽然通常在串行流上执行是很廉价的，在有序并行流管道上却可能需要     * 昂贵的代价，尤其是当{@code maxSize}很大时，因为根据{@code limit(n)}的规     * 约，所返回的若干个元素必须是排在前面的。若情况允许，使用无序流数据源（比     * 如{@link #generate(Supplier)}）或使用{@link #unordered()}移除容器的有序     * 性可以使得{@code limit(n)}的性能显著提升。     * &lt;p>     * 如果必须保持顺序不变，且在并行流管道中{@code limit()}性能较差或内存利用率     * 较低，转而以{@link #sequential()}替代可能会提高性能。     */</span>    Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个由本流丢弃开头{@code n}个元素后剩下元素组成的流。     * 如果本流元素数量少于{@code n}，则返回一个空流。     *     * &lt;p>这是一个有状态性中间操作。     *     * @throws IllegalArgumentException {@code maxSize}为负时抛出     * @apiNote 性能问题，与{@code limit(n)}相同     */</span>    Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对本流中的每个元素执行指定操作。     *     * &lt;p>这是一个终止操作。     *     * &lt;p>该操作的行为是不可预料的。对于并行流管道，该操作将忽略流中元素的     * 原有顺序，因为那将牺牲并行的优势。对于任何给定的元素，可能会在任何     * 时间、任何线程中对其执行给定操作。如果给定操作会改变元素的共享状态，     * 则有责任维护其同步性。     */</span>    <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 确保有序地对本流中的每个元素执行指定操作。     *     * &lt;p>这是一个终止操作。     *     * &lt;p>此操作有序地依次处理各个元素。前置元素必定先于后续元素被操作，     * 但对任意给定的元素，可能会在任何时间、任何线程中对其执行操作。     */</span>    <span class="token keyword">void</span> <span class="token function">forEachOrdered</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个包含本流中元素的数组。     *     * &lt;p>这是一个终止操作。     *     * @throws ArrayStoreException 若数组的运行时类型不是流中元素运行时类型     *                             的父类则抛出     */</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * &lt;p>使用给定的{@code generator}函数创建包含本流中元素的数组并返回，并创建     * 可能被用于分区执行（partitioned execution）或大小调整的函数。     *     * &lt;p>这是一个终止操作。     *     * @param &lt;A> 结果数组的元素类型     * @apiNote 生成器函数接收一个表示预期数组大小的int参数，并生成一个长度为     * 预期大小的数组。这可以用数组的构造引用简洁地表示：     * &lt;pre>{@code     *     Person[] men = people.stream()     *                          .filter(p -> p.getGender() == MALE)     *                          .toArray(Person[]::new);     * }&lt;/pre>     */</span>    <span class="token operator">&lt;</span>A<span class="token operator">></span> A<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>IntFunction<span class="token operator">&lt;</span>A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> generator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用给定的特征值和结合累积函数（associative accumulation function）对流中的     * 每个元素执行归约（reducetion）操作，并返回归约值。这相当于：     * &lt;pre>{@code     *     T result = identity;     *     for (T element : this stream)     *         result = accumulator.apply(result, element)     *     return result;     * }&lt;/pre>     * &lt;p>但不强制顺序执行。     *     * &lt;p>特征值必须是累加函数的一个特征，这意味着对每一个{@code t}，     * {@code accumulator.apply(identity, t)}与{@code t}相同。     * {@code accumulator}函数必须是一个结合函数（associative function）。     *     * &lt;p>这是一个终止操作。     *     * @apiNote 累加、最小值、最大值、平均值和字符串拼接都是归约函数的特定情况。     * 对一个数值流累加可以表达为：     * &lt;pre>{@code     *     Integer sum = integers.reduce(0, (a, b) -> a+b);     * }&lt;/pre>     * &lt;p>     * 或：     * &lt;pre>{@code     *     Integer sum = integers.reduce(0, Integer::sum);     * }&lt;/pre>     *     * &lt;p>与简单地改变总和变量（比如int count）相比，尽管这似乎看起来是一种更迂回     * 的聚合执行方式，这种做法更优雅地减少了并行操作，且无需额外的同步，大大降低     * 了数据竞争的风险。     */</span>    T <span class="token function">reduce</span><span class="token punctuation">(</span>T identity<span class="token punctuation">,</span> BinaryOperator<span class="token operator">&lt;</span>T<span class="token operator">></span> accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对流中每个元素使用给定的结合累积函数执行归约操作，并返回一个针对归约值的     * {@code Optional}对象。这相当于：     * &lt;pre>{@code     *     boolean foundAny = false;     *     T result = null;     *     for (T element : this stream) {     *         if (!foundAny) {     *             foundAny = true;     *             result = element;     *         }     *         else     *             result = accumulator.apply(result, element);     *     }     *     return foundAny ? Optional.of(result) : Optional.empty();     * }&lt;/pre>     * &lt;p>但不强制顺序执行。     *     * &lt;p>{@code accumulator}函数必须是一个结合函数。     *     * &lt;p>这是一个终止操作。     *     * @throws NullPointerException 若规约结果为空则抛出     */</span>    Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">reduce</span><span class="token punctuation">(</span>BinaryOperator<span class="token operator">&lt;</span>T<span class="token operator">></span> accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用给定的特征值、累积函数、合并函数，对流中每个元素执行归约操作，     * 并返回归约结果。这相当于：     * &lt;pre>{@code     *     U result = identity;     *     for (T element : this stream)     *         result = accumulator.apply(result, element)     *     return result;     * }&lt;/pre>     * &lt;p>但不强制顺序执行。     *     * &lt;p>特征值{@code identity}必须是合并函数的一个特征。这意味着，对每个     * {@code u}，{@code combiner(identity, u)}和{@code u}相同。     * 此外，{@code combiner}函数必须与{@code accumulator}函数相匹配，每对     * {@code u}和{@code t}，必须满足以下表达式：     * &lt;pre>{@code     *     combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)     * }&lt;/pre>     *     * &lt;p>这是一个终止操作。     *     * @param &lt;U> 结果的类型     * @apiNote 许多使用此形式的归约可以简单地通过{@code map}和{@code reduce}     * 的显式组合来表示。{@code accumulator}函数充当一个融合的映射器和累积器，     * 这有时比单独的映射和归约更有效，比如在已知先前规约值时，可以避免一些计算。     */</span>    <span class="token operator">&lt;</span>U<span class="token operator">></span> U <span class="token function">reduce</span><span class="token punctuation">(</span>U identity<span class="token punctuation">,</span>                 BiFunction<span class="token operator">&lt;</span>U<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> U<span class="token operator">></span> accumulator<span class="token punctuation">,</span>                 BinaryOperator<span class="token operator">&lt;</span>U<span class="token operator">></span> combiner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对流中元素执行一个可变归约（mutable reduction）操作，并返回一个可变的结     * 果容器，例如{@code ArrayList}，其中的元素通过更新结果状态而非替代来合并。     * 这相当于：     * &lt;pre>{@code     *     R result = supplier.get();     *     for (T element : this stream)     *         accumulator.accept(result, element);     *     return result;     * }&lt;/pre>     *     * &lt;p>和{@link #reduce(Object, BinaryOperator)}一样，{@code collect}操作可     * 在无需额外同步的情况下并行执行。     *     * &lt;p>这是一个终止操作。     *     * @param &lt;R> 结果的类型     * @apiNote JDK中有许多现成的类，其方法签名很适合使用方法引用作为{@code collect()}     * 的参数。例如，下面的代码把字符串累积到一个{@code ArrayList}：     * &lt;pre>{@code     *     List&lt;String> asList = stringStream.collect(ArrayList::new, ArrayList::add,     *                                                ArrayList::addAll);     * }&lt;/pre>     *     * &lt;p>下面的代码会把一个字符串流合并成一个字符串：     * &lt;pre>{@code     *     String concat = stringStream.collect(StringBuilder::new, StringBuilder::append,     *                                          StringBuilder::append)     *                                 .toString();     * }&lt;/pre>     */</span>    <span class="token operator">&lt;</span>R<span class="token operator">></span> R <span class="token function">collect</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>R<span class="token operator">></span> supplier<span class="token punctuation">,</span>                  BiConsumer<span class="token operator">&lt;</span>R<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> accumulator<span class="token punctuation">,</span>                  BiConsumer<span class="token operator">&lt;</span>R<span class="token punctuation">,</span> R<span class="token operator">></span> combiner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用给定的{@code Collector}对流中的元素执行可变归约，并返回归约结果。     * 一个{@code Collector}封装了一个被用作{@link #collect(Supplier, BiConsumer, BiConsumer)}     * 的参数的函数，以实现对收集策略的复用和对收集操作的组合，比如多级分组或分区。     *     * &lt;p>如果流是并行的，并且{@code Collector}是{@link Collector.Characteristics#CONCURRENT concurrent}，     * 同时流无序或{@code Collector}是{@link Collector.Characteristics#UNORDERED unordered}，     * 那么将执行并行归约。（并行归约的细节见{@link Collector}）     *     * &lt;p>这是一个终止操作。     *     * &lt;p>并行执行时，多个中间结果可能会被实例化、填充或合并，以保持可变数据结构     * 的隔离。因此，即使对非线程安全的数据结构（比如{@code ArrayList}）进行并行     * 归约，也不需要额外的同步。     *     * @param &lt;R> 结果的类型     * @param &lt;A> {@code Collector}的中间累积器类型     * @apiNote 下面的代码会把字符串归约成一个ArrayList：     * &lt;pre>{@code     *     List&lt;String> asList = stringStream.collect(Collectors.toList());     * }&lt;/pre>     *     * &lt;p>下面的代码会把{@code Person}对象按城市分离：     * &lt;pre>{@code     *     Map&lt;String, List&lt;Person>> peopleByCity     *         = personStream.collect(Collectors.groupingBy(Person::getCity));     * }&lt;/pre>     *     * &lt;p>下面的代码会把{@code Person}对象按状态和城市分离，得到两个Map的级联：     * &lt;pre>{@code     *     Map&lt;String, Map&lt;String, List&lt;Person>>> peopleByStateAndCity     *         = personStream.collect(Collectors.groupingBy(Person::getState,     *                                                      Collectors.groupingBy(Person::getCity)));     * }&lt;/pre>     * @see #collect(Supplier, BiConsumer, BiConsumer)     * @see Collectors     */</span>    <span class="token operator">&lt;</span>R<span class="token punctuation">,</span> A<span class="token operator">></span> R <span class="token function">collect</span><span class="token punctuation">(</span>Collector<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> A<span class="token punctuation">,</span> R<span class="token operator">></span> collector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据给定的{@code Comparator}，返回一个针对流中元素的最小值的Optional对象。     *     * &lt;p>这是一个终止操作。     *     * @throws NullPointerException 若最小元素为null则抛出     */</span>    Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">min</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据给定的{@code Comparator}，返回一个针对流中元素的最大值的Optional对象。     *     * &lt;p>这是一个终止操作。     *     * @throws NullPointerException 若最大元素为null则抛出     */</span>    Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">max</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回流中所含元素的总数。相当于以下reduce操作：     * &lt;pre>{@code     *     return mapToLong(e -> 1L).sum();     * }&lt;/pre>     *     * &lt;p>这是一个终止操作。     */</span>    <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断流中是否存在满足给定谓词的元素。该操作具有短路性。     * 若流为空则直接返回false，无论谓词是什么。     *     * &lt;p>这是一个短路性终止操作。     *     * @apiNote 该方法评估谓词在流元素上的存在量词（existential quantification）。     */</span>    <span class="token keyword">boolean</span> <span class="token function">anyMatch</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断是否流中所有元素都满足给定元素。该操作具有短路性。     * 若流为空则直接返回true，无论谓词是什么。     *     * &lt;p>这是一个短路性终止操作。     *     * @apiNote 该方法评估谓词在流元素上的全称量词（universal quantification）。     * 若流为空则称量词为虚合（vacuously satisfied）的，其值永真。     */</span>    <span class="token keyword">boolean</span> <span class="token function">allMatch</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断流中是否不存在满足给定量词的元素。该操作具有短路性。     * 若流为空则直接返回true，无论谓词是什么。     *     * &lt;p>这是一个短路性终止操作。     *     * @apiNote 该方法评估谓词在流元素上的全称量词（universal quantification）。     * 若流为空则称量词为虚合（vacuously satisfied）的，其值永真。     */</span>    <span class="token keyword">boolean</span> <span class="token function">noneMatch</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个描述流中第一个元素的{@link Optional}对象，或一个空的{@link Optional}。     * 若流无序，则任意元素都可能被返回。     *     * &lt;p>这是一个短路性终止操作。     *     * @throws NullPointerException 若被选中的元素为null则抛出     */</span>    Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个描述流中某一元素的{@link Optional}对象，若流为空则返回一个空的     * {@link Optional}对象。     *     * &lt;p>这是一个短路性终止操作。     *     * &lt;p>此操作的行为显式不确定；流中的任何元素都有可能被选中。这是为了发挥     * 并行操作的最大性能，代价是对同一个数据源的多次操作可能返回不同结果。     * （如果需要稳定的结果，应改为使用{@link #findFirst()}）     *     * @throws NullPointerException 若被选中的元素为null则抛出     */</span>    Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Static factories</span>    <span class="token comment" spellcheck="true">/**     * 返回一个流建造器     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Builder<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Streams<span class="token punctuation">.</span>StreamBuilderImpl</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个空的串行流     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> StreamSupport<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>Spliterators<span class="token punctuation">.</span><span class="token function">emptySpliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个包含单个元素的串行流     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> StreamSupport<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Streams<span class="token punctuation">.</span>StreamBuilderImpl</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个以特定值为元素的串行有序流。     */</span>    <span class="token annotation punctuation">@SafeVarargs</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"varargs"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Creating a stream from an array is safe</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个以{@code seed}为初始元素、由{@code f}迭代产生后续元素的无限串行     * 有序流，该流将包含{@code seed}、{@code f(seed)}、{@code f(f(seed))}……     *     * &lt;p>首个元素（位置{@code 0}）将是给定的{@code seed}，对于任意{@code n > 0}，     * 在位置{@code n}上的元素将是在位置{@code n - 1}上的参数作为{@code f}的参数     * 执行的结果。     *     * @param &lt;T> 流中元素的类型     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token keyword">final</span> T seed<span class="token punctuation">,</span> <span class="token keyword">final</span> UnaryOperator<span class="token operator">&lt;</span>T<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Iterator<span class="token operator">&lt;</span>T<span class="token operator">></span> iterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            T t <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> Streams<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> T <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> Streams<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token operator">?</span> seed <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> StreamSupport<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>Spliterators<span class="token punctuation">.</span><span class="token function">spliteratorUnknownSize</span><span class="token punctuation">(</span>                iterator<span class="token punctuation">,</span>                Spliterator<span class="token punctuation">.</span>ORDERED <span class="token operator">|</span> Spliterator<span class="token punctuation">.</span>IMMUTABLE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个所有元素都由给定{@code Supplier}提供的无限串行无序流。该方法     * 适合用于产生常量流和随机元素流。     *     * @param &lt;T> 流中元素的类型     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">generate</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>T<span class="token operator">></span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> StreamSupport<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">StreamSpliterators<span class="token punctuation">.</span>InfiniteSupplyingSpliterator<span class="token punctuation">.</span>OfRef</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建一个懒（lazily）连接的流，其元素是第一个流中的所有元素后接第二个     * 流中的所有元素。若两个流都有序则结果流有序，若两个流中一个流是并行流     * 则结果流是并行流。当结果流关闭时，将调用两个输入流的关闭处理程序。     *     * @param &lt;T> 流中元素的类型     * @implNote 用重复连接构建流时要小心。访问深度连接的流中的元素可能会     * 导致深度调用链，甚至是{@code StackOverflowException}。     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">concat</span><span class="token punctuation">(</span>Stream<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> a<span class="token punctuation">,</span> Stream<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        Spliterator<span class="token operator">&lt;</span>T<span class="token operator">></span> split <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Streams<span class="token punctuation">.</span>ConcatSpliterator<span class="token punctuation">.</span>OfRef</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>Spliterator<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Spliterator<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> b<span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> stream <span class="token operator">=</span> StreamSupport<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>split<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">isParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> b<span class="token punctuation">.</span><span class="token function">isParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stream<span class="token punctuation">.</span><span class="token function">onClose</span><span class="token punctuation">(</span>Streams<span class="token punctuation">.</span><span class="token function">composedClose</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * {@code Stream}的可变建造器。这允许通过生成单个元素并添加到{@code Builder}     * 中来生成{@code Stream}，从而避免用{@code ArrayList}作为临时缓冲区而产生的     * 对象复制开销。     *     * &lt;p>流建造器具有生命周期。从构建（building）阶段开始，该阶段可以添加元素；     * 之后过渡到既建（built）阶段，不可再添加元素。当{@link #build()}被调用时     * 既建阶段开始，这一阶段将按构建阶段添加的元素的顺序创建一个有序流。     *     * @param &lt;T> 流中元素的类型     */</span>    <span class="token keyword">interface</span> <span class="token class-name">Builder</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 向构建中的流添加一个元素。         *         * @throws IllegalStateException 若建造器已处于既建阶段则抛出         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 向构建中的流添加一个元素。         *         * @throws IllegalStateException 若建造器已处于既建阶段则抛出         */</span>        <span class="token keyword">default</span> Builder<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 构建流，将当前建造器转换到既建阶段。         *         * @throws IllegalStateException 若建造器已处于既建阶段则抛出         */</span>        Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>Stream 接口继承自 BaseStream 接口，用于对元素序列进行串行或并行的聚合操作。</p><p>需要注意 Stream 与 Collection 的不同。Collection 注重的是对元素的存储和管理，而 Stream 则聚焦于对元素的计算与操作。</p><p>流的创建需要一个提供元素的数据源，我们可以使用 Steam 接口的静态方法或 Collection 接口的 <code>stream()</code> 方法等方式来创建流。在创建流之后，我们可以对流进行若干个中间操作和一个终止操作。从创建流到执行终止操作的这一系列行为被称为<strong>流管道</strong>。</p><p>对流的所有操作都会将流消费掉，一个流只能被消费一次。对流的中间操作会返回一个新的流，供下一次中间操作或终止操作使用。</p><p>流管道是惰性的，对流的所有操作在执行终止操作时才会一并执行。</p><p>在下面这个例子中，由于没有执行终止操作，所有中间操作都不会得到执行：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onlyIntermediateOperationsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stringStream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringStream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test : "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"1"</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行这一测试，将不会在控制台中看到任何打印信息，说明中间操作 <code>map</code> 没有被执行。在编码时，如果没有对流管道执行终止操作，IDEA 会警告我们中间操作的结果被忽略。</p><p>增加终止操作：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">terminalOperationsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stringStream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringStream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test : "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"1"</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>test : 111test : 212test : 313test : 414test : 515test : 616</code></pre><p>从运行结果我们还可以看出，流管道在执行操作时，并不是针对每一个中间操作都对所有元素进行一次遍历，而是在启动终止操作时，将所有元素遍历一次，并对每个元素依次执行流管道上的所有操作。</p><p>一个<strong>流管道</strong>要么是串行的，要么是并行的。</p><p>串行或并行可以在初始化时指定，下面的代码使用 Collection 接口的 <code>parallelStream</code> 方法创建一个<strong>流</strong>，并进行操作，整个<strong>流管道</strong>将是并行的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">creatParallelStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    integers<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>54371602</code></pre><p>流的串行或并行，可以在创建后通过中间操作来指定。在中间操作的任意位置进行指定，都会使得整个流管道串行或并行执行。例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">switchToParallelTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stringStream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringStream<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码，从数据源创建流管道时，流管道是并行的。代码中先执行了中间操作 <code>peek(System.out::println)</code>，之后使用 <code>parallel()</code> 将流管道切换成并行模式。对流不了解的开发者可能会误以为中间操作 <code>peek</code> 是串行执行的，而 <code>map</code> 和 <code>forEach</code> 是并行执行的；实则不然，由于整个流管道是并行工作的，所以这三个操作都将是并行的。</p><p>运行结果：</p><pre><code>dDfFebBcECaA</code></pre><p>从上面运行结果中我们还可以发现，打印了 <code>e</code> 之后又打印了 <code>b</code>、<code>B</code>、<code>c</code> 才打印 <code>E</code>，说明流管道对每个元素的一系列操作并不具有原子性。Stream 接口的文档强调对流管道的所有操作应该是无状态的，也就不难理解了。</p><p>如果我们在中间操作中多次指定串并行模式，将以最后一次为准，例如下面的代码会执行串行操作：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">switchBackToSequentialTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stringStream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringStream<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sequential</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>aAbBcCdDeEfF</code></pre><p>在编码时，如果我们多次指定了串并行模式，IDEA 会提示我们前面的若干次指定是冗余的。</p><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>Stream 的静态方法用到了几个工具类，将来把工具类源码读过了，再回头细读。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笨读JDK8源码(4)-Optional</title>
      <link href="/2019/09/22/jdk_source_read/jsr-optional/"/>
      <url>/2019/09/22/jdk_source_read/jsr-optional/</url>
      
        <content type="html"><![CDATA[<h2 id="源码翻译"><a href="#源码翻译" class="headerlink" title="源码翻译"></a>源码翻译</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>NoSuchElementException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Consumer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Predicate<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Supplier<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 一个可能包含也可能不包含一个非空值的容器对象。 * 如果存在值，{@code isPresent()}将返回{@code true}，{@code get()}将返回该值。 * * * &lt;p>提供了根据值是否存在执行不同操作的附加方法，比如{@link #orElse(Object) orElse()} * （值不存在时返回默认值）和{@link #ifPresent(java.util.function.Consumer) ifPresent()} * （值存在时执行代码块）。 * * &lt;p>这是一个&lt;a href="../lang/doc-files/ValueBased.html">基于值&lt;/a>的类；对 * {@code Optional}实例使用同一性敏感（identity-sensitive）的操作（包括引用相 * 等性比较{@code ==}、散列码比较和同步）可能会引发非预期效果，应当避免。 * * @author jdk * @since 1.8 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Optional</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * {@code empty()}常量实例     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Optional<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> EMPTY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Optional</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 若非null则为包含的值，为null则表示不包含值     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> T value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构造一个空（empty）实例。     *     * @implNote 通常虚拟机中只存在一个空实例{@link Optional#EMPTY}     */</span>    <span class="token keyword">private</span> <span class="token function">Optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个空的{@code Optional}实例，该实例中不含值。     *     * @param &lt;T> 值的类型     * @return 一个空的{@code Optional}实例     * @apiNote 若要判断一个{@code Optional}实例是否为空，避免使用{@code ==}与     * {@code Option.empty()}所返回的实例作比较，因为空{@code Optional}不一定是     * 单例的，应使用{@link #isPresent()}进行判空。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 强转</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> t <span class="token operator">=</span> <span class="token punctuation">(</span>Optional<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> EMPTY<span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 用给定值构造一个实例。     *     * @param value 将被包含的非null值     * @throws NullPointerException 若传入的value为null则抛出     */</span>    <span class="token keyword">private</span> <span class="token function">Optional</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个包含给定非null值的{@code Optional}实例。     *     * @param &lt;T>   值的类型     * @param value 将被包含的非null值     * @return 包含给定非null值的{@code Optional}实例     * @throws NullPointerException 若传入的value为null则抛出     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Optional</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若给定的值不为null则返回一个包含给定值的{@code Optional}实例，否则     * 返回一个空的{@code Optional}实例。     *     * @param &lt;T>   值的类型     * @param value 可能为null的值     * @return 包含给定非null值的{@code Optional}实例或空的{@code Optional}实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">ofNullable</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">of</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若包含非null值则返回该值，否则抛出{@code NoSuchElementException}异常。     *     * @return 对象所持有的非null值     * @throws NoSuchElementException 若不存在值则抛出     * @see Optional#isPresent()     */</span>    <span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token string">"No value present"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若存在值则返回{@code true}，否则返回{@code false}。     *     * @return 若存在值则返回{@code true}，否则返回{@code false}     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若值存在则对其执行指定操作。     *     * @param consumer 待执行操作     * @throws NullPointerException 若值存在但传入的{@code consumer}为null则抛出     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ifPresent</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若值存在且满足给定谓词则返回一个包含该值的{@code Optional}实例，否则返回     * 一个空的{@code Optional}实例。     *     * @param predicate 待判断谓词     * @return 若值存在且满足给定谓词则返回包含该值的{@code Optional}实例，否则返回空的{@code Optional}实例     * @throws NullPointerException 若给定谓词为null则抛出     */</span>    <span class="token keyword">public</span> Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若值存在，对其执行给定的映射函数，若返回结果不为null，返回包含该结果的     * {@code Optional}实例。其它情况下返回空的{@code Optional}实例。     *     * @param &lt;U>    映射函数结果类型     * @param mapper 将对可能存在的值执行的映射函数     * @return 若值存在，对其执行给定的映射函数，若返回结果不为null，返回包含     * 该结果的{@code Optional}实例。其它情况下返回空的{@code Optional}实例     * @throws NullPointerException 若映射函数为null则抛出     * @apiNote 该方法支持对值进行后处理（post-processing），而无需显式地检查     * 返回状态。例如，下面的代码遍历一个文件名流，选择一个尚未处理的文件，将     * 其打开并返回一个{@code Optional&lt;FileInputStream>}：     *     * &lt;pre>{@code     *     Optional&lt;FileInputStream> fis =     *         names.stream().filter(name -> !isProcessedYet(name))     *                       .findFirst()     *                       .map(name -> new FileInputStream(name));     * }&lt;/pre>     * &lt;p>在这段代码中，{@code findFirst}返回一个{@code Optional&lt;String>}实例，     * 接着{@code map}为可能存在的预期文件返回一个{@code Optional&lt;FileInputStream>}。     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> Optional<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若值存在，对其执行给定的映射到{@code Optional}的函数（即该函数返回     * 结果为Optional），返回该结果，否则返回空的{@code Optional}实例。     * 该方法与{@link #map(Function)}相似，但给定的映射器本身就已返回一个     * {@code Optional}实例，在函数执行后不会多包装一层{@code Optional}。     *     * @param &lt;U>    映射结果Optional所包含的值类型     * @param mapper 将对可能存在的值执行的映射函数     * @return t若值存在，对其执行给定的映射到{@code Optional}的函数，返回     * 该结果，否则返回空的{@code Optional}实例     * @throws NullPointerException 若给定的映射函数为null或其执行结果为null则抛出     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> Optional<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">flatMap</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> Optional<span class="token operator">&lt;</span>U<span class="token operator">>></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若值存在则返回它，否则返回指定的另一个值{@code other}。     *     * @param other 在Optional不包含值时要返回的值     * @return 若值存在则返回它，否则返回指定的另一个值{@code other}     */</span>    <span class="token keyword">public</span> T <span class="token function">orElse</span><span class="token punctuation">(</span>T other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">!=</span> null <span class="token operator">?</span> value <span class="token operator">:</span> other<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若值存在则返回它，否则执行{@code other}并返回其结果。     *     * @param other 在Optional不包含值时将被执行的{@code Supplier}     * @return 若值存在则返回它，否则执行{@code other}并返回其结果     * @throws NullPointerException 若Optional不包含值且给定Supplier为null时抛出     */</span>    <span class="token keyword">public</span> T <span class="token function">orElseGet</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">!=</span> null <span class="token operator">?</span> value <span class="token operator">:</span> other<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若值存在则返回它，否则抛出由给定supplier创建的异常。     *     * @param &lt;X>               待抛出异常类型     * @param exceptionSupplier 用于创建异常的supplier     * @return 包含的值     * @throws X                    若不包含值则抛出     * @throws NullPointerException 若不包含值且{@code exceptionSupplier}为null则抛出     * @apiNote 可以用参数列表为空的方法引用作为参数，例如{@code IllegalStateException::new}     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>X <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token operator">></span> T <span class="token function">orElseThrow</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">X</span><span class="token operator">></span> exceptionSupplier<span class="token punctuation">)</span> <span class="token keyword">throws</span> X <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> exceptionSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断其它对象是否等于当前Optional对象。     * 当满足下列条件时视作相等：     * &lt;ul>     * &lt;li>指定对象也是一个{@code Optional}     * &lt;li>指定对象和当前对象都为空（empty）或两者所包含的值被{@code equals()}判定为相等     * &lt;/ul>     *     * @param obj 待测试对象     * @return 若待测试对象与当前对象相等则返回{code true}，否则返回{code false}     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断是否为同一个引用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断待测试对象的类型是否为Optional</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Optional</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 强转后用所包含值的equals方法进行比较</span>        Optional<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> other <span class="token operator">=</span> <span class="token punctuation">(</span>Optional<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> other<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 若存在值则返回其散列码，否则返回0。     *     * @return 若存在值则返回其散列码，否则返回0     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个代表当前Optional对象的非空（non-empty）字符串，用于调试。     * 确切的表现格式未作规定，可能因实现和版本而异。     *     * @return 代表当前实例的字符串     * @implSpec 若值存在，则结果必须包含其字符串形式。空的和包含值的     * Optional必须明确可辨。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">!=</span> null                <span class="token operator">?</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Optional[%s]"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>                <span class="token operator">:</span> <span class="token string">"Optional.empty"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Optional 类是 JDK8 中用于优雅地处理 null 问题的类，要用好这个类需要使用函数式编程的写法。</p><p>Optional 没有实现 Serializable 接口，一般只用作方法返回值，而不会将它作为字段和方法参数。</p><p>我们可以把 Optional 看作一个容器，它有一个字段 <code>private final T value</code>，如果 value 不为 null，则它就是 Optional 所持有的值，否则表示这个 Optional 实例不包含值。（下文中“包含值”、“存在值”、“持有值”等表述均表示<code>value</code>字段不为 null）</p><p>Optional 的构造方法都是私有的，创建 Optional 实例需要使用工厂方法 <code>empty()</code>、<code>of(T value)</code>、<code>ofNullable(T value)</code>。其中 <code>empty()</code> 方法会返回常量 <code>EMPTY</code>，但文档指出，返回的空 Optional 实例不一定是单例的，不应该借助 <code>== Optional.empty()</code> 判断一个 Optional 对象是否含有值。<code>of(T value)</code> 方法要求传入的 value 不能为 null，而 <code>ofNullable(T value)</code> 无此限制。</p><p><code>isPresent()</code> 方法用于判断 Optional 中是否包含值。在值存在时，可以用 <code>get()</code> 方法来获取这个值，值不存在时这个方法会抛出 <code>NoSuchElementException</code> 异常。</p><p>但是，直接使用 <code>isPresent()</code> 和 <code>get()</code> 这两个方法，与直接使用 <code>if(null != ...)</code> 并没有多大的不同：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                    <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                    <span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Student <span class="token function">createBlankNameStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 直接使用isPresent()还是需要繁琐冗长的if语句</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>像上面这样写，IDEA 会提示可以用函数式风格替代：<br><img src="optional_no_functional.png" alt="可用函数式风格替代"></p><p>替代后代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 函数式风格</span>    optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ifPresent(Consumer&lt;? super T&gt; consumer)</code> 方法允许我们以函数式编程的方式传入 Optional 含有值时对这个值的操作，是最常用的方法之一。</p><h3 id="orElse、orElseGet、orElseThrow"><a href="#orElse、orElseGet、orElseThrow" class="headerlink" title="orElse、orElseGet、orElseThrow"></a>orElse、orElseGet、orElseThrow</h3><p><code>orElse(T other)</code> 方法在 Optional 包含值时会返回所持有的值，在不包含值时会返回传入的 other。</p><p>比如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student student <span class="token operator">=</span> null<span class="token punctuation">;</span>    Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"是null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为：</p><pre><code>Student{name='是null'}</code></pre><p><code>orElseGet(Supplier&lt;? extends T&gt; other)</code> 方法则需要传入 Supplier，在值存在时返回 Optional 所持有的值，在值不存在时则用传入的 Supplier <strong>创建新对象</strong>并返回。与 <code>orElse</code> 方法相比，这个方法能更好地支持函数式编程，并且 <code>orElse</code> 方法需要提前创建 <code>other</code> 对象，而这个方法是在 Optional 未存储有值时才创建新对象。</p><p>使用示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student student <span class="token operator">=</span> null<span class="token punctuation">;</span>    Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用Lambda表达式</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"使用orElseGet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用方法引用，直接传入工厂方法，也可以传入构造方法引用</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>createBlankNameStudent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>Student{name='使用orElseGet'}Student{name=''}</code></pre><p><code>orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code> 方法则是在 Optional 持有值时返回该值，在未持有值时使用传入的 Supplier 抛出异常。和 <code>orElseGet</code> 一样的是，只有当值不存在时异常对象才会被创建。</p><h3 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h3><p>在 Java8 之前，如果需要从多层对象嵌套中取出一个值，我们需要对每一层取值进行判空操作。比如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"阿普鲁派"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> student <span class="token operator">&amp;&amp;</span> null <span class="token operator">!=</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Optional 的 <code>map(Function&lt;? super T, ? extends U&gt; mapper)</code> 方法可以帮我们摆脱繁琐的 <code>if(null != ...)</code> 风暴：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"阿普鲁派"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    optional<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这段代码中，我们使用 <code>optional.map(...).map(...).ifPresent(...)</code> 替代了大段的嵌套 if 或是复杂的逻辑判断，不仅代码简洁得多，对熟悉 Java8 的开发人员来说可读性也高得多。</p><p>如果不使用 Optional，中间某一层返回 null 时就会导致 NPE。而在连续的 <code>map(...)</code> 链条中，任何一环的 Optional 对象不持有值，都会使得这一环的 map 返回 <code>Optional.EMPTY</code>，然后级联地使得最后一次的 map 也将获得 <code>Optional.EMPTY</code>，于是，<code>ifPresent(...)</code> 操作中的 Consumer 将不会被执行。<code>Optional.EMPTY</code> 是一个非 null 的对象，我们对它的操作不会引发 NPE。</p><p>Optional 类中还有 <code>filter</code> 和 <code>flatMap</code> 两个未介绍的方法，只要熟悉 Java 的函数式编程，掌握这两个方法也是很容易的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用好 Optional 的 <code>map</code> 方法和 <code>ifPresent</code> 方法，我们就可以摆脱大段用于空指针判断的 if 语句，而 <code>orElseGet</code> 等方法则给我们带来了更多的便利，让我们代码更加简洁和优雅。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次投票爬虫开发</title>
      <link href="/2019/09/19/2019/aaa-voter/"/>
      <url>/2019/09/19/2019/aaa-voter/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从 2010 年<code>69圣战</code>第一次接触饭圈文化起（彼时还是个犯中二病的小学生），我时常感叹粉丝对偶像的热爱实在是强烈得不可思议、疯狂到不可理喻。上初中后因为某些复杂的原因，我开始加入某些追星群体（偶有真心多为假意），有了更近距离观察他们的机会，也涨了些见识，多年来感触颇多。扯远了，以后该找时间写一写。</p><p>这几天打榜组群里又在喊人投票。有老哥用脚本注册了大量账号，并表示即将攻克自动投票难关，需要大家人工投几天。尽管我对这种事情稍微有些反感，但还是愿意趁着吃外卖的时间动手帮帮忙的。在我越过某堵담，打开投票页面后，不知为何我的左手在未经大脑指挥的情况下擅自给 F12 键施加了 5N 左右的压力——或许手贱打开开发者工具也是一种职业病吧。然后，我看着自动进入了无尽 debugger 的调试器（又是该死的反调试），脑中突然闪过一道灵光：自动投票我也会做啊！</p><p>想到就开干，今天咱<code>无主之地3</code>也不玩了，<code>昆特牌</code>也不打了，就来写写爬虫。</p><h2 id="页面逻辑分析"><a href="#页面逻辑分析" class="headerlink" title="页面逻辑分析"></a>页面逻辑分析</h2><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>既然投票页面做了反调试，那就先分析报文吧。</p><p>打开 Fiddler，然后访问<a href="https://vote.aaavietnam2019.com.vn/" target="_blank" rel="noopener">投票页面</a>，按正常流程登录、投票、注销。</p><p><img src="Fiddler1.png" alt="抓包结果"></p><p>除去获取静态资源的请求后，剩下的和登录、投票相关的报文只有几个，注销没有专门发送请求。</p><p><img src="Fiddler2.png" alt="可能有用的请求"></p><h3 id="关键报文分析"><a href="#关键报文分析" class="headerlink" title="关键报文分析"></a>关键报文分析</h3><p>筛选出最有用的报文之后，先看第一组报文。</p><p>请求（这里 email 打个码）：</p><pre><code>POST https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyAlFqKJC-D1xFUsZ6PE9tzsRcjNftrxXmY HTTP/1.1Host: www.googleapis.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0Accept: */*Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflate, brContent-Type: application/jsonX-Client-Version: Firefox/JsCore/6.5.0/FirebaseCore-webContent-Length: 81Origin: https://vote.aaavietnam2019.com.vnConnection: keep-aliveReferer: https://vote.aaavietnam2019.com.vn/{"email":"xxxxx@ooooo.com","password":"12345678","returnSecureToken":true}</code></pre><p>响应载荷（idToken 打个码）：</p><pre><code>  "kind": "identitytoolkit#VerifyPasswordResponse",  "localId": "q4m1qM1PHWOQAUd0l9qwmDEQdg62",  "email": "xxxxx@ooooo.com",  "displayName": "xxxxx",  "idToken": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImVlMjc0MWQ0MWY5ZDQzZmFiMWU2MjhhODVlZmI0MmE4OGVmMzIyOWYiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiZ2dnZnJpZW5kNDYyMCIsImlzcyI6Imh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS91dG9wLWFhYTIwMTkiLCJhdWQiOiJ1dG9wLWFhYTIwMTkiLCJhdXRoX3RpbWUiOjE1Njg5Njc2MjIsInVzZXJfaWQiOiJxNG0xcU0xUEhXT1FBVWQwbDlxd21ERVFkZzYyIiwic3ViIjoicTRtMXFNMVBIV09RQVVkMGw5cXdtREVRZGc2MiIsImlhdCI6MTU2ODk2NzYyMiwiZXhwIjoxNTY4OTcxMjIyLCJlbWFpbCI6ImdnZ2ZyaWVuZDQ2MjBAYmNjdG8ubWUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZmlyZWJhc2UiOnsiaWRlbnRpdGllcyI6eyJlbWFpbCI6WyJnZ2dmcmllbmQ0NjIwQGJjY3RvLm1lIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.JJ_t7QMGp4aptqy3DcvpJYoibcoSZHMTiPUAOi25q1w9GwowJeWRiNALluLP0O2XZ9-NHLBznQci4dJ1_rNGE6iGSxxhyCWHsqJQFd6N5-iuZk5_mdQaa98vebsGFNJm3iFFc0YMXP1zISvVMKR5nLHFNkSNROTuq9hgAct66oG1GNNWBqsjotiEVWM8X4i6aOd49ZRKdFergBg4TqQEOD-********************************************-**************************************************************-w358qYb4YC8BQQJQRLw",  "registered": true,  "refreshToken": "AEu4IL1rLBlb2Kt82gnR0mVXzsSZW7mCCQAHQnCoq0aqOwp-OYUObxw0x4MhXfkGcQWmLJFd8oL8zQLHaV929ZmqWaQj4GFPA_KpeDjhU_mZ8m55jcxzH1kUg2VTwPGXaZFDNHQ1Xm9-vJ9WzjM1-8-XhY9JcVR65eFVwmtqWiTpT_ANf-FyvXWjL_T8oCLVMbKJsr5yxWqeeDAI1jVapd9C58ZfFO53zg6UsYosdh0BJgdJFLppSzo",  "expiresIn": "3600"}</code></pre><p>这个请求是把登录邮箱和密码发到了 Google 的一个 API，获取对应的 idToken。请求的 URL 中带上的 key 暂时还看不出来是什么，不过既然使用了第三方 API，这个 key 应该是应用的身份标识，也就是说应该是死的。</p><p>换个帐号再登录，重新抓包，结果一样。证明 key 是写死的。</p><p>直接在所有抓到的包中搜索这个 key，可以发现是直接写在 config.js 中的。</p><p><img src="Fiddler3.png" alt="这个 key 是写死的"></p><p>再看第二个请求：</p><pre><code>POST https://www.googleapis.com/identitytoolkit/v3/relyingparty/getAccountInfo?key=AIzaSyAlFqKJC-D1xFUsZ6PE9tzsRcjNftrxXmY HTTP/1.1Host: www.googleapis.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0Accept: */*Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflate, brContent-Type: application/jsonX-Client-Version: Firefox/JsCore/6.5.0/FirebaseCore-webContent-Length: 967Origin: https://vote.aaavietnam2019.com.vnConnection: keep-aliveReferer: https://vote.aaavietnam2019.com.vn/{"idToken":"eyJhbGciOiJSUzI1NiIsImtpZCI6ImVlMjc0MWQ0MWY5ZDQzZmFiMWU2MjhhODVlZmI0MmE4OGVmMzIyOWYiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiZ2dnZnJpZW5kNDYyMCIsImlzcyI6Imh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS91dG9wLWFhYTIwMTkiLCJhdWQiOiJ1dG9wLWFhYTIwMTkiLCJhdXRoX3RpbWUiOjE1Njg5Njc2MjIsInVzZXJfaWQiOiJxNG0xcU0xUEhXT1FBVWQwbDlxd21ERVFkZzYyIiwic3ViIjoicTRtMXFNMVBIV09RQVVkMGw5cXdtREVRZGc2MiIsImlhdCI6MTU2ODk2NzYyMiwiZXhwIjoxNTY4OTcxMjIyLCJlbWFpbCI6ImdnZ2ZyaWVuZDQ2MjBAYmNjdG8ubWUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZmlyZWJhc2UiOnsiaWRlbnRpdGllcyI6eyJlbWFpbCI6WyJnZ2dmcmllbmQ0NjIwQGJjY3RvLm1lIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.JJ_t7QMGp4aptqy3DcvpJYoibcoSZHMTiPUAOi25q1w9GwowJeWRiNALluLP0O2XZ9-NHLBznQci4dJ1_rNGE6iGSxxhyCWHsqJQFd6N5-iuZk5_mdQaa98vebsGFNJm3iFFc0YMXP1zISvVMKR5nLHFNkSNROTuq9hgAct66oG1GNNWBqsjotiEVWM8X4i6aOd49ZRKdFergBg4TqQEOD-********************************************-**************************************************************-w358qYb4YC8BQQJQRLw"}</code></pre><p>响应载荷：</p><pre><code>{  "kind": "identitytoolkit#GetAccountInfoResponse",  "users": [    {      "localId": "q4m1qM1PHWOQAUd0l9qwmDEQdg62",      "email": "xxxxx@ooooo.com",      "displayName": "xxxxx",      "passwordHash": "UkVEQUNURUQ=",      "emailVerified": true,      "passwordUpdatedAt": 1568765118192,      "providerUserInfo": [        {          "providerId": "password",          "displayName": "xxxxx",          "federatedId": "xxxxx@ooooo.com",          "email": "xxxxx@ooooo.com",          "rawId": "xxxxx@ooooo.com"        }      ],      "validSince": "1568765118",      "lastLoginAt": "1568967622691",      "createdAt": "1568765118192",      "lastRefreshAt": "2019-09-20T08:20:22.691Z"    }  ]}</code></pre><p>这个请求是获取用户信息的，应该是用于在页面上显示信息，对投票爬虫没有用处。</p><p>第三个请求是 OPTIONS 请求，爬虫不用发。</p><p>第四个请求：</p><pre><code>POST https://vote-api.aaavietnam2019.com.vn/User/GenSession HTTP/1.1Host: vote-api.aaavietnam2019.com.vnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0Accept: */*Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflate, brReferer: https://vote.aaavietnam2019.com.vn/Content-Type: application/jsonProGuard: proguard 8C9458547FB8B7B73B4A57F2A70DD858B7185D7E8EB7227AF8F1A9BA3CFE0843pro1568967624pro3dd82d27c8f34b0493c9122a4c6db50cproed010e3b0bb65efbe1db34e98c97192cdbfa1d7d4c078191789854c63d5c2860Origin: https://vote.aaavietnam2019.com.vnContent-Length: 965Connection: keep-alive{"Token":"eyJhbGciOiJSUzI1NiIsImtpZCI6ImVlMjc0MWQ0MWY5ZDQzZmFiMWU2MjhhODVlZmI0MmE4OGVmMzIyOWYiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiZ2dnZnJpZW5kNDYyMCIsImlzcyI6Imh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS91dG9wLWFhYTIwMTkiLCJhdWQiOiJ1dG9wLWFhYTIwMTkiLCJhdXRoX3RpbWUiOjE1Njg5Njc2MjIsInVzZXJfaWQiOiJxNG0xcU0xUEhXT1FBVWQwbDlxd21ERVFkZzYyIiwic3ViIjoicTRtMXFNMVBIV09RQVVkMGw5cXdtREVRZGc2MiIsImlhdCI6MTU2ODk2NzYyMiwiZXhwIjoxNTY4OTcxMjIyLCJlbWFpbCI6ImdnZ2ZyaWVuZDQ2MjBAYmNjdG8ubWUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZmlyZWJhc2UiOnsiaWRlbnRpdGllcyI6eyJlbWFpbCI6WyJnZ2dmcmllbmQ0NjIwQGJjY3RvLm1lIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.JJ_t7QMGp4aptqy3DcvpJYoibcoSZHMTiPUAOi25q1w9GwowJeWRiNALluLP0O2XZ9-NHLBznQci4dJ1_rNGE6iGSxxhyCWHsqJQFd6N5-iuZk5_mdQaa98vebsGFNJm3iFFc0YMXP1zISvVMKR5nLHFNkSNROTuq9hgAct66oG1GNNWBqsjotiEVWM8X4i6aOd49ZRKdFergBg4TqQEOD-********************************************-**************************************************************-w358qYb4YC8BQQJQRLw"}</code></pre><p>响应载荷：</p><pre><code>{"voteSession":"eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJxNG0xcU0xUEhXT1FBVWQwbDlxd21ERVFkZzYyIiwiZXhwIjoxNTc0MjM4MDI1fQ.cbOwvJALYqzko9Ax8xQAgf7ADEfZeNx03ED-9rxsvNc"}</code></pre><p>第四个请求是使用通过 API 获取到的 idToken 来获取投票用的 voteSession ，其实也就是投票网站自己的 token。请求头中带有 ProGuard 字段，应该是签名认证，需要看 JS 才知道如何生成。</p><p>第五个请求也是 OPTIONS 请求，爬虫不用发。</p><p>第六个请求（ridCode 打个码）：</p><pre><code>POST https://vote-api.aaavietnam2019.com.vn/Vote/Vote?v=1568967654757 HTTP/1.1Host: vote-api.aaavietnam2019.com.vnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0Accept: */*Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflate, brReferer: https://vote.aaavietnam2019.com.vn/Content-Type: application/jsonProGuard: proguard 8C9458547FB8B7B73B4A57F2A70DD858B7185D7E8EB7227AF8F1A9BA3CFE0843pro1568967655pro267ce6d8c9a046b5a074978ed7d0a579proe792e65bf3fbd3d97efbf671fa4ff3b3e9649b09f5122324a2f892980032f91aAuthorization: Bearer eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJxNG0xcU0xUEhXT1FBVWQwbDlxd21ERVFkZzYyIiwiZXhwIjoxNTc0MjM4MDI1fQ.cbOwvJALYqzko9Ax8xQAgf7ADEfZeNx03ED-9rxsvNclanguage: enOrigin: https://vote.aaavietnam2019.com.vnContent-Length: 33Connection: keep-alive{"ridCode":"1700xxx","round":"2"}</code></pre><p>响应载荷：</p><pre><code>{"success":true,"message":"Voted successfully."}</code></pre><p>这个请求就是投票了，请求载荷中 ridCode 是艺人编号， round 表示是第二轮投票，对我的爬虫来说都是可以写死的。<br>请求头中的 Authorization 字段是通过前面的<code>POST /User/GenSession</code>获取的，所以重点还是在于 ProGuard 的生成。</p><p>经过多次抓包对比后可以发现，ProGuard 由这几部分组成：</p><pre><code>// 固定的proguard 8C9458547FB8B7B73B4A57F2A70DD858B7185D7E8EB7227AF8F1A9BA3CFE0843// 分隔符pro// 东八区的秒时间戳，也就是说直接用了本地时间1568967655// 分隔符pro// 32个字符的字符串，猜测是MD5267ce6d8c9a046b5a074978ed7d0a579// 分隔符pro// 64位的字符串，不知道是啥e792e65bf3fbd3d97efbf671fa4ff3b3e9649b09f5122324a2f892980032f91a</code></pre><h3 id="找出关键-JS-文件"><a href="#找出关键-JS-文件" class="headerlink" title="找出关键 JS 文件"></a>找出关键 JS 文件</h3><p>要知道 ProGuard 的加密方式，就必须通过 JS 阅读与调试。所以必须要知道是哪些 JS 文件和加密、反调试有关。</p><p>投票页面一共引入了 20 个 JS 文件，其中类似 JQuery 和 angular 这样的显然不是我要找的，外部 host 的应该也不是。在剩下的 JS 中只有 dshdjsdjsh.min.js 和 home.js 做了混淆，此地无银三百两。</p><p><img src="Fiddler4.png" alt="20 个 JS 文件"></p><p>另外，按下 F12 后自动进入了无穷无尽的 debugger，看一眼调用堆栈，debugger 是通过 dshdjsdjsh.min.js 中的匿名函数进入的。</p><p><img src="debuggerStack.png" alt="通过调用堆栈找到了反调试代码所在文件"></p><p>把 dshdjsdjsh.min.js 格式化之后，可以看到很多密码学相关的东西（惭愧，只认识其中一部分），以及<code>'debu'</code>和<code>'gger'</code>这样的字符串。这个文件很可疑。</p><p>为了方便测试，我把这个 js 文件下载到本地，然后在本地写了一个 a.html，格式化后引入这个 js。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dshdjsdjsh.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开后，控制台报错：</p><p><img src="htmlError.png" alt="a.html 报错"></p><p>在 a.html 中把 CryptoJs 也引入，解决。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>crypto-js.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dshdjsdjsh.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时在 a.html 的页面中打开浏览器的开发者工具，会陷入无尽的 debug。种种线索表明，这个文件就是需要破解的关键 JS文件。</p><h3 id="初步翻译与反调试突破"><a href="#初步翻译与反调试突破" class="headerlink" title="初步翻译与反调试突破"></a>初步翻译与反调试突破</h3><p>把 dshdjsdjsh.min.js 格式化之后，可以看到第一行就是各种字符串，显然是用于函数调用和赋值、比较之类操作的，要读懂这个混淆过的文件，这就是最靠谱的突破口。</p><p><img src="fucking1.png" alt="dshdjsdjsh.min.js 开头的十几行"></p><p>先给<code>_0x1957</code>起个名字，就叫它<code>fuckingStrs</code>吧，然后全局替换，开头这十几行就变成了这样：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> fuckingStrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hex'</span><span class="token punctuation">,</span> <span class="token string">'join'</span><span class="token punctuation">,</span> <span class="token string">'substr'</span><span class="token punctuation">,</span> <span class="token string">'Latin1'</span><span class="token punctuation">,</span> <span class="token string">'fromCharCode'</span><span class="token punctuation">,</span> <span class="token string">'charCodeAt'</span><span class="token punctuation">,</span> <span class="token string">'Utf8'</span><span class="token punctuation">,</span> <span class="token string">'Malformed\x20UTF-8\x20data'</span><span class="token punctuation">,</span> <span class="token string">'parse'</span><span class="token punctuation">,</span> <span class="token string">'BufferedBlockAlgorithm'</span><span class="token punctuation">,</span> <span class="token string">'_data'</span><span class="token punctuation">,</span> <span class="token string">'_nDataBytes'</span><span class="token punctuation">,</span> <span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token string">'concat'</span><span class="token punctuation">,</span> <span class="token string">'blockSize'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token string">'_minBufferSize'</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'_doProcessBlock'</span><span class="token punctuation">,</span> <span class="token string">'splice'</span><span class="token punctuation">,</span> <span class="token string">'cfg'</span><span class="token punctuation">,</span> <span class="token string">'reset'</span><span class="token punctuation">,</span> <span class="token string">'_doReset'</span><span class="token punctuation">,</span> <span class="token string">'_append'</span><span class="token punctuation">,</span> <span class="token string">'_process'</span><span class="token punctuation">,</span> <span class="token string">'_doFinalize'</span><span class="token punctuation">,</span> <span class="token string">'HMAC'</span><span class="token punctuation">,</span> <span class="token string">'algo'</span><span class="token punctuation">,</span> <span class="token string">'Base64'</span><span class="token punctuation">,</span> <span class="token string">'_map'</span><span class="token punctuation">,</span> <span class="token string">'charAt'</span><span class="token punctuation">,</span> <span class="token string">'indexOf'</span><span class="token punctuation">,</span> <span class="token string">'create'</span><span class="token punctuation">,</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='</span><span class="token punctuation">,</span> <span class="token string">'abs'</span><span class="token punctuation">,</span> <span class="token string">'sin'</span><span class="token punctuation">,</span> <span class="token string">'MD5'</span><span class="token punctuation">,</span> <span class="token string">'_hash'</span><span class="token punctuation">,</span> <span class="token string">'floor'</span><span class="token punctuation">,</span> <span class="token string">'_createHelper'</span><span class="token punctuation">,</span> <span class="token string">'HmacMD5'</span><span class="token punctuation">,</span> <span class="token string">'EvpKDF'</span><span class="token punctuation">,</span> <span class="token string">'hasher'</span><span class="token punctuation">,</span> <span class="token string">'keySize'</span><span class="token punctuation">,</span> <span class="token string">'iterations'</span><span class="token punctuation">,</span> <span class="token string">'finalize'</span><span class="token punctuation">,</span> <span class="token string">'Cipher'</span><span class="token punctuation">,</span> <span class="token string">'_ENC_XFORM_MODE'</span><span class="token punctuation">,</span> <span class="token string">'_DEC_XFORM_MODE'</span><span class="token punctuation">,</span> <span class="token string">'_xformMode'</span><span class="token punctuation">,</span> <span class="token string">'decrypt'</span><span class="token punctuation">,</span> <span class="token string">'StreamCipher'</span><span class="token punctuation">,</span> <span class="token string">'mode'</span><span class="token punctuation">,</span> <span class="token string">'_iv'</span><span class="token punctuation">,</span> <span class="token string">'_prevBlock'</span><span class="token punctuation">,</span> <span class="token string">'BlockCipherMode'</span><span class="token punctuation">,</span> <span class="token string">'Encryptor'</span><span class="token punctuation">,</span> <span class="token string">'Decryptor'</span><span class="token punctuation">,</span> <span class="token string">'_cipher'</span><span class="token punctuation">,</span> <span class="token string">'encryptBlock'</span><span class="token punctuation">,</span> <span class="token string">'slice'</span><span class="token punctuation">,</span> <span class="token string">'decryptBlock'</span><span class="token punctuation">,</span> <span class="token string">'CBC'</span><span class="token punctuation">,</span> <span class="token string">'pad'</span><span class="token punctuation">,</span> <span class="token string">'BlockCipher'</span><span class="token punctuation">,</span> <span class="token string">'createEncryptor'</span><span class="token punctuation">,</span> <span class="token string">'_mode'</span><span class="token punctuation">,</span> <span class="token string">'unpad'</span><span class="token punctuation">,</span> <span class="token string">'CipherParams'</span><span class="token punctuation">,</span> <span class="token string">'formatter'</span><span class="token punctuation">,</span> <span class="token string">'OpenSSL'</span><span class="token punctuation">,</span> <span class="token string">'salt'</span><span class="token punctuation">,</span> <span class="token string">'SerializableCipher'</span><span class="token punctuation">,</span> <span class="token string">'padding'</span><span class="token punctuation">,</span> <span class="token string">'_parse'</span><span class="token punctuation">,</span> <span class="token string">'createDecryptor'</span><span class="token punctuation">,</span> <span class="token string">'compute'</span><span class="token punctuation">,</span> <span class="token string">'PasswordBasedCipher'</span><span class="token punctuation">,</span> <span class="token string">'kdf'</span><span class="token punctuation">,</span> <span class="token string">'execute'</span><span class="token punctuation">,</span> <span class="token string">'encrypt'</span><span class="token punctuation">,</span> <span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'format'</span><span class="token punctuation">,</span> <span class="token string">'ivSize'</span><span class="token punctuation">,</span> <span class="token string">'_hasher'</span><span class="token punctuation">,</span> <span class="token string">'_oKey'</span><span class="token punctuation">,</span> <span class="token string">'_iKey'</span><span class="token punctuation">,</span> <span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token string">'AES'</span><span class="token punctuation">,</span> <span class="token string">'_key'</span><span class="token punctuation">,</span> <span class="token string">'_nRounds'</span><span class="token punctuation">,</span> <span class="token string">'_invKeySchedule'</span><span class="token punctuation">,</span> <span class="token string">'_doCryptBlock'</span><span class="token punctuation">,</span> <span class="token string">'_keySchedule'</span><span class="token punctuation">,</span> <span class="token string">'Hasher'</span><span class="token punctuation">,</span> <span class="token string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string">'pow'</span><span class="token punctuation">,</span> <span class="token string">'SHA256'</span><span class="token punctuation">,</span> <span class="token string">'HmacSHA256'</span><span class="token punctuation">,</span> <span class="token string">'_createHmacHelper'</span><span class="token punctuation">,</span> <span class="token string">'split'</span><span class="token punctuation">,</span> <span class="token string">'replaceAll'</span><span class="token punctuation">,</span> <span class="token string">'9D4763DDF7320050E4CA8G159AB03CEV'</span><span class="token punctuation">,</span> <span class="token string">'904A346434B5G47BC4E3FE793A553FGV'</span><span class="token punctuation">,</span> <span class="token string">'getItem'</span><span class="token punctuation">,</span> <span class="token string">'vbjvbdjv'</span><span class="token punctuation">,</span> <span class="token string">'vdkjfdjksfhk'</span><span class="token punctuation">,</span> <span class="token string">'utc'</span><span class="token punctuation">,</span> <span class="token string">'forEach'</span><span class="token punctuation">,</span> <span class="token string">'setTime'</span><span class="token punctuation">,</span> <span class="token string">';\x20expires='</span><span class="token punctuation">,</span> <span class="token string">'toUTCString'</span><span class="token punctuation">,</span> <span class="token string">'cookie'</span><span class="token punctuation">,</span> <span class="token string">';\x20path=/'</span><span class="token punctuation">,</span> <span class="token string">'querySelector'</span><span class="token punctuation">,</span> <span class="token string">'.jconfirm'</span><span class="token punctuation">,</span> <span class="token string">'.jconfirm\x20.jconfirm-content'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> <span class="token string">'classList'</span><span class="token punctuation">,</span> <span class="token string">'remove'</span><span class="token punctuation">,</span> <span class="token string">'hide'</span><span class="token punctuation">,</span> <span class="token string">'round'</span><span class="token punctuation">,</span> <span class="token string">'performance'</span><span class="token punctuation">,</span> <span class="token string">'now'</span><span class="token punctuation">,</span> <span class="token string">'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'</span><span class="token punctuation">,</span> <span class="token string">'replace'</span><span class="token punctuation">,</span> <span class="token string">'https:'</span><span class="token punctuation">,</span> <span class="token string">'toLowerCase'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'8C9458547FB8B7B73B4A57F2A70DD858B7185D7E8EB7227AF8F1A9BA3CFE0843'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'A1C5315BBBA8AB95DA3A20B36B1ED1B681C0A85E09BC4114F7D37A5F54CDB6C5'</span><span class="token punctuation">,</span> <span class="token string">'proguard\x208C9458547FB8B7B73B4A57F2A70DD858B7185D7E8EB7227AF8F1A9BA3CFE0843pro'</span><span class="token punctuation">,</span> <span class="token string">'pro'</span><span class="token punctuation">,</span> <span class="token string">'getCookie'</span><span class="token punctuation">,</span> <span class="token string">'lang'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'attr'</span><span class="token punctuation">,</span> <span class="token string">'/Vote/'</span><span class="token punctuation">,</span> <span class="token string">'headers'</span><span class="token punctuation">,</span> <span class="token string">'Authorization'</span><span class="token punctuation">,</span> <span class="token string">'Bearer\x20'</span><span class="token punctuation">,</span> <span class="token string">'SIGNATURE'</span><span class="token punctuation">,</span> <span class="token string">'language'</span><span class="token punctuation">,</span> <span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token string">'CreateOrder'</span><span class="token punctuation">,</span> <span class="token string">'status'</span><span class="token punctuation">,</span> <span class="token string">';path=/'</span><span class="token punctuation">,</span> <span class="token string">'json'</span><span class="token punctuation">,</span> <span class="token string">'then'</span><span class="token punctuation">,</span> <span class="token string">'StatusCode'</span><span class="token punctuation">,</span> <span class="token string">'wrongpassword'</span><span class="token punctuation">,</span> <span class="token string">'Message'</span><span class="token punctuation">,</span> <span class="token string">'popupConfirmShow'</span><span class="token punctuation">,</span> <span class="token string">'log'</span><span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token string">'while\x20(true)\x20{}'</span><span class="token punctuation">,</span> <span class="token string">'counter'</span><span class="token punctuation">,</span> <span class="token string">'debu'</span><span class="token punctuation">,</span> <span class="token string">'gger'</span><span class="token punctuation">,</span> <span class="token string">'action'</span><span class="token punctuation">,</span> <span class="token string">'stateObject'</span><span class="token punctuation">,</span> <span class="token string">'apply'</span><span class="token punctuation">,</span> <span class="token string">'function\x20*\x5c(\x20*\x5c)'</span><span class="token punctuation">,</span> <span class="token string">'\x5c+\x5c+\x20*(?:_0x(?:[a-f0-9]){4,6}|(?:\x5cb|\x5cd)[a-z0-9]{1,4}(?:\x5cb|\x5cd))'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'lib'</span><span class="token punctuation">,</span> <span class="token string">'Base'</span><span class="token punctuation">,</span> <span class="token string">'mixIn'</span><span class="token punctuation">,</span> <span class="token string">'hasOwnProperty'</span><span class="token punctuation">,</span> <span class="token string">'init'</span><span class="token punctuation">,</span> <span class="token string">'$super'</span><span class="token punctuation">,</span> <span class="token string">'toString'</span><span class="token punctuation">,</span> <span class="token string">'prototype'</span><span class="token punctuation">,</span> <span class="token string">'extend'</span><span class="token punctuation">,</span> <span class="token string">'WordArray'</span><span class="token punctuation">,</span> <span class="token string">'words'</span><span class="token punctuation">,</span> <span class="token string">'sigBytes'</span><span class="token punctuation">,</span> <span class="token string">'length'</span><span class="token punctuation">,</span> <span class="token string">'stringify'</span><span class="token punctuation">,</span> <span class="token string">'clamp'</span><span class="token punctuation">,</span> <span class="token string">'push'</span><span class="token punctuation">,</span> <span class="token string">'ceil'</span><span class="token punctuation">,</span> <span class="token string">'clone'</span><span class="token punctuation">,</span> <span class="token string">'call'</span><span class="token punctuation">,</span> <span class="token string">'random'</span><span class="token punctuation">,</span> <span class="token string">'enc'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>_0x7639ed<span class="token punctuation">,</span> _0x560f69<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _0x2347d3 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_0x26cfe9<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>_0x26cfe9<span class="token punctuation">)</span> <span class="token punctuation">{</span>            _0x7639ed<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x7639ed<span class="token punctuation">[</span><span class="token string">'shift'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">_0x2347d3</span><span class="token punctuation">(</span><span class="token operator">++</span>_0x560f69<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span>fuckingStrs<span class="token punctuation">,</span> <span class="token number">0x15d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _0x3575 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_0x9509aa<span class="token punctuation">,</span> _0xbe4c88<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _0x9509aa <span class="token operator">=</span> _0x9509aa <span class="token operator">-</span> <span class="token number">0x0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _0x2cb768 <span class="token operator">=</span> fuckingStrs<span class="token punctuation">[</span>_0x9509aa<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _0x2cb768<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难看出，中间这个一经定义就马上调用的匿名函数实际上是在给<code>fuckingStrs</code>调整顺序，而后面的<code>_0x3575</code>函数则是取<code>fuckingStrs</code>中的元素。<code>_0x3575</code>这个函数在整个文件中会频繁出现，把它全局替换改名为<code>getFuckingStr</code>。</p><p>注意到<code>fuckingStrs</code>中有<code>'debu'</code>和<code>'gger'</code>，直接通过 a.html 页面的控制台查看调换顺序后的<code>fuckingStrs</code>。发现它们的下标分别是 183 和 184。</p><p><img src="findDebuggerString.png" alt="本地调试查看调整顺序后的 fuckingStrs"></p><p>现在在文件中查找 <code>getFuckingStr('0xb7')</code> 就可以看到是在哪个位置搞出了 debugger。对于这个文件，也可以直接通过调用堆栈查看它在哪里进入 debugger（有时这招行不通）。</p><p>找到了这一段：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">_0x3fc48b</span><span class="token punctuation">(</span>_0x16e008<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">_0x11b740</span><span class="token punctuation">(</span>_0x5173cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> _0x5173cb <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_0x23e925<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0xb4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0xb5'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'apply'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0xb6'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">+</span> _0x5173cb <span class="token operator">/</span> _0x5173cb<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0x1</span> <span class="token operator">||</span> _0x5173cb <span class="token operator">%</span> <span class="token number">0x14</span> <span class="token operator">===</span> <span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0xb4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0xb7'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0xb8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'call'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0xb9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0xb4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0xb7'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0xb8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0x0'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getFuckingStr</span><span class="token punctuation">(</span><span class="token string">'0xba'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">_0x11b740</span><span class="token punctuation">(</span><span class="token operator">++</span>_0x5173cb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_0x16e008<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> _0x11b740<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">_0x11b740</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">_0x95f686</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们已经知道<code>fuckingStrs</code>调整后的顺序，也可以直接通过控制台获取<code>getFuckingStr(i)</code>的值，所以不难翻译成这样：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">_0x3fc48b</span><span class="token punctuation">(</span>paramA<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span>paramB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> paramB <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_0x23e925<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token string">'constructor'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'while (true) {}'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'apply'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">+</span> paramB <span class="token operator">/</span> paramB<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0x1</span> <span class="token operator">||</span> paramB <span class="token operator">%</span> <span class="token number">0x14</span> <span class="token operator">===</span> <span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token string">'constructor'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'debu'</span> <span class="token operator">+</span> <span class="token string">'gger'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'call'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token string">'constructor'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'debu'</span> <span class="token operator">+</span> <span class="token string">'gger'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'apply'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'stateObject'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token operator">++</span>paramB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>paramA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> innerFunction<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">_0x95f686</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，反调试相关代码找到了，把它们删掉，即改成这样：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">_0x3fc48b</span><span class="token punctuation">(</span>paramA<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span>paramB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> paramB <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_0x23e925<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token string">'constructor'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'while (true) {}'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'apply'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>paramA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> innerFunction<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">_0x95f686</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次打开 a.html，发现不会再自动进入无穷无尽的 debugger。</p><p>找到了反调试代码，接下来就是用修改过的 JS 文件替换掉投票网站上的原文件，就可以实现反反调试。使用 Fiddler 的 AutoResponder 功能即可做到。Fiddler 具体用法可以看 <a href="https://www.cnblogs.com/yyhh/p/5140852.html" target="_blank" rel="noopener">这篇文章</a>。</p><p>重新打开投票页面，再按下 F12，会发现 home.js 中也做了反调试，用同样的方法解决之。</p><h3 id="找出-ProGuard-的加密方式"><a href="#找出-ProGuard-的加密方式" class="headerlink" title="找出 ProGuard 的加密方式"></a>找出 ProGuard 的加密方式</h3><p>现在可以调试了，但是在哪里打断点呢？通过前面的报文分析发现，ProGuard 具有固定的前缀<code>8C9458547FB8B7B73B4A57F2A70DD858B7185D7E8EB7227AF8F1A9BA3CFE0843</code>，而且不难发现这个固定前缀出现在了<code>fuckingStrs</code>中。</p><p>在本地的 dshdjsdjsh.min.js 文件中查找<code>getFucnkingStr('0x9a')</code>，定位到了这一段代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'apiRequest'</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_0x16d7a3<span class="token punctuation">,</span> _0x235270<span class="token punctuation">,</span> _0x321b42<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _0x4f78cd <span class="token operator">=</span> Math<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x92'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'getTime'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0x3e8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        _0x428bfa <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> _0x321b42 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'getTime'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            window<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x93'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'function'</span> <span class="token operator">===</span> <span class="token keyword">typeof</span> window<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x93'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x94'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_0x321b42 <span class="token operator">+</span><span class="token operator">=</span> performance<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x94'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x95'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x96'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token regex">/[xy]/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_0x4f78cd<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> _0x35020b <span class="token operator">=</span> <span class="token punctuation">(</span>_0x321b42 <span class="token operator">+</span> <span class="token number">0x10</span> <span class="token operator">*</span> Math<span class="token punctuation">[</span><span class="token string">'random'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x10</span> <span class="token operator">|</span> <span class="token number">0x0</span><span class="token punctuation">;</span>                _0x321b42 <span class="token operator">=</span> Math<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x3f'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x321b42 <span class="token operator">/</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">'x'</span> <span class="token operator">===</span> _0x4f78cd <span class="token operator">?</span> _0x35020b <span class="token punctuation">:</span> _0x35020b <span class="token operator">&amp;</span> <span class="token number">0x3</span> <span class="token operator">|</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        _0x49e6b5 <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>_0x16d7a3<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x96'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x97'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'http:'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x98'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x99'</span><span class="token punctuation">)</span> <span class="token operator">===</span> _0x235270<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _0x44985b <span class="token operator">=</span> CryptoJS<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x3d'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>JSON<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x11'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x321b42<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _0x44985b <span class="token operator">=</span> <span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x9a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> _0x235270 <span class="token operator">+</span> _0x49e6b5 <span class="token operator">+</span> _0x4f78cd <span class="token operator">+</span> _0x428bfa <span class="token operator">+</span> _0x44985b<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x9b'</span><span class="token punctuation">)</span> <span class="token operator">===</span> _0x235270 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_0x44985b <span class="token operator">=</span> <span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x9a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> _0x235270 <span class="token operator">+</span> _0x49e6b5 <span class="token operator">+</span> _0x4f78cd <span class="token operator">+</span> _0x428bfa<span class="token punctuation">)</span><span class="token punctuation">;</span>    _0x49e6b5 <span class="token operator">=</span> CryptoJS<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x34'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x33'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x39'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x34'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x7a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x9c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _0x49e6b5<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x70'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x44985b<span class="token punctuation">)</span><span class="token punctuation">;</span>    _0x4f78cd <span class="token operator">=</span> <span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x9d'</span><span class="token punctuation">)</span> <span class="token operator">+</span> _0x4f78cd <span class="token operator">+</span> <span class="token string">'pro'</span> <span class="token operator">+</span> _0x428bfa <span class="token operator">+</span> <span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x9e'</span><span class="token punctuation">)</span> <span class="token operator">+</span> _0x49e6b5<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x46'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_0x428bfa <span class="token operator">=</span> iyuresdhfjsnd<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x9f'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'votesessionnew'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> iyuresdhfjsnd<span class="token punctuation">[</span><span class="token string">'SIGNATURE'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x428bfa<span class="token punctuation">;</span>    _0x428bfa <span class="token operator">=</span> localStorage<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x81'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token string">'vn'</span> <span class="token operator">===</span> _0x428bfa <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_0x428bfa <span class="token operator">=</span> <span class="token string">'vi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _0x4f78cd <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'method'</span><span class="token punctuation">:</span> _0x235270<span class="token punctuation">,</span>        <span class="token string">'headers'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>            <span class="token string">'ProGuard'</span><span class="token punctuation">:</span> _0x4f78cd        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token operator">-</span> <span class="token number">0x1</span> <span class="token operator">&lt;</span> _0x16d7a3<span class="token punctuation">[</span><span class="token string">'indexOf'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_0x4f78cd<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa5'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa6'</span><span class="token punctuation">)</span> <span class="token operator">+</span> iyuresdhfjsnd<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa7'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _0x4f78cd<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x428bfa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x99'</span><span class="token punctuation">)</span> <span class="token operator">===</span> _0x235270 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_0x4f78cd<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa9'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> JSON<span class="token punctuation">[</span><span class="token string">'stringify'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x321b42<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">-</span> <span class="token number">0x1</span> <span class="token operator">&lt;</span> _0x16d7a3<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x38'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'ko'</span> <span class="token operator">===</span> _0x428bfa <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_0x4f78cd<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xa8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'en'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>_0x16d7a3<span class="token punctuation">,</span> _0x4f78cd<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'then'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>_0x321b42<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token number">0x191</span> <span class="token operator">===</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>_0x321b42<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xab'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>document<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x89'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'split'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x85'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>_0x321b42<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x89'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> _0x321b42<span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token regex">/^ +/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x96'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token regex">/=.*/</span><span class="token punctuation">,</span> <span class="token string">'=;expires='</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'toUTCString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xac'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'reload'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> _0x321b42<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xad'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xae'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>_0x321b42<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_0x321b42<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xaf'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xb0'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> _0x321b42<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xb1'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x98'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'mailexist'</span> <span class="token operator">!=</span> _0x321b42<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xb1'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0x98'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> iyuresdhfjsnd<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xb2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x321b42<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xb1'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> _0x321b42<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'catch'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>_0x321b42<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">[</span><span class="token function">getFucnkingStr</span><span class="token punctuation">(</span><span class="token string">'0xb3'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0x321b42<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打上断点，执行登录和投票操作，配合<code>getFucnkingStr</code>函数就可以把混淆代码翻译成可读代码。这个过程稍微有点长，但并不难，就不详述了。</p><p>翻译结果：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这里的data参数传的是请求body的json对象</span><span class="token string">'apiRequest'</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 秒时间戳</span>    <span class="token keyword">var</span> second <span class="token operator">=</span> Math<span class="token punctuation">[</span><span class="token string">'round'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'getTime'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 实际上是一个随机数，但第13位一定是4，且第17位一定是{8,9,a,b}之一</span>        randomX4YX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> timeStamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'getTime'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这里把token加上了打开浏览器的毫秒数performance['now']()</span>            window<span class="token punctuation">[</span><span class="token string">'performance'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'function'</span> <span class="token operator">===</span> <span class="token keyword">typeof</span> window<span class="token punctuation">[</span><span class="token string">'performance'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>timeStamp <span class="token operator">+</span><span class="token operator">=</span> performance<span class="token punctuation">[</span><span class="token string">'now'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'</span><span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token regex">/[xy]/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 16以内随机非负整数</span>                <span class="token keyword">var</span> random16 <span class="token operator">=</span> <span class="token punctuation">(</span>timeStamp <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">*</span> Math<span class="token punctuation">[</span><span class="token string">'random'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 这一步无用</span>                timeStamp <span class="token operator">=</span> Math<span class="token punctuation">[</span><span class="token string">'floor'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>timeStamp <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">'x'</span> <span class="token operator">===</span> letter <span class="token operator">?</span> random16 <span class="token punctuation">:</span> random16 <span class="token operator">&amp;</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// url编码后的url</span>        urlEncoded <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'https:'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'http:'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'toLowerCase'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'POST'</span> <span class="token operator">===</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> tokenMD5 <span class="token operator">=</span> CryptoJS<span class="token punctuation">[</span><span class="token string">'MD5'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>JSON<span class="token punctuation">[</span><span class="token string">'stringify'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenMD5 <span class="token operator">=</span> <span class="token string">'8C9458547FB8B7B73B4A57F2A70DD858B7185D7E8EB7227AF8F1A9BA3CFE0843'</span> <span class="token operator">+</span> method <span class="token operator">+</span> urlEncoded <span class="token operator">+</span> second <span class="token operator">+</span> randomX4YX <span class="token operator">+</span> tokenMD5<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'GET'</span> <span class="token operator">===</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tokenMD5 <span class="token operator">=</span> <span class="token string">'8C9458547FB8B7B73B4A57F2A70DD858B7185D7E8EB7227AF8F1A9BA3CFE0843'</span> <span class="token operator">+</span> method <span class="token operator">+</span> urlEncoded <span class="token operator">+</span> second <span class="token operator">+</span> randomX4YX<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置密钥</span>    hmac <span class="token operator">=</span> CryptoJS<span class="token punctuation">[</span><span class="token string">'algo'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'HMAC'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'create'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">[</span><span class="token string">'algo'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'HmacSHA256'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'A1C5315BBBA8AB95DA3A20B36B1ED1B681C0A85E09BC4114F7D37A5F54CDB6C5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置消息</span>    hmac<span class="token punctuation">[</span><span class="token string">'update'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>tokenMD5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拼接proguard 固定值+秒时间戳+随机字符串+HmacSHA256</span>    pguard <span class="token operator">=</span> <span class="token string">'proguard 8C9458547FB8B7B73B4A57F2A70DD858B7185D7E8EB7227AF8F1A9BA3CFE0843pro'</span> <span class="token operator">+</span> second <span class="token operator">+</span> <span class="token string">'pro'</span> <span class="token operator">+</span> randomX4YX <span class="token operator">+</span> <span class="token string">'pro'</span> <span class="token operator">+</span> hmac<span class="token punctuation">[</span><span class="token string">'finalize'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// SIGNATURE设为getCookie('votesessionnew') 通过POST GenSession获取</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>randomX4YX <span class="token operator">=</span> iyuresdhfjsnd<span class="token punctuation">[</span><span class="token string">'getCookie'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'votesessionnew'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> iyuresdhfjsnd<span class="token punctuation">[</span><span class="token string">'SIGNATURE'</span><span class="token punctuation">]</span> <span class="token operator">=</span> randomX4YX<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// randomX4YX设为语言???</span>    randomX4YX <span class="token operator">=</span> localStorage<span class="token punctuation">[</span><span class="token string">'getItem'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'lang'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'attr'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'lang'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// randomX4YX = 'vi'</span>    <span class="token string">'vn'</span> <span class="token operator">===</span> randomX4YX <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>randomX4YX <span class="token operator">=</span> <span class="token string">'vi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pguard <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'method'</span><span class="token punctuation">:</span> method<span class="token punctuation">,</span>        <span class="token string">'headers'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>            <span class="token string">'ProGuard'</span><span class="token punctuation">:</span> pguard        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 下面是设置请求头、发送请求、处理响应</span>    <span class="token operator">-</span> <span class="token number">0x1</span> <span class="token operator">&lt;</span> url<span class="token punctuation">[</span><span class="token string">'indexOf'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/Vote/'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pguard<span class="token punctuation">[</span><span class="token string">'headers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Bearer '</span> <span class="token operator">+</span> iyuresdhfjsnd<span class="token punctuation">[</span><span class="token string">'SIGNATURE'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pguard<span class="token punctuation">[</span><span class="token string">'headers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'language'</span><span class="token punctuation">]</span> <span class="token operator">=</span> randomX4YX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token string">'POST'</span> <span class="token operator">===</span> method <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pguard<span class="token punctuation">[</span><span class="token string">'body'</span><span class="token punctuation">]</span> <span class="token operator">=</span> JSON<span class="token punctuation">[</span><span class="token string">'stringify'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">-</span> <span class="token number">0x1</span> <span class="token operator">&lt;</span> url<span class="token punctuation">[</span><span class="token string">'indexOf'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'CreateOrder'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'ko'</span> <span class="token operator">===</span> randomX4YX <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pguard<span class="token punctuation">[</span><span class="token string">'headers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'language'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'en'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> pguard<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'then'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token number">401</span> <span class="token operator">===</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>document<span class="token punctuation">[</span><span class="token string">'cookie'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'split'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'forEach'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">[</span><span class="token string">'cookie'</span><span class="token punctuation">]</span> <span class="token operator">=</span> param<span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token regex">/^ +/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token regex">/=.*/</span><span class="token punctuation">,</span> <span class="token string">'=;expires='</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'toUTCString'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';path=/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'reload'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> param<span class="token punctuation">[</span><span class="token string">'json'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'then'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">'StatusCode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token string">'wrongpassword'</span> <span class="token operator">!=</span> response<span class="token punctuation">[</span><span class="token string">'Message'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'toLowerCase'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'mailexist'</span> <span class="token operator">!=</span> response<span class="token punctuation">[</span><span class="token string">'Message'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'toLowerCase'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> iyuresdhfjsnd<span class="token punctuation">[</span><span class="token string">'popupConfirmShow'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">'Message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'catch'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本分析完毕，对页面逻辑稍作整理后就可以开始写爬虫了。</p><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><p>哈希工具类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> utils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Mac<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>InvalidKeyException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>NoSuchAlgorithmException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yuan * @version 0.1 * @date 2019/8/23 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HashUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> MessageDigest SHA1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> MessageDigest MD5<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Mac HmacSHA256<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            SHA1 <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"SHA1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MD5 <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HmacSHA256 <span class="token operator">=</span> Mac<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"HmacSHA256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">toUpperHex</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String hexString <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"ff"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hexString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>hexString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getMD5</span><span class="token punctuation">(</span>String src<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">toUpperHex</span><span class="token punctuation">(</span>MD5<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getSHA1</span><span class="token punctuation">(</span>String src<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">toUpperHex</span><span class="token punctuation">(</span>SHA1<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getHmacSHA256</span><span class="token punctuation">(</span>String data<span class="token punctuation">,</span> String key<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidKeyException <span class="token punctuation">{</span>        SecretKeySpec secretKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"HmacSHA256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HmacSHA256<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> HmacSHA256<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> item <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爬虫类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> crawler<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>math<span class="token punctuation">.</span>RandomUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpHost<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>HttpGet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>HttpPost<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>StringEntity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>CloseableHttpClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HttpClients<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>DefaultProxyRoutePlanner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EntityUtils<span class="token punctuation">;</span><span class="token keyword">import</span> utils<span class="token punctuation">.</span>HashUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLEncoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>InvalidKeyException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>ZoneOffset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yuan * @version 0.1 * @date 2019/9/19 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A3Voter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HOME_URL <span class="token operator">=</span> <span class="token string">"https://vote.aaavietnam2019.com.vn"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PASSWORD_VERIFY_URL <span class="token operator">=</span> <span class="token string">"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyAlFqKJC-D1xFUsZ6PE9tzsRcjNftrxXmY"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String GET_ACCOUNT_INFO_URL <span class="token operator">=</span> <span class="token string">"https://www.googleapis.com/identitytoolkit/v3/relyingparty/getAccountInfo?key=AIzaSyAlFqKJC-D1xFUsZ6PE9tzsRcjNftrxXmY"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String GENERATE_SESSION_URL <span class="token operator">=</span> <span class="token string">"https://vote-api.aaavietnam2019.com.vn/User/GenSession"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String VOTE_URL <span class="token operator">=</span> <span class="token string">"https://vote-api.aaavietnam2019.com.vn/Vote/Vote"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String RID <span class="token operator">=</span> <span class="token string">"1700***"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String VOTE_ROUND <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PERFORMANCE_BOUND <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> THOUSAND <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> RANDOM_FORMAT <span class="token operator">=</span> <span class="token string">"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> RANDOM_FORMAT_4 <span class="token operator">=</span> <span class="token string">'4'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> RANDOM_FORMAT_X <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span> RANDOM_FORMAT_Y <span class="token operator">=</span> <span class="token string">'y'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RANDOM_RADIX <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String METHOD_POST <span class="token operator">=</span> <span class="token string">"POST"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String METHOD_GET <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MD5_PREFIX <span class="token operator">=</span> <span class="token string">"8C9458547FB8B7B73B4A57F2A70DD858B7185D7E8EB7227AF8F1A9BA3CFE0843"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HMAC_KEY <span class="token operator">=</span> <span class="token string">"A1C5315BBBA8AB95DA3A20B36B1ED1B681C0A85E09BC4114F7D37A5F54CDB6C5"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SIGN_PREFIX <span class="token operator">=</span> <span class="token string">"proguard "</span> <span class="token operator">+</span> MD5_PREFIX<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SIGN_DELIMITER <span class="token operator">=</span> <span class="token string">"pro"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 一个帐号一天可以投两次 */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BALLOT_NUM <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> LANTERN_PORT <span class="token operator">=</span> <span class="token number">60649</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> SSR_PORT <span class="token operator">=</span> <span class="token number">28868</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 代理 用于实现get over the wall */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> HttpHost proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> SSR_PORT<span class="token punctuation">,</span> <span class="token string">"HTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DefaultProxyRoutePlanner routePlanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultProxyRoutePlanner</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> CloseableHttpClient httpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setRoutePlanner</span><span class="token punctuation">(</span>routePlanner<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 打开投票页面，目的是设置Cookie     *     * @throws IOException IOException     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">openHomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span>HOME_URL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过Google的API获取idToken     *     * @param email    登录邮箱     * @param password 密码     * @return 响应     * @throws IOException IOException     */</span>    <span class="token keyword">private</span> JSONObject <span class="token function">passwordVerify</span><span class="token punctuation">(</span>String email<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// fastjson顺序会乱，干脆直接写字符串</span>        String loginParamsJson <span class="token operator">=</span> <span class="token string">"{\"email\":\""</span> <span class="token operator">+</span> email <span class="token operator">+</span> <span class="token string">"\",\"password\":\""</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"\",\"returnSecureToken\":true}"</span><span class="token punctuation">;</span>        StringEntity entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>loginParamsJson<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setContentEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpPost verifyPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>PASSWORD_VERIFY_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>        verifyPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        verifyPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Encoding"</span><span class="token punctuation">,</span> <span class="token string">"gzip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>verifyPost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成Pguard用到的随机字符串     *     * @param timeStamp 时间戳     * @return 随机字符串     */</span>    <span class="token keyword">private</span> String <span class="token function">createRandom</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeStamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> performance <span class="token operator">=</span> RandomUtils<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>PERFORMANCE_BOUND<span class="token punctuation">)</span> <span class="token operator">*</span> THOUSAND <span class="token operator">+</span> RandomUtils<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>THOUSAND<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> RANDOM_FORMAT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> randomSmallerThan16 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timeStamp <span class="token operator">+</span> performance <span class="token operator">+</span> RandomUtils<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>RANDOM_RADIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> RANDOM_RADIX<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> RANDOM_FORMAT_X<span class="token operator">:</span>                    stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>randomSmallerThan16<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> RANDOM_FORMAT_Y<span class="token operator">:</span>                    <span class="token comment" spellcheck="true">// &amp;3|8使得二进制形式为000010??，即十六进制必为{8,9,a,b}中的一个</span>                    stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>randomSmallerThan16 <span class="token operator">&amp;</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> RANDOM_FORMAT_4<span class="token operator">:</span>                    stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成Pguard     *     * @param url     请求URL     * @param method  请求方法     * @param payload 请求载荷     * @return Pguard     */</span>    <span class="token keyword">private</span> String <span class="token function">createPguard</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String method<span class="token punctuation">,</span> String payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> timeStamp <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"+8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> second <span class="token operator">=</span> timeStamp <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>            String random <span class="token operator">=</span> <span class="token function">createRandom</span><span class="token punctuation">(</span>timeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            String encodedUrl <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"https:"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"http:"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String methodSignature <span class="token operator">=</span> MD5_PREFIX <span class="token operator">+</span> method <span class="token operator">+</span> encodedUrl<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> second <span class="token operator">+</span> random<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>METHOD_POST<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                methodSignature <span class="token operator">+=</span> HashUtils<span class="token punctuation">.</span><span class="token function">getMD5</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String hmac <span class="token operator">=</span> HashUtils<span class="token punctuation">.</span><span class="token function">getHmacSHA256</span><span class="token punctuation">(</span>methodSignature<span class="token punctuation">,</span> HMAC_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>            String pguard <span class="token operator">=</span> SIGN_PREFIX <span class="token operator">+</span> SIGN_DELIMITER <span class="token operator">+</span> second <span class="token operator">+</span> SIGN_DELIMITER <span class="token operator">+</span> random <span class="token operator">+</span> SIGN_DELIMITER <span class="token operator">+</span> hmac<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pguard<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> <span class="token operator">|</span> InvalidKeyException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取投票token     *     * @param idToken 从Google的API获取的idToken     * @return 投票token     * @throws IOException IOException     */</span>    <span class="token keyword">private</span> JSONObject <span class="token function">generateSession</span><span class="token punctuation">(</span>String idToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String jsonString <span class="token operator">=</span> <span class="token string">"{\"Token\":\""</span> <span class="token operator">+</span> idToken <span class="token operator">+</span> <span class="token string">"\"}"</span><span class="token punctuation">;</span>        String pguard <span class="token operator">=</span> <span class="token function">createPguard</span><span class="token punctuation">(</span>GENERATE_SESSION_URL<span class="token punctuation">,</span> METHOD_POST<span class="token punctuation">,</span> jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringEntity entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setContentEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpPost generateSessionPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>GENERATE_SESSION_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"ProGuard"</span><span class="token punctuation">,</span> pguard<span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">,</span> <span class="token string">"https://vote.aaavietnam2019.com.vn/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">,</span> <span class="token string">"https://vote.aaavietnam2019.com.vn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">,</span> <span class="token string">"gzip, deflate, br"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>generateSessionPost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 发起投票请求     *     * @param voteSession 投票token     * @return 响应     * @throws IOException IOException     */</span>    <span class="token keyword">private</span> JSONObject <span class="token function">vote</span><span class="token punctuation">(</span>String voteSession<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String voteJsonString <span class="token operator">=</span> <span class="token string">"{\"ridCode\":\"1700***\",\"round\":\"2\"}"</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> timeStamp <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"+8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String pguard <span class="token operator">=</span> <span class="token function">createPguard</span><span class="token punctuation">(</span>VOTE_URL <span class="token operator">+</span> <span class="token string">"?v="</span> <span class="token operator">+</span> timeStamp<span class="token punctuation">,</span> METHOD_POST<span class="token punctuation">,</span> voteJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringEntity entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>voteJsonString<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setContentEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpPost generateSessionPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>VOTE_URL <span class="token operator">+</span> <span class="token string">"?v="</span> <span class="token operator">+</span> timeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"ProGuard"</span><span class="token punctuation">,</span> pguard<span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">,</span> <span class="token string">"https://vote.aaavietnam2019.com.vn/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">,</span> <span class="token string">"https://vote.aaavietnam2019.com.vn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span> <span class="token string">"Bearer "</span> <span class="token operator">+</span> voteSession<span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"language"</span><span class="token punctuation">,</span> <span class="token string">"en"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        generateSessionPost<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">,</span> <span class="token string">"gzip, deflate, br"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>generateSessionPost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 投票     *     * @param email    登录邮箱     * @param password 密码     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">vote</span><span class="token punctuation">(</span>String email<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            JSONObject verifyResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">passwordVerify</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            String idToken <span class="token operator">=</span> verifyResult<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"idToken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> idToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"密码验证失败:"</span> <span class="token operator">+</span> verifyResult<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            JSONObject generation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateSession</span><span class="token punctuation">(</span>idToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            String voteSession <span class="token operator">=</span> generation<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"voteSession"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> voteSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"获取voteSession失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BALLOT_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                JSONObject voteResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">vote</span><span class="token punctuation">(</span>voteSession<span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}：{}"</span><span class="token punctuation">,</span> email<span class="token punctuation">,</span> voteResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> RuntimeException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{}出错：{}"</span><span class="token punctuation">,</span> email<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br><img src="result.png" alt="运行结果"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>有段时间经常在网上看到有人说：</p><blockquote><p>前端无秘密</p></blockquote><p>一定程度上，确实如此。前端的加密、混淆做得再好，代码终究是要运行的，防护做得好，很多时候也只是增加破解难度和成本而已。</p><p>这个投票网站的反调试和代码混淆做得并不怎么好，但能把这个爬虫写出来也是挺有成就感的。</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>说到投票，千千万万饭圈女孩大部分还是用人力来做这种事情的。每逢投票评选和作品打榜（尽管她们未必在乎作品本身），一个个帐号地注册、每天一个个帐号地登录、投票，要花多少时间和金钱？更别说日常的那些乱七八糟的刷量、控评、表白、送花、打卡了（真是服了）。</p><p>某个商家搞个没有多少权威性的投票评选，免费用户每日一票，付费用户每日十票，就可以赚上一把；脚本提供商针对这个评选写一个投票爬虫，同样可以赚上一把（和军火商一样，同时卖给对立的各方）。令人惊讶的是，有些时候，不花钱的那一方竟能以碾压之势胜出，他们家 idol 是多有魅力？</p><p>我有时候会觉得这些人很可笑，偶尔会觉得他们很可爱，但更多时候还是觉得很可怕。</p><p>值得吗？如鱼饮水，冷暖自知。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笨读JDK8源码(3)-Consumer和Supplier</title>
      <link href="/2019/09/18/jdk_source_read/jsr-consumer/"/>
      <url>/2019/09/18/jdk_source_read/jsr-consumer/</url>
      
        <content type="html"><![CDATA[<h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><h3 id="源码翻译"><a href="#源码翻译" class="headerlink" title="源码翻译"></a>源码翻译</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 表示一个接收单个输入参数且不返回任何结果的操作。不像大部分函数式接口， * {@code Consumer}预计通过副作用（side-effects）来实现方法功能。 * * &lt;p>这是一个函数式方法为{@link #accept(Object)}的函数式接口。 * * @param &lt;T> 操作的输入参数类型 * @author jdk * @since 1.8 */</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 对给定参数执行操作。     *     * @param t 输入参数     */</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个先执行当前Consumer再执行后续Consumer的组合Consumer。     * 任一Consumer执行过程当中引发的异常由调用者处理。若当前Consumer     * 抛出了异常，则后续Consumer不执行。     *     * @param after 执行当前操作后执行的后续操作     * @return 一个先执行当前操作再执行后续操作的{@code Consumer}     * @throws NullPointerException 若后续Consumer为null则抛出     */</span>    <span class="token keyword">default</span> Consumer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">andThen</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对后续Consumer判空</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先对输入参数执行当前操作</span>            <span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再对处理后的输入执行后续操作</span>            after<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p>Consumer 的字面意思是消费者，这个接口用于对单个对象执行不返回结果的操作。该接口提供了一个用于创建组合函数的默认方法。</p><p>Consumer 最常用于调用 <code>Iterable</code> 实例的 <code>void forEach(Consumer&lt;? super T&gt; action)</code> 方法，也就是用于替代无返回值的 for-each 循环的循环体。实际上，Consumer 可以用于替代各种只有一个输入参数的 void 方法。</p><p>使用示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                    <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                    <span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建列表</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用Lambda表达式创建Consumer</span>        Consumer<span class="token operator">&lt;</span>Student<span class="token operator">></span> plusOne <span class="token operator">=</span> student <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            student<span class="token punctuation">.</span>age <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用方法引用创建Consumer</span>        Consumer<span class="token operator">&lt;</span>Student<span class="token operator">></span> println <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过组合Consumer迭代列表</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre><code>Student{age=1}Student{age=2}Student{age=3}Student{age=4}</code></pre><p>在上面这个例子中，第一个 Consumer 对学生的年龄进行了加一操作，而第二个 Consumer 则把学生实例打印出来。通过 <code>forEach</code> 方法传入组合的 Consumer，就实现了迭代的组合操作。</p><h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><h3 id="源码翻译-1"><a href="#源码翻译-1" class="headerlink" title="源码翻译"></a>源码翻译</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 表示一个结果提供者。 * * &lt;p>对于supplier的每次执行，不要求提供一个新的或与上次不同的结果。 * * &lt;p>这是一个函数式方法为{@link #get()}的函数式接口。 * * @param &lt;T> 结果类型 * @author jdk * @since 1.8 */</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Supplier</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取一个结果。     *     * @return 一个结果     */</span>    T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="详解-1"><a href="#详解-1" class="headerlink" title="详解"></a>详解</h3><p>Supplier 接口实际上实现了从<strong>行为</strong>到<strong>值</strong>的转换。Java 的函数式编程实质上是把行为看作一种对象（函数式接口实例），函数对象封装的是行为而不是值。通过 Supplier 接口，我们就能以返回行为的方式来满足返回值的需求。</p><p>Supplier 接口可以用于替代无参工厂方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Consumer 接口和 Supplier 接口都是　JDK8 中很重要而又很简单的接口，其源码阅读几乎不费吹灰之力，使用方法也是一看就懂。实际上，只要看懂了 Function 接口和 @FunctionalInterface 注解，java.util.function 这个包下的所有接口都是很好懂的。</p><p>JDK8 通过这一系列接口，用面向对象的方式将函数式编程结合到 Java 中，实现了向后兼容。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笨读JDK8源码(2)-Predicate</title>
      <link href="/2019/09/17/jdk_source_read/jsr-predicate/"/>
      <url>/2019/09/17/jdk_source_read/jsr-predicate/</url>
      
        <content type="html"><![CDATA[<h2 id="源码翻译"><a href="#源码翻译" class="headerlink" title="源码翻译"></a>源码翻译</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 表示一个参数的谓词（布尔值函数）。 * * &lt;p>这是一个函数式方法为{@link #test(Object)}的函数式接口 * * @param &lt;T> 谓词的输入参数类型 * @author jdk * @since 1.8 */</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用给定参数评估谓词的真假。     *     * @param t 输入参数     * @return 若参数满足谓词则返回{@code true},否则返回{@code false}     */</span>    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个本谓词和另一个谓词短语与运算的组合谓词。若本谓词为假则另一     * 个谓词将不被评估。     *     * &lt;p>谓词评估期间的任何异常都会被抛到调用处，若本谓词抛出异常，组合的     * 另一个谓词将不被评估。     *     * @param other 一个将被本谓词短路与运算的谓词     * @return 一个本谓词和另一个谓词短路与运算的组合谓词     * @throws NullPointerException 若另一个谓词为null则抛出     */</span>    <span class="token keyword">default</span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">and</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判空</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先评估本谓词，再和另一个谓词的评估结果相与，若本谓词为假则发生短路</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个本谓词的非谓词。     *     * @return 一个本谓词的逻辑非谓词     */</span>    <span class="token keyword">default</span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取非</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个本谓词与另一个谓词短路或运算的组合谓词。若本谓词为真则另一     * 个谓词将不被评估。     *     * &lt;p>谓词评估期间的任何异常都会被抛到调用处，若本谓词抛出异常，组合的     * * 另一个谓词将不被评估。     *     * @param other 一个将被本谓词短路或运算的谓词     * @return 一个本谓词和另一个谓词短路或运算的组合谓词     * @throws NullPointerException 若另一个谓词为null则抛出     */</span>    <span class="token keyword">default</span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">or</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判空</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先评估本谓词，再和另一个谓词的评估结果相或，若本谓词为真则发生短路</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">||</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个根据{@link Objects#equals(Object, Object)}评估两个参数是否     * 相等的谓词。     *     * @param &lt;T>       谓词的输入参数类型     * @param targetRef 用于比较的对象引用，可能为{@code null}     * @return 一个根据{@link Objects#equals(Object, Object)}评估两个参数是否相等的谓词     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">isEqual</span><span class="token punctuation">(</span>Object targetRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断输入的对象引用是否为空</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> targetRef<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 若输入为空则返回一个判空函数 这里返回一个符合boolean test(T t)签名的方法引用即可创建Predicate</span>                <span class="token operator">?</span> Objects<span class="token operator">:</span><span class="token operator">:</span>isNull                <span class="token comment" spellcheck="true">// 若输入不为空则返回一个用{@link Objects#equals(Object, Object)}进行比较的谓词</span>                <span class="token operator">:</span> object <span class="token operator">-</span><span class="token operator">></span> targetRef<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><p>Predicate<t> 是一个泛型函数式接口，相当于离散数学中的谓词逻辑。该接口的实例可通过命题创建，并提供了基于与或非三种逻辑运算的谓词组合方式。</t></p><p>接口的函数式方法是<code>boolean test(T t)</code>，实际上就是根据传入的参数 t 判断在创建实例时所使用的命题是否为真。</p><p>接口提供了 <code>and</code>、<code>or</code>、<code>negate</code> 三个用于逻辑组合的默认方法，其中与运算和非运算都是短路运算，先判断当前谓词的真值再判断另一个谓词的真值。</p><p>接口还提供了一个静态方法<code>isEqual(Object targetRef)</code>，用于创建一个对象相等性判断谓词，所返回的谓词可用于判断<code>targetRef</code>与其它对象是否相等。在需要用同一个对象与多个其它对象进行相等性判断的时候这个函数可为我们提供便利。</p><p>使用示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过Lambda表达式创建谓词</span>        Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> p1 <span class="token operator">=</span> s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 评估谓词真假</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> p2 <span class="token operator">=</span> s <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 为便于观察短路现象，在这里输出"p2:"</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"p2:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"dsad"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 运算组合 p1 &amp;&amp; !p2</span>        Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> p <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"bbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 由于p1为假，会被短路，不输出"p2:"</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个用于判断其它字符串是否等于"hello world"的谓词</span>        Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> pe <span class="token operator">=</span> Predicate<span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pe<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pe<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pe<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pe<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre><code>falsefalsetruetrue---------------------------p2:truep2:truep2:falsep2:false---------------------------p2:falsep2:truefalse---------------------------truefalsefalsefalse</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只要理解了 Java 的函数式接口和函数式编程，Predicate 接口的源码是非常非常易读的，使用方法也很容易掌握。</p><p>Predicate 接口只提供了与、或、非三种运算，而没有提供异或、同或等符合运算，也不像 Function 接口那样提供了先执行前置函数再执行本函数的组合方法。</p><p>Predicate 接口的用途十分广泛，是一个应当熟练掌握的接口。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笨读JDK8源码(1)-Function和@FunctionalInterface</title>
      <link href="/2019/09/16/jdk_source_read/jsr-function/"/>
      <url>/2019/09/16/jdk_source_read/jsr-function/</url>
      
        <content type="html"><![CDATA[<h2 id="FunctionalInterface注解"><a href="#FunctionalInterface注解" class="headerlink" title="@FunctionalInterface注解"></a>@FunctionalInterface注解</h2><h3 id="源码翻译"><a href="#源码翻译" class="headerlink" title="源码翻译"></a>源码翻译</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 一个用于标记Java语言规范中&lt;i>函数式接口&lt;/i>的信息注解。 * &lt;p> * 从概念上讲，函数式接口是有且仅有一个抽象方法的接口。由于默认方法具 * 有实现，所以它们不是抽象的。如果接口声明了覆写{@code java.lang.Object} * 的公有方法的方法，那么这些方法也不计作抽象方法，因为接口的任何实现 * 都是{@code java.lang.Object}的子类。 * * &lt;p>函数式接口的实例可以用Lambda表达式、方法引用或构造器引用来创建。 * * &lt;p>对于使用了这个注解的类型，不满足以下条件时编译器会生成错误信息： * * &lt;ul> * &lt;li> 该类型是接口，而非注解、枚举、类。 * &lt;li> 该类型满足函数式接口的要求。 * &lt;/ul> * * &lt;p>编译器将自动把满足函数式接口定义的任何接口视作函数式接口，无论 * 接口是否被{@code FunctionalInterface}注解标记。 * * @jls 4.3.2. The Class Object * @jls 9.8 Functional Interfaces * @jls 9.4.3 Interface Method Body * @since 1.8 */</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">FunctionalInterface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p>@FunctionalInterface 注解用于<strong>显式地</strong>标记函数式接口，它是一个作用于类型的运行时注解。即使不使用 @FunctionalInterface 注解标记接口，编译器也会把满足函数式接口要求的接口视作函数式接口；而使用了 @FunctionalInterface 注解后，如果接口不满足函数式接口的要求，编译器会给出错误信息。如果我们要设计一个函数式接口，最好加上这个注解以作种规约，同时也能让编译器帮我们检查接口中是否有多于一个的抽象方法。</p><p>所谓函数式接口，指的是有且仅有一个抽象方法的接口。比如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 有且只有一个抽象方法void hello()，所以是函数式接口</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 抽象方法，由实现类负责实现</span>    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认方法，具有默认实现</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 Example 接口的 hello() 方法就是一个抽象方法，相对应的，hi() 方法就不是一个抽象方法。因此 Example 接口就是一个函数式接口。</p><p>如果在接口中声明覆写了 Object 类公有方法的方法，比如 <code>equals(Object)</code> 和 <code>toString()</code>，这样的方法也不会被视作是抽象方法。比如上面的 Example 接口，它在添加了<code>equals(Object)</code> 和 <code>toString()</code> 之后仍然是一个函数式接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 有且只有一个抽象方法void hello()，所以是函数式接口</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 抽象方法，由实现类负责实现</span>    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认方法，具有默认实现</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 覆写Object类的公有方法</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 覆写Object类的公有方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了定义实现类和通过 new 匿名创建以外，函数式接口还可以用Lambda表达式、方法引用或构造器引用来创建。</p><p>比如像这样创建 Example 实例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过Lambda表达式创建，打印“你好”并换行</span>        Example example <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过方法引用创建，打印换行</span>        example <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>你好--------------------------</code></pre><h2 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h2><h3 id="源码翻译-1"><a href="#源码翻译-1" class="headerlink" title="源码翻译"></a>源码翻译</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 表示接收一个参数并返回一个结果的函数 * * &lt;p>这是一个&lt;a href="package-summary.html">函数式接口&lt;/a>， * 其唯一抽象方法为{@link #apply(Object)}。 * * @param &lt;T> 函数输入的类型 * @param &lt;R> 函数结果的类型 * @author jdk * @since 1.8 */</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 对给定的参数指定函数     *     * @param t 函数的参数     * @return 函数的结果     */</span>    R <span class="token function">apply</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个一个先执行给定前置函数再执行本函数的组合函数，组合函数执     * 行时将把输入作为前置函数的输入，把前置函数的输出作为本函数的输入，     * 最后将本函数的执行结果作为组合函数的结果。如果任一函数抛出异常，     * 则将异常抛给组合函数的调用者。     *     * @param &lt;V>    前置函数的输入类型，即组合函数的输入类型     * @param before 在组合函数中，先于本函数执行的前置函数     * @return 一个先执行前置函数再执行本函数的组合函数     * @throws NullPointerException 若前置函数为空则抛出     * @see #andThen(Function)     */</span>    <span class="token keyword">default</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> Function<span class="token operator">&lt;</span>V<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">compose</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> before<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 前置函数判空</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回一个先执行前置函数，然后将其输出作为本函数输入并执行的组合函数</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>V v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>before<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个把本函数作为前置函数并把给定函数作为后置函数的组合函数。     * 如果任一函数抛出异常，则将异常抛给组合函数的调用者。     *     * @param &lt;V>   后置函数的结果类型     * @param after 在组合函数中后于本函数执行的后置函数     * @return 一个先执行本函数再执行给定函数的组合函数     * applies the {@code after} function     * @throws NullPointerException 若后置函数为空则抛出     * @see #compose(Function)     */</span>    <span class="token keyword">default</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> Function<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">andThen</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 后置函数判空</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回一个先执行本函数，然后将输出作为后置函数并执行的组合函数</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> after<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个总是将输入作为输出的函数     *     * @param &lt;T> 函数输入的类型     * @return 一个总是将输入作为输出的函数     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Function<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="详解-1"><a href="#详解-1" class="headerlink" title="详解"></a>详解</h3><p>Function 接口是一个函数式接口，表示接收一个参数并返回一个结果的函数。Function 实例可以作为方法参数以实现行为传递，在 JDK8 的许多地方（比如 Collection）存在以 Function 作为参数的方法。</p><p>使用示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 遍历传入的列表并对每个元素执行指定操作，返回每个对元素的操作结果     *     * @param list     列表     * @param function 操作函数     * @param &lt;T>      列表的元素类型     * @param &lt;R>      操作函数的输出类型     * @return 操作结果列表     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> List<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">example</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> function<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用JDK7的Objects类进行判空</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建结果列表</span>        List<span class="token operator">&lt;</span>R<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历操作</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> input <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建操作函数，判断整数的奇偶性并以字符串形式返回结果</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> function <span class="token operator">=</span> i <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"偶数"</span> <span class="token operator">:</span> <span class="token string">"奇数"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">example</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> function<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历打印结果，这里传的是方法引用</span>        result<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>偶数奇数偶数奇数偶数奇数偶数奇数</code></pre><p>Function 接口中有两个默认方法和一个静态方法。</p><p>静态方法 <code>identity()</code> 可以创建一个直接返回输入参数的函数，在某些情况下可以提供一定的便利（比如使用流的时候）。由于是接口静态方法，它不会被继承，不能通过实例名来调用，只能通过 <code>Function.identity()</code> 调用。</p><p>两个默认方法用于创建组合函数，可以把 Function 实例按照期望的先后顺序组合起来，先执行一个后执行另一个。使用这两个方法可以方便地创建函数链。其中 <code>Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before)</code> 可以组合一个前置函数，而 <code>Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after)</code> 可以组合一个后置函数。</p><p>默认方法使用示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 遍历传入的列表并对每个元素执行指定操作，返回每个对元素的操作结果     *     * @param list     列表     * @param function 操作函数     * @param &lt;T>      列表的元素类型     * @param &lt;R>      操作函数的输出类型     * @return 操作结果列表     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> List<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">example</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> function<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用JDK7的Objects类进行判空</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建结果列表</span>        List<span class="token operator">&lt;</span>R<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历操作</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> input <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建操作函数，把整数乘以3</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> function <span class="token operator">=</span> i <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组合一个后置函数，把整数加1</span>        function <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历执行操作</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">example</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> function<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历打印结果，这里传的是方法引用</span>        result<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>1471013161922</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>@FunctionalInterface 注解和 Function 接口的源码都非常简单，唯一需要重点关注的是函数式接口的定义和要求。而看懂了 Function 接口，BiFunction 接口就很容易理解了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高效程序员的45个习惯》读书笔记</title>
      <link href="/2019/08/20/2019/programmer-45-%20habits-reading-note/"/>
      <url>/2019/08/20/2019/programmer-45-%20habits-reading-note/</url>
      
        <content type="html"><![CDATA[<h2 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h2><h3 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h3><p>在高度协作的环境中不断地使用反馈进行自我调整和完善</p><h3 id="敏捷开发宣言"><a href="#敏捷开发宣言" class="headerlink" title="敏捷开发宣言"></a>敏捷开发宣言</h3><ul><li>个体和交互胜过过程和工具</li><li>可工作的软件胜过面面俱到的文档</li><li>客户写作胜过合同谈判</li><li>响应变化胜过遵循计划</li></ul><h3 id="敏捷开发的重点"><a href="#敏捷开发的重点" class="headerlink" title="敏捷开发的重点"></a>敏捷开发的重点</h3><ul><li>团队中的每个人都具备职业精神和积极专业的工作态度</li><li>团队共享代码和开发任务，每个人都跟进最新情况</li><li>持续开发，持续集成，持续重构</li><li>频繁迭代</li></ul><h2 id="45个习惯"><a href="#45个习惯" class="headerlink" title="45个习惯"></a>45个习惯</h2><h3 id="态度"><a href="#态度" class="headerlink" title="态度"></a>态度</h3><h4 id="1-把精力放在做事上"><a href="#1-把精力放在做事上" class="headerlink" title="1 把精力放在做事上"></a>1 把精力放在做事上</h4><ul><li>抓住主要矛盾的主要方面</li><li>出了问题，关注如何解决而不是找出犯错者</li></ul><h4 id="2-欲速则不达"><a href="#2-欲速则不达" class="headerlink" title="2 欲速则不达"></a>2 欲速则不达</h4><ul><li>保持代码高质量</li><li>不使用未理解或不可读的代码</li></ul><h4 id="3-对事不对人"><a href="#3-对事不对人" class="headerlink" title="3 对事不对人"></a>3 对事不对人</h4><ul><li>有技巧地指出他人的问题，不要伤害他人</li><li>团体决策技巧<pre><code>设定DeadLine从正反两面思考设立会议仲裁人拥护既有决定</code></pre></li></ul><h4 id="4-排除万难，奋勇直前"><a href="#4-排除万难，奋勇直前" class="headerlink" title="4 排除万难，奋勇直前"></a>4 排除万难，奋勇直前</h4><ul><li>敢于坚持原则</li><li>敢于指出错误</li><li>敢于面对实情</li></ul><h3 id="持续学习"><a href="#持续学习" class="headerlink" title="持续学习"></a>持续学习</h3><h4 id="5-持久跟进技术发展"><a href="#5-持久跟进技术发展" class="headerlink" title="5 持久跟进技术发展"></a>5 持久跟进技术发展</h4><ul><li>增量式学习，小步紧跟</li><li>通过阅读博客和社区讨论了解最新技术</li><li>参与活动和讨论</li><li>阅读</li></ul><h4 id="6-对团队投资，助团队成长"><a href="#6-对团队投资，助团队成长" class="headerlink" title="6 对团队投资，助团队成长"></a>6 对团队投资，助团队成长</h4><h4 id="7-打破旧习惯，丢弃过时的东西"><a href="#7-打破旧习惯，丢弃过时的东西" class="headerlink" title="7 打破旧习惯，丢弃过时的东西"></a>7 打破旧习惯，丢弃过时的东西</h4><h4 id="8-打破砂锅问到底，找到问题的根源而非停留在问题的表象"><a href="#8-打破砂锅问到底，找到问题的根源而非停留在问题的表象" class="headerlink" title="8 打破砂锅问到底，找到问题的根源而非停留在问题的表象"></a>8 打破砂锅问到底，找到问题的根源而非停留在问题的表象</h4><h4 id="9-有远见地把握节奏"><a href="#9-有远见地把握节奏" class="headerlink" title="9 有远见地把握节奏"></a>9 有远见地把握节奏</h4><ul><li>不随意进行时间安排</li><li>有规律地迭代</li></ul><h3 id="交付"><a href="#交付" class="headerlink" title="交付"></a>交付</h3><h4 id="10-业务问题让客户做决定"><a href="#10-业务问题让客户做决定" class="headerlink" title="10 业务问题让客户做决定"></a>10 业务问题让客户做决定</h4><ul><li>记录客户的决定和原因</li><li>问有价值的问题</li></ul><h4 id="11-设计指导开发，而非操纵开发"><a href="#11-设计指导开发，而非操纵开发" class="headerlink" title="11 设计指导开发，而非操纵开发"></a>11 设计指导开发，而非操纵开发</h4><ul><li>前期只做战略设计</li><li>战术设计留到问题清晰时</li><li>不提前对未确定的东西做详细设计</li></ul><h4 id="12-合理使用技术"><a href="#12-合理使用技术" class="headerlink" title="12 合理使用技术"></a>12 合理使用技术</h4><ul><li>考虑是否能真正解决问题</li><li>考虑维护成本</li><li>考虑是否有更简单方案</li><li>考虑是否具有可取消性，是否会产生严重依赖</li><li>技术应该是帮助工作的工具，它本身不应该成为工作</li><li>不重复造轮子</li></ul><h4 id="13-保持项目的可发布性"><a href="#13-保持项目的可发布性" class="headerlink" title="13 保持项目的可发布性"></a>13 保持项目的可发布性</h4><ul><li>避免代码版本冲突</li><li>借助持续集成工具</li><li>代码修改不能破坏既有系统，且应尽量让同伴知晓</li></ul><h4 id="14-提早集成，频繁集成"><a href="#14-提早集成，频繁集成" class="headerlink" title="14 提早集成，频繁集成"></a>14 提早集成，频繁集成</h4><ul><li>用好mock</li></ul><h4 id="15-提早实现自动化部署"><a href="#15-提早实现自动化部署" class="headerlink" title="15 提早实现自动化部署"></a>15 提早实现自动化部署</h4><h4 id="16-频繁演示以得到反馈"><a href="#16-频繁演示以得到反馈" class="headerlink" title="16 频繁演示以得到反馈"></a>16 频繁演示以得到反馈</h4><ul><li>维护项目术语表，以提高沟通有效性</li></ul><h4 id="17-使用短迭代，增量发布"><a href="#17-使用短迭代，增量发布" class="headerlink" title="17 使用短迭代，增量发布"></a>17 使用短迭代，增量发布</h4><ul><li>短时间开发足够好的，胜过长时间开发超级好的</li><li>越早发布，越早抢占市场；越早得到反馈，越快进一步打磨</li><li>紧跟环境变化和用户需求变化</li></ul><h4 id="18-项目价格应该是灵活变动的"><a href="#18-项目价格应该是灵活变动的" class="headerlink" title="18 项目价格应该是灵活变动的"></a>18 项目价格应该是灵活变动的</h4><h3 id="敏捷反馈"><a href="#敏捷反馈" class="headerlink" title="敏捷反馈"></a>敏捷反馈</h3><h4 id="19-使用自动化单元测试"><a href="#19-使用自动化单元测试" class="headerlink" title="19 使用自动化单元测试"></a>19 使用自动化单元测试</h4><ul><li>保证单元测试覆盖率和质量足够高</li><li>单元测试能及时提供反馈</li><li>单元测试让代码更健壮</li><li>单元测试是可靠的设计工具</li><li>单元测试给开发者以自信</li><li>单元测试是解决问题的探测器</li><li>单元测试是可信的文档和学习工具</li></ul><h4 id="20-测试驱动开发"><a href="#20-测试驱动开发" class="headerlink" title="20 测试驱动开发"></a>20 测试驱动开发</h4><ul><li>先使用后实现</li><li>站在使用者的角度开发</li><li>测试驱动设计</li></ul><h4 id="21-关心平台和环境"><a href="#21-关心平台和环境" class="headerlink" title="21 关心平台和环境"></a>21 关心平台和环境</h4><ul><li>保证代码的可移植性</li><li>借助持续集成工具进行自动化跨平台测试</li></ul><h4 id="22-自动验收测试"><a href="#22-自动验收测试" class="headerlink" title="22 自动验收测试"></a>22 自动验收测试</h4><ul><li>为用户提供傻瓜式测试工具</li><li>利用好用户的既有数据</li></ul><h4 id="23-度量真实进度"><a href="#23-度量真实进度" class="headerlink" title="23 度量真实进度"></a>23 度量真实进度</h4><ul><li>经常比较预估工作量与实际工作量，以此增强自己的评估能力</li><li>使用带优先级的待办事项列表</li></ul><h4 id="24-倾听用户声音"><a href="#24-倾听用户声音" class="headerlink" title="24 倾听用户声音"></a>24 倾听用户声音</h4><ul><li>提供易用的产品和易读的文档</li><li>提供有价值的出错信息</li><li>收集用户反馈，对产品进行调整</li></ul><h3 id="敏捷编码"><a href="#敏捷编码" class="headerlink" title="敏捷编码"></a>敏捷编码</h3><h4 id="25-代码要清晰地表达意图"><a href="#25-代码要清晰地表达意图" class="headerlink" title="25 代码要清晰地表达意图"></a>25 代码要清晰地表达意图</h4><ul><li>避免魔法值</li><li>创建专门的对象作为锁，而不是锁住this</li></ul><h4 id="26-用代码沟通"><a href="#26-用代码沟通" class="headerlink" title="26 用代码沟通"></a>26 用代码沟通</h4><ul><li>使用优雅的变量名</li><li>doc要素<pre><code>目的需求（前置条件）承诺（后置条件）异常</code></pre></li><li>不添加不必要的注释</li></ul><h4 id="27-动态评估取舍"><a href="#27-动态评估取舍" class="headerlink" title="27 动态评估取舍"></a>27 动态评估取舍</h4><ul><li>不必事事完美</li><li>考虑成本</li><li>关注核心需求</li><li>不要过早考虑优化</li></ul><h4 id="28-增量式编程"><a href="#28-增量式编程" class="headerlink" title="28 增量式编程"></a>28 增量式编程</h4><h4 id="29-保持简单（KISS）"><a href="#29-保持简单（KISS）" class="headerlink" title="29 保持简单（KISS）"></a>29 保持简单（KISS）</h4><h4 id="30-编写内聚的代码"><a href="#30-编写内聚的代码" class="headerlink" title="30 编写内聚的代码"></a>30 编写内聚的代码</h4><h4 id="31-严格封装"><a href="#31-严格封装" class="headerlink" title="31 严格封装"></a>31 严格封装</h4><ul><li>区分命令型和查询型方法，后者应具有幂等性</li></ul><h4 id="32-合理使用继承和组合"><a href="#32-合理使用继承和组合" class="headerlink" title="32 合理使用继承和组合"></a>32 合理使用继承和组合</h4><h3 id="敏捷调试"><a href="#敏捷调试" class="headerlink" title="敏捷调试"></a>敏捷调试</h3><h4 id="33-记录解决问题的日志"><a href="#33-记录解决问题的日志" class="headerlink" title="33 记录解决问题的日志"></a>33 记录解决问题的日志</h4><h4 id="34-不忽略Warning"><a href="#34-不忽略Warning" class="headerlink" title="34 不忽略Warning"></a>34 不忽略Warning</h4><h4 id="35-对问题各个击破"><a href="#35-对问题各个击破" class="headerlink" title="35 对问题各个击破"></a>35 对问题各个击破</h4><h4 id="36-报告所有异常"><a href="#36-报告所有异常" class="headerlink" title="36 报告所有异常"></a>36 报告所有异常</h4><h4 id="37-提供有用的错误信息"><a href="#37-提供有用的错误信息" class="headerlink" title="37 提供有用的错误信息"></a>37 提供有用的错误信息</h4><h3 id="敏捷协作"><a href="#敏捷协作" class="headerlink" title="敏捷协作"></a>敏捷协作</h3><h4 id="38-安排站立会议"><a href="#38-安排站立会议" class="headerlink" title="38 安排站立会议"></a>38 安排站立会议</h4><h4 id="39-架构师必须写代码"><a href="#39-架构师必须写代码" class="headerlink" title="39 架构师必须写代码"></a>39 架构师必须写代码</h4><h4 id="40-实行代码集体所有制"><a href="#40-实行代码集体所有制" class="headerlink" title="40 实行代码集体所有制"></a>40 实行代码集体所有制</h4><h4 id="41-成为指导者和分享者"><a href="#41-成为指导者和分享者" class="headerlink" title="41 成为指导者和分享者"></a>41 成为指导者和分享者</h4><ul><li>对团队投资</li></ul><h4 id="42-让别人自己找到办法"><a href="#42-让别人自己找到办法" class="headerlink" title="42 让别人自己找到办法"></a>42 让别人自己找到办法</h4><h4 id="43-准备好后才共享代码"><a href="#43-准备好后才共享代码" class="headerlink" title="43 准备好后才共享代码"></a>43 准备好后才共享代码</h4><ul><li>不提交仍在开发的代码</li></ul><h4 id="44-做代码复查"><a href="#44-做代码复查" class="headerlink" title="44 做代码复查"></a>44 做代码复查</h4><ul><li>代码刚完成时是最好的检查时机</li><li>使用代码分析工具</li></ul><h4 id="45-及时报告进展与问题"><a href="#45-及时报告进展与问题" class="headerlink" title="45 及时报告进展与问题"></a>45 及时报告进展与问题</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码之外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS混淆编码从原理到实现</title>
      <link href="/2019/08/14/2019/my-js-obfuscation-encode/"/>
      <url>/2019/08/14/2019/my-js-obfuscation-encode/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>当年刚上大一的时候，我在某微信公众号上读过一篇标题为《史上最奇葩的十大编程语言》的文章，对其中介绍的 <code>Brainfuck</code> 和 <code>Ook!</code>印象尤其深刻。后来接触到<a href="https://github.com/aemkei/jsfuck" target="_blank" rel="noopener">JSFuck</a>、<a href="http://utf-8.jp/public/jjencode.html" target="_blank" rel="noopener">JJEncode</a>、<a href="http://utf-8.jp/public/aaencode.html" target="_blank" rel="noopener">AAEncode</a>，更是大感奇妙。这几种编码既可以用于前端代码混淆，也可以用于 XSS 攻击，<strong>最重要的是它们很好玩</strong>。</p><p>昨天下午，我正坐在工位上美滋滋地吃着公司的下午茶，突然看到了<a href="https://blog.csdn.net/qq_36539075/article/details/79946099" target="_blank" rel="noopener">一篇解析JSFuck原理的文章</a> （博主说要写一个系列的文章结果太监了），顿时来了兴趣，产生了自己搞一种混淆编码的冲动。下班之后，我<del>蹭着公司的网</del>又查了一些资料，总算搞懂了这些有趣的混淆编码的原理，然后实现了自己的 <code>WHUTOSA_Encode</code>。</p><h2 id="AAEncode示例"><a href="#AAEncode示例" class="headerlink" title="AAEncode示例"></a>AAEncode示例</h2><p>如果你对这类混淆编码不了解，当你第一次见到下面这段“代码”，估计会有点懵：</p><pre><code>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(oﾟｰﾟo)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(oﾟｰﾟo)+ ((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (o^_^o)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(oﾟｰﾟo)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (o^_^o)+ (ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(oﾟｰﾟo)+ (ﾟｰﾟ)+ (ﾟДﾟ) .ﾟДﾟﾉ+ (ﾟДﾟ) .ﾟωﾟﾉ+ (ﾟДﾟ) ['c']+ (ﾟДﾟ)[ﾟεﾟ]+(oﾟｰﾟo)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(oﾟｰﾟo)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ) .ﾟΘﾟﾉ+ ((ﾟｰﾟ) + (ﾟｰﾟ))+ ((ﾟｰﾟ) + (ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(oﾟｰﾟo)+ ((ﾟｰﾟ) + (ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ) .ﾟДﾟﾉ+ ((ﾟｰﾟ) + (ﾟｰﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_');</code></pre><p>如果你把这串颜文字拿到浏览器控制台去跑，会在控制台打印“我爱北京天安门”。</p><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><h3 id="前置知识-使用Function的构造函数进行函数定义"><a href="#前置知识-使用Function的构造函数进行函数定义" class="headerlink" title="前置知识-使用Function的构造函数进行函数定义"></a>前置知识-使用Function的构造函数进行函数定义</h3><p>借助 <code>new Function()</code> 或者 <code>Function.constructor</code>，我们可以创建新的函数。</p><p>比如：</p><pre class="line-numbers language-js"><code class="language-js">a <span class="token operator">=</span> Function<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'console.log(i+1)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'console.log("java是最好的语言");'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行上面的代码，可以在控制台输出 <code>6</code> 和 <code>java是最好的语言</code>。</p><p>更具体的解析可以看<a href="https://www.cnblogs.com/xiaokeai0110/p/10029024.html" target="_blank" rel="noopener">这篇文章</a>。</p><h3 id="前置知识-JS类型转换"><a href="#前置知识-JS类型转换" class="headerlink" title="前置知识-JS类型转换"></a>前置知识-JS类型转换</h3><p>JavaScript 是一门非常<del>恶心</del>神奇的编程语言，不同类型的值还可以相互转换,用 <code>==</code> 进行比较还有可能返回 <code>true</code>。</p><p>比如 <code>1+2+'3'</code> 可以得到 <code>'33'</code>、<code>1=='1'</code> 的结果是 <code>true</code>、<code>['a','b']+2</code> 的结果是 <code>'a,b2'</code>……</p><p>更详细说明可以看<a href="https://www.runoob.com/js/js-type-conversion.html" target="_blank" rel="noopener">这里</a>。</p><p><img src="fuckingJS.jpg" alt="JavaScript从娃娃抓起"></p><h3 id="混淆编码原理解析"><a href="#混淆编码原理解析" class="headerlink" title="混淆编码原理解析"></a>混淆编码原理解析</h3><p>像<code>JSFuck</code>和<code>jjencode</code>这样的混淆编码，其根本原理就是使用奇奇怪怪的变量名来表示数字和字母，然后用这些变量拼接出正常的 JS 语句，最后通过<code>eval()</code>或者<code>new Function()</code>之类的方式执行代码和定义函数。</p><p>比如 <code>jjencode</code> 开始的这一段：</p><pre class="line-numbers language-js"><code class="language-js">$ <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$ <span class="token operator">=</span> <span class="token punctuation">{</span>    ___<span class="token punctuation">:</span> <span class="token operator">++</span>$<span class="token punctuation">,</span>    $$$$<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">[</span>$<span class="token punctuation">]</span><span class="token punctuation">,</span>    __$<span class="token punctuation">:</span> <span class="token operator">++</span>$<span class="token punctuation">,</span>    $_$_<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">[</span>$<span class="token punctuation">]</span><span class="token punctuation">,</span>    _$_<span class="token punctuation">:</span> <span class="token operator">++</span>$<span class="token punctuation">,</span>    $_$$<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">[</span>$<span class="token punctuation">]</span><span class="token punctuation">,</span>    $$_$<span class="token punctuation">:</span> <span class="token punctuation">(</span>$<span class="token punctuation">[</span>$<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">[</span>$<span class="token punctuation">]</span><span class="token punctuation">,</span>    _$$<span class="token punctuation">:</span> <span class="token operator">++</span>$<span class="token punctuation">,</span>    $$$_<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">[</span>$<span class="token punctuation">]</span><span class="token punctuation">,</span>    $__<span class="token punctuation">:</span> <span class="token operator">++</span>$<span class="token punctuation">,</span>    $_$<span class="token punctuation">:</span> <span class="token operator">++</span>$<span class="token punctuation">,</span>    $$__<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">[</span>$<span class="token punctuation">]</span><span class="token punctuation">,</span>    $$_<span class="token punctuation">:</span> <span class="token operator">++</span>$<span class="token punctuation">,</span>    $$$<span class="token punctuation">:</span> <span class="token operator">++</span>$<span class="token punctuation">,</span>    $___<span class="token punctuation">:</span> <span class="token operator">++</span>$<span class="token punctuation">,</span>    $__$<span class="token punctuation">:</span> <span class="token operator">++</span>$<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一句是把变量 <code>$</code> 赋值为 <code>-1</code>，这里利用了JS的自动类型转换，实际上也可以换成 <code>$ = ~''</code> 之类的写法。</p><p>第二句则是把变量 <code>$</code> 赋值为一个对象，对象的这些属性实际上是十六进制数字。比如 <code>___: ++$</code> 会让最终的 <code>$.___</code> 为 <code>0</code>。</p><p>而如果要实现通过 <code>Function.constructor</code> 来定义函数，还需要有 <code>{'n','s','t','r','u','o'}</code> 这几个字母，可以在 <code>{'true','false','undefine','object'}</code> 中获取到，而后面这四个字符串全部都可以通过 JS 的类型转换来取得。</p><p>更详细的解释可以看<strong>扩展阅读</strong>中的文章。</p><p>生成各种 ASCII 字符的更多方法可以参考<a href="https://github.com/aemkei/jsfuck/blob/master/jsfuck.js" target="_blank" rel="noopener">JSFuck的方式</a>。</p><h2 id="实现自己的混淆编码"><a href="#实现自己的混淆编码" class="headerlink" title="实现自己的混淆编码"></a>实现自己的混淆编码</h2><h3 id="生成-WHUTOSA-Encode-的代码"><a href="#生成-WHUTOSA-Encode-的代码" class="headerlink" title="生成 WHUTOSA_Encode 的代码"></a>生成 WHUTOSA_Encode 的代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 设计字符映射关系</span>map <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token string">"武"</span><span class="token punctuation">,</span>    <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token string">"汉"</span><span class="token punctuation">,</span>    <span class="token string">"2"</span><span class="token punctuation">:</span> <span class="token string">"理"</span><span class="token punctuation">,</span>    <span class="token string">"3"</span><span class="token punctuation">:</span> <span class="token string">"工"</span><span class="token punctuation">,</span>    <span class="token string">"4"</span><span class="token punctuation">:</span> <span class="token string">"开"</span><span class="token punctuation">,</span>    <span class="token string">"5"</span><span class="token punctuation">:</span> <span class="token string">"源"</span><span class="token punctuation">,</span>    <span class="token string">"6"</span><span class="token punctuation">:</span> <span class="token string">"技"</span><span class="token punctuation">,</span>    <span class="token string">"7"</span><span class="token punctuation">:</span> <span class="token string">"术"</span><span class="token punctuation">,</span>    <span class="token string">"8"</span><span class="token punctuation">:</span> <span class="token string">"协"</span><span class="token punctuation">,</span>    <span class="token string">"9"</span><span class="token punctuation">:</span> <span class="token string">"会"</span><span class="token punctuation">,</span>    <span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token string">"大学"</span><span class="token punctuation">,</span>    <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token string">"开学"</span><span class="token punctuation">,</span>    <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token string">"武汉"</span><span class="token punctuation">,</span>    <span class="token string">"d"</span><span class="token punctuation">:</span> <span class="token string">"开大"</span><span class="token punctuation">,</span>    <span class="token string">"e"</span><span class="token punctuation">:</span> <span class="token string">"理工"</span><span class="token punctuation">,</span>    <span class="token string">"f"</span><span class="token punctuation">:</span> <span class="token string">"武大"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">encode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'+\"\\\\\"'</span> <span class="token operator">+</span> <span class="token function">numToString</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'+\"\\\\\"+理工大'</span> <span class="token operator">+</span> <span class="token function">numToString</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">numToString</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"+"</span> <span class="token operator">+</span> map<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 拼接出结果</span><span class="token keyword">function</span> <span class="token function">printEncrypt</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">// 这里实际上就是生成各种字符串变量</span>        <span class="token string">"学=~[],武=++学,汉=++学,理=++学,工=++学,开=++学,源=++学,技=++学,术=++学,协=++学,会=++学,大会=![]+\"\",开会=!![]+\"\",大汉={}+\"\",理会=[][学]+\"\",大学=大会[汉],开学=大汉[理],武汉=大汉[源],开大=理会[理],理工=开会[工],武大=大会[武],开源=理会[汉],技术=大汉[汉],协会=开会[汉],武理=大会[工],武理工=开会[武],理工大=理会[武],开源技术=武汉+技术+开源+武理+武理工+协会+理工大+武汉+武理工+技术+协会,开源协会=协会+理工+武理工+理工大+协会+开源+\" \","</span>        <span class="token comment" spellcheck="true">// 这里是使用Function.constructor()()执行代码</span>        <span class="token operator">+</span> <span class="token string">"[][开源技术][开源技术]([][开源技术][开源技术](开源协会"</span>        <span class="token operator">+</span> <span class="token string">"+\"\\\"\""</span>        <span class="token operator">+</span> <span class="token function">encode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token operator">+</span> <span class="token string">"+\"\\\"\""</span>        <span class="token operator">+</span> <span class="token string">")())()"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>yourJavaScriptCode <span class="token operator">=</span> <span class="token string">"console.log('武汉理工大学开源技术协会')"</span><span class="token punctuation">;</span><span class="token function">printEncrypt</span><span class="token punctuation">(</span>yourJavaScriptCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行-WHUTOSA-Encode-的结果"><a href="#运行-WHUTOSA-Encode-的结果" class="headerlink" title="运行 WHUTOSA_Encode 的结果"></a>运行 WHUTOSA_Encode 的结果</h3><p>运行生成的代码：</p><pre class="line-numbers language-js"><code class="language-js">学<span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>武<span class="token operator">=</span><span class="token operator">++</span>学<span class="token punctuation">,</span>汉<span class="token operator">=</span><span class="token operator">++</span>学<span class="token punctuation">,</span>理<span class="token operator">=</span><span class="token operator">++</span>学<span class="token punctuation">,</span>工<span class="token operator">=</span><span class="token operator">++</span>学<span class="token punctuation">,</span>开<span class="token operator">=</span><span class="token operator">++</span>学<span class="token punctuation">,</span>源<span class="token operator">=</span><span class="token operator">++</span>学<span class="token punctuation">,</span>技<span class="token operator">=</span><span class="token operator">++</span>学<span class="token punctuation">,</span>术<span class="token operator">=</span><span class="token operator">++</span>学<span class="token punctuation">,</span>协<span class="token operator">=</span><span class="token operator">++</span>学<span class="token punctuation">,</span>会<span class="token operator">=</span><span class="token operator">++</span>学<span class="token punctuation">,</span>大会<span class="token operator">=</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>开会<span class="token operator">=</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>大汉<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>理会<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>学<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>大学<span class="token operator">=</span>大会<span class="token punctuation">[</span>汉<span class="token punctuation">]</span><span class="token punctuation">,</span>开学<span class="token operator">=</span>大汉<span class="token punctuation">[</span>理<span class="token punctuation">]</span><span class="token punctuation">,</span>武汉<span class="token operator">=</span>大汉<span class="token punctuation">[</span>源<span class="token punctuation">]</span><span class="token punctuation">,</span>开大<span class="token operator">=</span>理会<span class="token punctuation">[</span>理<span class="token punctuation">]</span><span class="token punctuation">,</span>理工<span class="token operator">=</span>开会<span class="token punctuation">[</span>工<span class="token punctuation">]</span><span class="token punctuation">,</span>武大<span class="token operator">=</span>大会<span class="token punctuation">[</span>武<span class="token punctuation">]</span><span class="token punctuation">,</span>开源<span class="token operator">=</span>理会<span class="token punctuation">[</span>汉<span class="token punctuation">]</span><span class="token punctuation">,</span>技术<span class="token operator">=</span>大汉<span class="token punctuation">[</span>汉<span class="token punctuation">]</span><span class="token punctuation">,</span>协会<span class="token operator">=</span>开会<span class="token punctuation">[</span>汉<span class="token punctuation">]</span><span class="token punctuation">,</span>武理<span class="token operator">=</span>大会<span class="token punctuation">[</span>工<span class="token punctuation">]</span><span class="token punctuation">,</span>武理工<span class="token operator">=</span>开会<span class="token punctuation">[</span>武<span class="token punctuation">]</span><span class="token punctuation">,</span>理工大<span class="token operator">=</span>理会<span class="token punctuation">[</span>武<span class="token punctuation">]</span><span class="token punctuation">,</span>开源技术<span class="token operator">=</span>武汉<span class="token operator">+</span>技术<span class="token operator">+</span>开源<span class="token operator">+</span>武理<span class="token operator">+</span>武理工<span class="token operator">+</span>协会<span class="token operator">+</span>理工大<span class="token operator">+</span>武汉<span class="token operator">+</span>武理工<span class="token operator">+</span>技术<span class="token operator">+</span>协会<span class="token punctuation">,</span>开源协会<span class="token operator">=</span>协会<span class="token operator">+</span>理工<span class="token operator">+</span>武理工<span class="token operator">+</span>理工大<span class="token operator">+</span>协会<span class="token operator">+</span>开源<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>开源技术<span class="token punctuation">]</span><span class="token punctuation">[</span>开源技术<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>开源技术<span class="token punctuation">]</span><span class="token punctuation">[</span>开源技术<span class="token punctuation">]</span><span class="token punctuation">(</span>开源协会<span class="token operator">+</span><span class="token string">"\""</span><span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>汉<span class="token operator">+</span>开<span class="token operator">+</span>工<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>汉<span class="token operator">+</span>源<span class="token operator">+</span>术<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>汉<span class="token operator">+</span>源<span class="token operator">+</span>技<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>汉<span class="token operator">+</span>技<span class="token operator">+</span>工<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>汉<span class="token operator">+</span>源<span class="token operator">+</span>术<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>汉<span class="token operator">+</span>源<span class="token operator">+</span>开<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>汉<span class="token operator">+</span>开<span class="token operator">+</span>源<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>源<span class="token operator">+</span>技<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>汉<span class="token operator">+</span>源<span class="token operator">+</span>开<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>汉<span class="token operator">+</span>源<span class="token operator">+</span>术<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>汉<span class="token operator">+</span>开<span class="token operator">+</span>术<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>源<span class="token operator">+</span>武<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>开<span class="token operator">+</span>术<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>技<span class="token operator">+</span>开学<span class="token operator">+</span>技<span class="token operator">+</span>技<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>技<span class="token operator">+</span>武汉<span class="token operator">+</span>开<span class="token operator">+</span>会<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>术<span class="token operator">+</span>开<span class="token operator">+</span>武<span class="token operator">+</span>技<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>源<span class="token operator">+</span>开大<span class="token operator">+</span>理工<span class="token operator">+</span>源<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>源<span class="token operator">+</span>会<span class="token operator">+</span>理<span class="token operator">+</span>术<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>源<span class="token operator">+</span>开学<span class="token operator">+</span>技<span class="token operator">+</span>技<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>源<span class="token operator">+</span>武大<span class="token operator">+</span>武<span class="token operator">+</span>武<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>技<span class="token operator">+</span>理工<span class="token operator">+</span>会<span class="token operator">+</span>武<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>技<span class="token operator">+</span>理<span class="token operator">+</span>协<span class="token operator">+</span>武<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>技<span class="token operator">+</span>术<span class="token operator">+</span>理<span class="token operator">+</span>武大<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>源<span class="token operator">+</span>工<span class="token operator">+</span>开<span class="token operator">+</span>武大<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>理工大<span class="token operator">+</span>开<span class="token operator">+</span>武大<span class="token operator">+</span>汉<span class="token operator">+</span>大学<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>开<span class="token operator">+</span>术<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>源<span class="token operator">+</span>汉<span class="token operator">+</span><span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将在控制台输出“武汉理工大学开源技术协会”：</p><p><img src="OSAEncodeResult.png" alt="运行结果"></p><h2 id="破解方式"><a href="#破解方式" class="headerlink" title="破解方式"></a>破解方式</h2><p>只要截获 <code>Function.constructor</code>，就可以看到混淆编码前的原文。</p><p>先重定向 <code>Function.constructor</code>：</p><pre class="line-numbers language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">__defineGetter__</span><span class="token punctuation">(</span><span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'constructor'</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后运行混淆编码后的代码，就可以在控制台中看到原文。</p><p><img src="OSAEncodeFuck.png" alt="WHUTOSA_Encode破解"></p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li><a href="http://pferrie2.tripod.com/papers/jjencode.pdf" target="_blank" rel="noopener">Peter Ferrie对jjencode的解析</a></li><li><a href="https://pan.baidu.com/s/1c0AFDC0" target="_blank" rel="noopener">上面这篇文章的译文</a></li><li><a href="https://div.io/topic/1220?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">移动时代的前端加密</a></li><li><a href="https://introspelliam.github.io/2017/11/12/misc/CTF比赛中关于javascript的总结/" target="_blank" rel="noopener">CTF比赛中关于javascript的总结</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8学习笔记(3)-接口默认方法和静态方法</title>
      <link href="/2019/06/14/2019/j8l-interface-default-and-static/"/>
      <url>/2019/06/14/2019/j8l-interface-default-and-static/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 Java8 之前，在接口中只能有方法声明而不能有方法实现，实现类必须实现接口所声明的所有方法。Java8 允许我们在接口中为方法添加默认实现，并且允许我们为接口添加静态方法。</p><h2 id="接口默认方法"><a href="#接口默认方法" class="headerlink" title="接口默认方法"></a>接口默认方法</h2><h3 id="default关键字的使用"><a href="#default关键字的使用" class="headerlink" title="default关键字的使用"></a>default关键字的使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi : Example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在接口 <code>Example</code> 中，方法 <code>void hi()</code> 的前面有关键字 <code>default</code>，这个方法就是一个默认方法。</p><p>继承了 <code>Example</code> 接口的实现类必须实现 <code>void hello()</code> 方法，但可以不实现 <code>void hi()</code> 方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello : ExampleImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Example example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExampleImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 main 方法结果：</p><pre><code>hello : ExampleImplhi : Example</code></pre><p>实现类相当于继承了接口中的 <code>void hi()</code> 方法实现，和类间继承是一样的。实现类也可以覆写接口的默认方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello : ExampleImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi : ExampleImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Example example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExampleImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 main 方法结果：</p><pre><code>hi : ExampleImpl</code></pre><h3 id="默认方法冲突"><a href="#默认方法冲突" class="headerlink" title="默认方法冲突"></a>默认方法冲突</h3><p>如果一个类同时实现两个接口，且两个不同接口中存在签名相同的默认方法，此时将出现冲突：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Example1</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi : Example1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Example2</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi : Example2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 从Example1和Example2继承的默认方法存在冲突，无法通过编译</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Example1</span><span class="token punctuation">,</span>Example2 <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，实现类必须覆写存在冲突的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Example1</span><span class="token punctuation">,</span>Example2 <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi : ExampleImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个类从父类中继承到某个接口的默认方法，同时自己又实现了另一个接口，而接口中的默认方法与父类中的默认方法具有相同的签名，这种情况也不能通过编译：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Example1</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi : Example1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Example2</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi : Example2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperExampleImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Example1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 从Example1和Example2继承的默认方法存在冲突，无法通过编译</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleImpl</span> <span class="token keyword">extends</span> <span class="token class-name">SuperExampleImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Example2</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，如果父类覆写了默认方法，此时子类优先会采用父类的方法实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Example1</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi : Example1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Example2</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi : Example2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperExampleImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Example1</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi : SuperExampleImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleImpl</span> <span class="token keyword">extends</span> <span class="token class-name">SuperExampleImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Example2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExampleImpl example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExampleImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main 方法运行结果：</p><pre><code>hi : SuperExampleImpl</code></pre><p>优先采用父类中的方法，可以更好地兼容之前的 JDK 版本。从旧版本迁移到 Java8 以上后，如果要在接口中添加默认方法，默认方法不会与实现类中已有的方法发生冲突。</p><p>在函数式接口的规约中，声明与 Object 类公有方法具有相同签名的方法，将不被算作抽象发放，或许也有优先级上的原因。</p><h2 id="接口的静态方法"><a href="#接口的静态方法" class="headerlink" title="接口的静态方法"></a>接口的静态方法</h2><p>Java8 允许我们在接口中添加静态方法，接口中的静态方法不会被实现类继承。我们可以通过接口名来调用接口的静态方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi : Example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello : Example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Example<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java"><code class="language-java">hello <span class="token operator">:</span> Example<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java8 对接口进行了增强，让接口的使用变得更加灵活。Java8 之后，接口和抽象类曾经的一个相异点转而变成了共同点（允许有方法实现），但这两者从设计理念上来说是不同的，滥用接口默认方法是有害的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8学习笔记(2)-方法引用和构造器引用</title>
      <link href="/2019/06/13/2019/j8l-method-reference/"/>
      <url>/2019/06/13/2019/j8l-method-reference/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>方法引用有点像 C/C++ 中的函数指针，它能让我们更容易地以函数式风格编程。Java8 中引入了双冒号 <code>::</code> 来表示方法引用。</p><p>使用方法引用时，如果存在方法重载，编译器会自动根据上下文选择参数列表匹配的方法。</p><p>在 JDK 的源码注释和 JavaDoc 中，会将方法引用和构造器引用区分表述，但本文认为构造器引用可以看作一种特殊的方法引用。</p><h2 id="类名-静态方法名"><a href="#类名-静态方法名" class="headerlink" title="类名::静态方法名"></a>类名::静态方法名</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码遍历了一个整数列表，打印每个整数的平方。其中 Lambda 表达式 <code>i -&gt; System.out.println(i * i)</code> 就是针对每个整数所执行的操作，我们可以把这一操作写成静态方法，然后用方法引用的形式传给 <code>forEach</code> 方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 类名::静态方法名</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>Main<span class="token operator">:</span><span class="token operator">:</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在语句 <code>list.forEach(Main::print);</code> 中，list 的实例方法 <code>void forEach(Consumer&lt;? super T&gt; action)</code> 本应接收一个 <code>Consumer&lt;? super Integer&gt;</code> 参数，用 Lambda 表达式可以表示为 <code>(Integer i)-&gt;{}</code>，即一个 <code>void function(Integer)</code> 函数。通过方法引用 <code>Main::print</code>，实际上引用了 Main 类的静态方法 <code>public static void print(Integer i)</code>，符合 <code>forEach</code> 方法的参数要求。</p><p>我们来看看 <code>forEach(Consumer&lt;? super T&gt; action)</code> 的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，执行 <code>list.forEach(Main::print);</code> 最终就相当于执行了这样一段代码；</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Main<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Consumer 接口的函数式方法是 <code>void accept(T t)</code>，而在 T 取 Integer 时，Main 类的 <code>void print(Integer i)</code> 方法正好返回类型和参数列表都能与之对应，所以方法 <code>Main::print</code> 可以作为 <code>forEach</code> 方法的参数，实际上它是一个匿名的 Consumer 实例。</p><h2 id="对象-实例方法名"><a href="#对象-实例方法名" class="headerlink" title="对象::实例方法名"></a>对象::实例方法名</h2><p>直接上代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span>Student other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"，"</span> <span class="token operator">+</span> other<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        Student zhaoliu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>zhaoliu<span class="token operator">:</span><span class="token operator">:</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>我是赵六，张三你好我是赵六，李四你好我是赵六，王五你好</code></pre><p>在上面这段代码中，<code>students.forEach(zhaoliu::hello);</code> 传入了形如 <code>对象::实例方法名</code> 的方法引用 <code>zhaoliu::hello</code>。这一句实际上相当于下面这段代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>    zhaoliu<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="类名-实例方法名"><a href="#类名-实例方法名" class="headerlink" title="类名::实例方法名"></a>类名::实例方法名</h2><p>前面两种方法引用都比较好理解，它们和我们通过类名调用静态方法、通过对象名调用实例方法是很相似的。</p><p>而<code>类名::实例方法名</code> 看起来就有些奇怪.不过,我们最终调用的肯定还是对应方法名的实例方法，既然是调用实例方法，总是要对应到某个具体对象的。</p><p>直接上代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>我是张三我是李四我是王五</code></pre><p>不难看出，在语句 <code>students.forEach(Student::hello);</code> 中，把方法引用 <code>Student::hello</code> 传给 <code>forEach</code>，最终实际上相当于执行了下面这段代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>    student<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再看另一个例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Student other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"2张三"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"1李四"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"3王五"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>Student{name='1李四'}Student{name='2张三'}Student{name='3王五'}</code></pre><p>List 的 <code>sort(Comparator&lt;? super E&gt; c)</code> 方法以 Comparator 为参数，而 Comparator 接口的函数式方法是 <code>int compare(T o1, T o2)</code>，它需要接收两个参数。</p><p>如果用 Lambda 表达式的形式来实现排序，应该写成 <code>students.sort((s1, s2) -&gt; s1.name.compareTo(s2.name));</code>，这个 Lambda 表达式所表达的函数是要接收两个参数的（和Comparator的compare方法一致）。而在上面这个例子中，Student 类的 <code>compare(Student other)</code> 方法只接收一个参数。</p><p>那为什么 <code>Student::compare</code> 也能充当一个匿名的 Comparator 实例呢？首先，Student 类的 compare 方法返回值类型也是 int。然后，假设有两个 Student 对象 student1 和 student2，我们比较一下 <code>student1.compare(student2)</code>  和 <code>compare(student1,student2)</code>，再结合上面的第一个例子，不难推测，在使用<code>类名::实例名</code>这种方法引用时，其实就是把 <code>this</code> 对象作为 <code>compare(T o1, T o2)</code> 中的 <code>o1</code>，而把 Student 类的 <code>compare(Student other)</code> 方法的参数 <code>other</code> 作为 <code>compare(T o1, T o2)</code> 中的 <code>o2</code>。</p><h2 id="类名-new"><a href="#类名-new" class="headerlink" title="类名::new"></a>类名::new</h2><p>还是直接上代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>String<span class="token operator">></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test:"</span> <span class="token operator">+</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>String string<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> function<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test:"</span> <span class="token operator">+</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> String<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>test:test:hello</code></pre><p>语句 <code>print(String::new);</code> 中的 <code>String::new</code> 对应的是 String 类的无参构造方法，而 <code>print("hello", String::new);</code> 中的 <code>String::new</code> 对应的是 String 类的构造方法 <code>String(String original)</code>。</p><p>调用那个构造方法，是由函数式方法的参数列表决定的。Supplier 接口的函数式方法 <code>get()</code> 不接收参数，而 Function 接口的 <code>apply(T t)</code> 方法接收一个参数，所以编译器会根据上下文自动选择合适的构造方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>和 Lambda 表达式一样，方法引用允许我们方便地传递行为，甚至它比 Lambda 表达式还要更加简洁。善用 Lambda 表达式和方法引用，是写好函数式风格 Java 代码的基础。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8学习笔记(1)-Lambda表达式</title>
      <link href="/2019/06/11/2019/j8l-lambda/"/>
      <url>/2019/06/11/2019/j8l-lambda/</url>
      
        <content type="html"><![CDATA[<h2 id="初识-Lambda-表达式"><a href="#初识-Lambda-表达式" class="headerlink" title="初识 Lambda 表达式"></a>初识 Lambda 表达式</h2><h3 id="何谓-Lambda-表达式"><a href="#何谓-Lambda-表达式" class="headerlink" title="何谓 Lambda 表达式"></a>何谓 Lambda 表达式</h3><p>Lambda 表达式是一种用于指定匿名函数(anonymous function)或闭包(closure)的运算符。可以简单地将其理解为一种传递行为的表达式，常于函数式编程（面向行为）。</p><h3 id="使用-Lambda-表达式的好处"><a href="#使用-Lambda-表达式的好处" class="headerlink" title="使用 Lambda 表达式的好处"></a>使用 Lambda 表达式的好处</h3><p>在 Java7 中，我们无法将函数作为参数传递给一个方法，也无法声明返回一个函数的方法，也就是说，我们无法把<code>过程</code>作为<code>对象</code>来使用。</p><p>而在 JavaScript 和 Python 这样的语言中，把函数传递给另一个函数，或在一个函数中返回另一个函数，都是很常见的（尤其是钩子和回调）。甚至在 C/C++ 乃至汇编中，我们也可以通过传递函数地址来实现类似的操作。</p><p>比如，在下列 JavaScript 代码中，我们可以把<code>isOdd</code>函数作为一个参数传入到<code>print</code>函数中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 判断是否为偶数</span><span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 基于传入的策略函数打印数组中的部分元素</span><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strategy</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> isOdd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果是：</p><pre><code>02468</code></pre><p>在 C/C++ 中，通过函数指针也可以实现同样的需求，以 C++ 为例：</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using std::cout;using std::endl;bool isOdd(int n) {    return (n % 2) == 0;}void print(int arr[], int length, bool (*strategy)(int)) {    for (int i = 0; i < length; i++) {        if (strategy(arr[i])) {            cout << arr[i] << endl;        }    }}int main() {    int arr[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};    print(arr, 10, isOdd);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果同样是：</p><pre><code>02468</code></pre><p>在上面两个例子中，我们可以在调用<code>print</code>函数的时候动态地通过钩子函数传入过滤策略，实现对打印过程的复用。</p><p>在 JAVA8 之前，我们要做到类似的事情，多是通过接口、抽象类或是模板方法模式之类的方式，相比之下代码量大得多。</p><p>比如这样写一个接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">doFilt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在调用<code>print</code>方法时，创建一个<code>Strategy</code>类并实现<code>doFilt(int n)</code>方法，再将它的对象作为参数传入，然后通过调用这个对象的方法来应用具体的过滤策略：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> Strategy strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy<span class="token punctuation">.</span><span class="token function">doFilt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Strategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">doFilt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照这种写法，又或者是使用模板方法模式，对于每一种过滤策略，我们都必须新创建一个类（经常是匿名内部类）。这对于<code>ptint</code>方法的调用者而言，实现代码相对臃肿，可读性相对较低，写起来也不够方便。</p><p>而使用 Lambda 表达式，只需要这样写：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span> n <span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这种写法中，我们只需要传入<code>n -&gt; n % 2 == 0</code>，而不是写一整个实现了<code>Strategy</code>接口的类，为<code>print</code>方法的调用者带来了很多便利。</p><h2 id="Lambda-表达式的使用"><a href="#Lambda-表达式的使用" class="headerlink" title="Lambda 表达式的使用"></a>Lambda 表达式的使用</h2><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><p>Java 中 Lambda 表达式可用于替代<code>函数式接口</code>的新建匿名实现类对象。</p><p>所谓<code>函数式接口</code>，指的是有且仅有一个抽象方法（区别于 java8 新增的<code>默认</code>方法）的接口。值得注意的是，根据<code>@FunctionalInterface</code>的文档，如果一个接口中定义了覆写<code>java.lang.Object</code>的公有方法的方法，这个覆写的方法不属于抽象方法，因为任何一个该接口的实现类必然也是<code>java.lang.Object</code>的子类。</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>Lambda 表达式的语法结构为<code>(参数列表) -&gt; {函数体}</code>。</p><p>比如，对于下面这段代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>new Consumer&lt;&gt;(){}</code>就可以用 Lambda 表达式替换成如下代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>无论有多少个参数，Lambda 表达式的参数列表都是可以省略类型的，毕竟函数式接口只有一个抽象方法，不会产生歧义。比如上述 Lambda 表达式可以省略<code>Integer</code>，即改成这样：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于抽象方法只传入一个参数的函数式接口，我们可以省略圆括号；而如果函数体只有一条语句，我们可以省略花括号、分号和关键字<code>return</code>。也就是说，上面的 Lambda 表达式可以写成这样：</p><pre class="line-numbers language-java"><code class="language-java">integer <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际上，这里还可以换成更简洁的方法引用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>关于方法引用，以后再深究。</p><h2 id="Lambda-表达式是对象"><a href="#Lambda-表达式是对象" class="headerlink" title="Lambda 表达式是对象"></a>Lambda 表达式是对象</h2><p>在 Java 中，Lambda 表达式是以对象的形式存在的，它实际上是一个函数式接口的对象。既然是对象，就会有类型，而 Lambda 表达式的语法结构中并没有关于表达式自身类型的信息，Lambda 表达式的类型是编译器根据上下文进行推断的。</p><p>运行下面的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">ExampleInterfaceA</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">exampleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">ExampleInterfaceB</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">exampleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExampleInterfaceA a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        ExampleInterfaceB b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>class Main$$Lambda$1/205797316interface Main$ExampleInterfaceAclass Main$$Lambda$2/935044096interface Main$ExampleInterfaceB</code></pre><p>根据运行结果，<code>a</code>和<code>b</code>的类型都是匿名类，而所实现的接口显然与声明的接口相同。</p><p>如果上下文中没有函数式接口类型信息，比如写成<code>Object o = ()-&gt;{};</code>，是无法通过编译的。如下图所示：</p><p><img src="noTypeLambda.png" alt="必须给 Lambda 表达式指定函数式接口类型"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-456 132模式</title>
      <link href="/2019/04/06/2019/leetcode-456/"/>
      <url>/2019/04/06/2019/leetcode-456/</url>
      
        <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="https://leetcode-cn.com/problems/132-pattern/" target="_blank" rel="noopener">Leetcode456</a></p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>如果某个数左边比它小的数的最小值，小于它右边小于它的某个数<strong>(不必找最大值)</strong>，那么这个序列就符合132模式的定义。如下图三点所示。</p><p><img src="132pattern.png" alt="132模式"></p><h2 id="解法1-峰谷法"><a href="#解法1-峰谷法" class="headerlink" title="解法1(峰谷法)"></a>解法1(峰谷法)</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">find132pattern</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> one <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> three <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 谷</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>one <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            one <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            three <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            min <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 峰</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>one <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            three <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            one <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> max <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法1的基本思路就是先找到一对“1”和“3”，然后扫描“3”的右方，找到“2”。</p><p>提交结果是 219ms 击败 39.66%，47.3MB 击败 0%。</p><h2 id="解法2-单调栈"><a href="#解法2-单调栈" class="headerlink" title="解法2(单调栈)"></a>解法2(单调栈)</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">find132pattern</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 记录每一个数左边的最小值 空间换时间</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftMins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录目前出现的最小值</span>    <span class="token keyword">int</span> leftMin <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        leftMins<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> leftMin<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> leftMin<span class="token punctuation">)</span> <span class="token punctuation">{</span>            leftMin <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从右开始扫描的非递增栈 存下标</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> leftMins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先从左往右扫描一遍，记录每个数作为“3”时对应的最小的“1”。然后从右往左扫描，维持一个非递增栈，把小于或等于栈顶的值压入栈中，栈中的所有数都是备选的“2”。一旦发现有大于栈顶的数，就以这个数为“3”，用它对应的最小的“1”和栈中备选的“2”比较，一旦有符合“1”&lt;“2”的情况，就匹配成功。</p><p>提交结果是 19ms击败 94.33%，48.3MB 击败 0%。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-188 买卖股票的最佳时机 IV</title>
      <link href="/2019/04/05/2019/leetcode-188/"/>
      <url>/2019/04/05/2019/leetcode-188/</url>
      
        <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="noopener">Leetcode188</a></p><h2 id="先上代码"><a href="#先上代码" class="headerlink" title="先上代码"></a>先上代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author yuan * @version 0.1 * @date 2019/4/5 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leetcode188</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getBetterBuy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buy<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sell<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sell<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getBetterSell</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buy<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sell<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** @see Leetcode122 */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">greedy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前是否持有股票</span>        <span class="token keyword">boolean</span> has <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前所持有股票的购入价</span>        <span class="token keyword">int</span> buyInPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>has<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    has <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    buyInPrice <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> prices<span class="token punctuation">.</span>length <span class="token operator">||</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                has <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                result <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> buyInPrice<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** @see Leetcode123 */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> prices <span class="token operator">==</span> null <span class="token operator">||</span> prices<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// k足够大的时候退化为贪心</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">>=</span> prices<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">greedy</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第i次买的收益</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第i次卖的收益</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> price <span class="token operator">:</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                buy<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getBetterBuy</span><span class="token punctuation">(</span>buy<span class="token punctuation">,</span> sell<span class="token punctuation">,</span> price<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                sell<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getBetterSell</span><span class="token punctuation">(</span>buy<span class="token punctuation">,</span> sell<span class="token punctuation">,</span> price<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sell<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>要进行 n 次交易，至少需要 2n 天，如果 k 大于或等于数组长度的一半，那么这题就退化为<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">买卖股票的最佳时机 II</a>，采用贪心法来做（见 Leetcode 上的题解）。</p><p>如果 k 小于数组长度的一半，那么就变成了<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">买卖股票的最佳时机 III</a>的扩展，其动态规划解法如下：</p><p><img src="1.png" alt="买卖股票的最佳时机 III 解法"></p><p>将这4个变量扩展为2k个变量，用数组保存，以同样方式处理，之后返回最后一次出售的收益即可。</p><p>本题动态规划的具体细节与<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">买卖股票的最佳时机 III</a>相同。</p><p>本题状态转移方程：</p><pre><code>but[t][i] = max{ buy[t-1][i], sell[t-1][i-1] - prices[t] }sell[t][i] = max{ sell[t-1][i], buy[t-1][i] + prices[t] }</code></pre><p>其中 t 表示天数，i 表示交易次数。具体说明见下文。<br>t 这个维度可以用滚动数组省去。</p><h2 id="算法细节"><a href="#算法细节" class="headerlink" title="算法细节"></a>算法细节</h2><p>将<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">买卖股票的最佳时机 III</a>的动态规划结合<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">买卖股票的最佳时机 II</a>的贪心即可写出这题的代码。</p><p>下面是对上文本题代码的解释。</p><p>首先要明确 <code>buy[i]</code> 和 <code>sell[i]</code> 含义。用 t 表示考虑前 t 天的情况(从 0 开始)，并将在<strong>最晚</strong>第 t 天进行<strong>至多</strong>第 i 次购入的收益表示为 <code>buy[t][i]</code>，在<strong>最晚</strong>第 t 天进行<strong>至多</strong>第 i 次出售的收益表示为 <code>sell[t][i]</code>。<strong>显然购入操作的将带来负收益。</strong>题目给的 k 是指最多进行 k 次交易，而最优解的交易次数可能是小于 k 的，因此 <code>buy[t][i]</code> 和 <code>sell[t][i]</code> 的含义并不是第 i 次购入或出售后的收益，而是指在该天进行<strong>第[小于或等于 i]</strong>次购入或出售后的收益。比如 k=2，prices={2,4,1,0,0,0,0,0} 的情况，显然第 1 天购入第 2 天出售可以获得最大收益，最终结果 <code>sell[t=7][i=1]</code> 应与 <code>sell[t=1][i=0]</code> 的值相同。也就是说，如果最优解一共进行了 x 次交易，且这次交易的出售在第 y 天进行，那么对所有 i&gt;=x,t&gt;=y，<code>buy[t][i]</code> 与 <code>sell[t][i]</code> 必须分别等于 <code>buy[y][x]</code> 和 <code>sell[y][x]</code>，最终结果才能用 <code>sell[prices.length-1][k-1]</code> 表示。<strong>采用滚动数组可以省去天数这个维度，但下文部分地方为方便说明，仍会把天数标出。</strong></p><p>明确 <code>buy[]</code>和 <code>sell[]</code>的含义后，状态转移方程本身是否正确比较好理解，这里不进行解释。</p><p>第 i 次出售必须在第 i 次购入之后进行，并且每天只能进行一次操作，那么每天都计算整个 <code>buy[]</code>和 <code>sell[]</code>数组不会出错吗？并不会。</p><p>假设一天可以进行多次操作，如果同一天各一次买入和卖出，这两次操作是不会有收益的，所以在第一天计算第一次出售的收益会是 0。既然在第一天进行第一次出售的收益是 0，那么第一天进行第二次购入的收益就将和第一次购入的收益相同，如果闲得蛋疼，买一次卖一次再买一次再卖一次，最后再买第三次，产生的收益也和第一次购入相同。如果第一天进行了第一次购入，第二天进行第一次售出后再进行第二次购入，那么就相当于这一天什么也没做，总收益仍然等于第一天的第一次购入产生的收益。依此类推不难发现，如果在每天只能操作依次时当前这一天至多只能进行第 x 次购入，那么取消限制后，对于所有 i&gt;x，<code>buy[i]</code> 是等于 <code>buy[x]</code>的，并且 <code>sell[x]</code>等于 <code>sell[x-1]</code>，接着可以推出所有这些 <code>sell[i]</code>都等于 <code>sell[x-1]</code>。因此，对于每个 <code>prices[i]</code>，即每一天，都对整个 <code>buy[]</code>和 <code>sell[]</code>数组进行计算，可以使得 <code>sell[k-1]</code>等于最优解的收益。于是 <code>sell[k-1]</code>就是我们要的结果。</p><p>以 k=2,prices={2,4,1,1,0} 为例说明：</p><pre><code>首先初始化buy[]为全-∞(Java中用Integer.MIN_VALUE模拟)，sell[]为全0。在第1天(t=0)，buy[0]显然会等于-price[0]，即-2。此时虽然还不能产生第1次出售，但sell[0]=max{sell[0],buy[0]+prices[0]}，结果将会是0。此时虽然还不能产生第2次购入，但buy[1]=max{buy[1],sell[0]-prices[0]}，将和buy[0]相等。此时虽然还不能产生第2次出售，但sell[1]=max{sell[1],buy[1]+prices[0]}，结果也会是0。实际上既然buy[1]和buy[0]相等，sell[1]也就等于sell[0]。于是，如果只考虑第1天，最大收益sell[1]是0，结果正确。再考虑第2天(t=1)。buy[0]=max{buy[0],sell[0]-prices[1]}，结果仍然是-2。sell[0]=max{sell[1],buy[0]+prices[1]},结果为2。此时虽然还不能产生第2次购入，但由于buy[0][1]与buy[0][0]相等，且buy[1][1]=max{buy[0][1],sell[1][0]-prices[1]}，相当于buy[1][1]=max{buy[0][0],sell[0][0]-prices[1]}。最终buy[1][1]和buy[1][0]相等，即第二天的buy[1]仍然和buy[0]相等，值为-2。此时虽然还不能产生第2次出售，但sell[1]=max{sell[1],buy[1]+prices[1]}，结果也是2。在只考虑前2天的情况下，最大收益sell[1]是2，结果正确。再考虑第3天。buy[0]=max{buy[0],-prices[2]}，变为-1。sell[0]=max{sell[0],buy[0]+prices[2]}，仍为2。buy[1=max{buy[1],sell[0]-prices[2]}，变为1。此时虽然还不能产生第2次出售，sell[1]=max{sell[1],buy[1]+prices[2]}，结果仍为2。于是只考虑前3天的情况下，最大收益sell[1]为2，结果正确。再考虑第4天。buy[0]=max{buy[0],-prices[3]}，仍为-1。sell[0]=max{sell[0],buy[0]+prices[3]}，仍为2。buy[1]=max{buy[1],sell[0]+prices[3]}，仍为1。sell[1]=max{sell[1],buy[1]+prices[3]}，仍为2。于是只考虑前4天的情况下，最大收益sell[1]为2，结果正确。最后考虑第5天buy[0]=max{buy[0],-prices[4]}，变为0。sell[0]=max{sell[0],buy[0]+prices[4]}，仍为2。buy[1]=max{buy[1],sell[0]+prices[4]}，变为2。sell[1]=max{sell[1],buy[1]+prices[4]}，仍为2。最终最大收益sell[1]为2，结果正确。</code></pre><h2 id="附另外两题的代码"><a href="#附另外两题的代码" class="headerlink" title="附另外两题的代码"></a>附另外两题的代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author yuan * @version 0.1 * @date 2019/4/5 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leetcode122</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> buyInPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> has <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>has<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    has <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    buyInPrice <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> prices<span class="token punctuation">.</span>length <span class="token operator">||</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                has <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                result <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> buyInPrice<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author yuan * @version 0.1 * @date 2019/4/5 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leetcode123</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         对于任意一天考虑四个变量:         firstBuy: 在该天第一次买入股票可获得的最大收益         firstSell: 在该天第一次卖出股票可获得的最大收益         secondBuy: 在该天第二次买入股票可获得的最大收益         secondSell: 在该天第二次卖出股票可获得的最大收益         分别对四个变量进行相应的更新, 最后secSell就是最大         收益值(secondSell >= firstBuy)         */</span>        <span class="token keyword">int</span> firstBuy <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> firstSell <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> secondBuy <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> secondSell <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> price <span class="token operator">:</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>            firstBuy <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>firstBuy<span class="token punctuation">,</span> <span class="token operator">-</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果在第一天，这个结果是0</span>            firstSell <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>firstSell<span class="token punctuation">,</span> firstBuy <span class="token operator">+</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果在第一天，将等于firstBuy；如果在第二天，由于第一天等于firstBuy，仍将等于firstBuy</span>            secondBuy <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>secondBuy<span class="token punctuation">,</span> firstSell <span class="token operator">-</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果在前两天，由于secondBuy等于firstBuy，结果等于firstSell；如果在第三天，secondBuy + price等于firstSell</span>            secondSell <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>secondSell<span class="token punctuation">,</span> secondBuy <span class="token operator">+</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> secondSell<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-309 最佳买卖股票时机含冷冻期</title>
      <link href="/2019/04/05/2019/leetcode-309/"/>
      <url>/2019/04/05/2019/leetcode-309/</url>
      
        <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">Leetcode309</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这题一看就是动态规划。把 <code>prices</code> 数组扫一遍，每天无非 4 种情况：买入、卖出、冷冻、啥也不干。</p><p>冷冻期其实也可以视作一种操作。</p><p>我们要考虑的就是，截至到今天，我的最后一次操作是买、卖还是冷冻时，我到今天的收益最高。</p><p>于是可以开三个数组 <code>buy[]</code>、<code>sell[]</code>、<code>lock[]</code>，<code>buy[i]</code> 表示截至第 i 天，最后一次操作是买入的话，最大的收益是多少。 <code>sell[]</code> 和 <code>lock[]</code> 同理。</p><p>于是不难列出状态转移方程：</p><pre><code>// 其中buy[i-1]表示截至昨天最后一个操作是买入且今天啥也不干，lock[i-1] - prices[i]表示截至昨天最后一个操作是冷冻且今天买入buy[i] = max{ buy[i-1] , lock[i-1] - prices[i] } 特殊地，buy[0] = -prices[0]// buy[i-1] + prices[i]表示截至昨天最后一个操作是买入且今天卖出sell[i] = buy[i-1] + prices[i]// 其中lock[i-1]表示截至昨天最后一个操作是冷冻且今天啥也不干，sell[i-1]表示截至昨天最后一个操作是卖出且今天冷冻lock[i] = max { lock[i-1] , sell[i-1] }</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author yuan * @version 0.1 * @date 2019/4/5 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leetcode309</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>buy<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lock<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> buy<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                lock<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lock<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sell<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> buy<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sell<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> sell<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> lock<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果 3 ms 击败 100%，36.5 MB 击败 0%。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>对于每一天的情况，只有上一天的状态对今天有用，因此三个数组可以缩减到长度为 2，交替使用数组的两个位置(类似于 i=(i+1)%2 的操作)。也可以只用一个变量存储，但在赋值前要注意用临时变量保存一下。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author yuan * @version 0.1 * @date 2019/4/5 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leetcode309</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> buy <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> sell <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                buy <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> lastBuy <span class="token operator">=</span> buy<span class="token punctuation">;</span>                <span class="token keyword">int</span> lastSell <span class="token operator">=</span> sell<span class="token punctuation">;</span>                <span class="token keyword">int</span> lastLock <span class="token operator">=</span> lock<span class="token punctuation">;</span>                buy <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lastBuy<span class="token punctuation">,</span> lastLock <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sell <span class="token operator">=</span> lastBuy <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                lock <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lastLock<span class="token punctuation">,</span> lastSell<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> buy<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sell <span class="token operator">></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> sell<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock <span class="token operator">></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> lock<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果 2 ms 击败 100%，34.3 MB 击败 0%。</p><p>空间击败 0% 已经是家常便饭了……</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-957 N 天后的牢房</title>
      <link href="/2019/03/18/2019/leetcode-957/"/>
      <url>/2019/03/18/2019/leetcode-957/</url>
      
        <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>8 间牢房排成一排，每间牢房不是有人住就是空着。</p><p>每天，无论牢房是被占用或空置，都会根据以下规则进行更改：如果一间牢房的两个相邻的房间都被占用或都是空的，那么该牢房就会被占用。否则，它就会被空置。<br>（请注意，由于监狱中的牢房排成一行，所以行中的第一个和最后一个房间无法有两个相邻的房间。）</p><p>我们用以下方式描述监狱的当前状态：如果第 i 间牢房被占用，则 cell[i]==1，否则 cell[i]==0。</p><p>根据监狱的初始状态，在 N 天后返回监狱的状况（和上述 N 种变化）。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><p>输入：cells = [0,1,0,1,1,0,0,1], N = 7</p><p>输出：[0,0,1,1,0,0,0,0]</p><p>下表概述了监狱每天的状况：</p><ul><li>Day 0: [0, 1, 0, 1, 1, 0, 0, 1]</li><li>Day 1: [0, 1, 1, 0, 0, 0, 0, 0]</li><li>Day 2: [0, 0, 0, 0, 1, 1, 1, 0]</li><li>Day 3: [0, 1, 1, 0, 0, 1, 0, 0]</li><li>Day 4: [0, 0, 0, 0, 0, 1, 0, 0]</li><li>Day 5: [0, 1, 1, 1, 0, 1, 0, 0]</li><li>Day 6: [0, 0, 1, 0, 1, 1, 0, 0]</li><li>Day 7: [0, 0, 1, 1, 0, 0, 0, 0]</li></ul><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><p>输入：cells = [1,0,0,1,0,0,1,0], N = 1000000000</p><p>输出：[0,0,1,1,1,1,1,0]</p><h3 id="题目提示"><a href="#题目提示" class="headerlink" title="题目提示"></a>题目提示</h3><ul><li>cells.length == 8</li><li>cells[i] 的值为 0 或 1 </li><li>1 &lt;= N &lt;= 10^9</li></ul><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>显然，从第 1 天开始，数组的头尾永远都是 0 ，中间的6位则可以由左右两位同或得到。又注意到 cells 数组的长度永远是 8，于是我想到用字节来存储每天的状态，然后专门写一个函数 adjustByte(byte arrByte) 来计算下一天对应的字节。显然，对于固定的输入，adjustByte(byte arrByte) 函数会给出固定的输出，所以一旦发现计算出了重复的结果，就说明出现了循环。可以用一个 ArrayList 记录状态的出现顺序，用一个布尔数组记录每种状态是否已经出现过。由于头尾固定为 0，状态至多有 2^6=64 种；不过为方便起见我还是使用了长度为 8 的布尔数组。</p><p>需要注意的是，并不是所有出现过的状态都在循环节中，在循环出现之前可能有一部分状态只会出现一次，因此在发现循环之后要注意对这一部分进行处理。</p><p>Leetcode 的评论区许多人提到循环节长度固定为14的倍数，经测试确实如此。暂时不知道如何将这一规律推导出来，当然只为了减小运行时间的话归纳出了直接用就是了……</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>坑点是 java 自动类型提升问题和符号位问题。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * * @author yuan * @version 0.1 * @date 2019/3/18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leetcode957</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span> <span class="token function">adjustByte</span><span class="token punctuation">(</span><span class="token keyword">byte</span> arrByte<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 隔两位异或</span>        arrByte <span class="token operator">^=</span> <span class="token punctuation">(</span>arrByte <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取反得到同或值</span>        arrByte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token operator">~</span>arrByte<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无符号左移一位使高位清零 &amp;255是为了处理类型提升为int的问题</span>        arrByte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arrByte <span class="token operator">&amp;</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最低位清零</span>        arrByte <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arrByte<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">prisonAfterNDays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cells<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 标记状态是否已经出现过</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按顺序存储出现的状态</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用于表示状态的字节</span>        <span class="token keyword">byte</span> arrByte <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将数组转为字节</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arrByte <span class="token operator">|=</span> cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 按天计算</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 出现重复，即出现循环 &amp;0xff是为了将int转为无符号byte</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>arrByte <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取循环开始下标</span>                <span class="token keyword">int</span> loopStart <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> arrByte<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 计算循环节长度</span>                <span class="token keyword">int</span> loopLength <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> loopStart<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 计算非循环部分长度</span>                <span class="token keyword">int</span> nonLoop <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> loopLength<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 除去非循环部分后，从循环部分中获取正确的byte 先强转int拆箱再强转byte</span>                arrByte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> nonLoop<span class="token punctuation">)</span> <span class="token operator">%</span> loopLength <span class="token operator">+</span> nonLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">[</span>arrByte <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> arrByte <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrByte <span class="token operator">=</span> <span class="token function">adjustByte</span><span class="token punctuation">(</span>arrByte<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 结果数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将状态字节转为数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arrByte <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>AC 21 ms 42.3 MB</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对谢林居住隔离模型的模拟验证与简单探究</title>
      <link href="/2018/12/28/2018/schelling-model-simulation/"/>
      <url>/2018/12/28/2018/schelling-model-simulation/</url>
      
        <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>在谢林模型中，有一片方形区域，区域又被均匀分成若干小方格；有一群被称为代理的个体，每个代理居住在一个小方格内。这些代理可以分成若干类，所有代理都希望周边8个格子尽可能住有较多的同类代理，若居住区域不满足代理的居住要求，则该代理会搬到另一区域居住。</p><p>如图1-1所示，在5×5的区域内有13名代理，不同的颜色表示不同的代理类型。整个区域还存在着一些无人居住的空白方格，代理们可以搬到这些空白方格去居住。</p><p><img src="1-1.png" alt="图1-1"></p><p>假设代理5希望自己周围8格内同类代理的数量至少比异类代理的数量多2，则该代理会搬到如下图所示的位置。</p><p><img src="1-2.png" alt="图1-2"></p><p>假如代理1也有同样的诉求，那么在图1-1中他的居住要求是能得到满足的。而在图1-2中，由于代理5搬走，代理1的居住要求不再被满足，此时他也会想搬走。当一个代理搬走时，一方面会使得该代理周边同类代理的居住满意度下降，另一方面也会留下空白方格，从而允许其它类型的代理搬入。由此不难推出，这是一种级联现象，微观上单个代理的行为有可能引发整个群体的连锁反应，从而导致宏观上各类型代理在居住分布上的同类大片连续、异类相互隔离的现象。</p><p>参考文献<code>[1]</code>和<code>[2]</code>指出，在确定初始状态、确定各类代理居住要求、区域拥有足够多空白方格的情况下，代理的移动顺序和搬迁策略(如条件搬离、随机搬离)对于最终产生隔离与否没有实质性的影响，极限状态总是稳定的。</p><p>本文余下部分将通过程序模拟谢林模型的运作，对谢林模型进行验证和一些简单的探究。</p><h2 id="2-模拟验证"><a href="#2-模拟验证" class="headerlink" title="2 模拟验证"></a>2 模拟验证</h2><p>设置一片500×500的区域。设区域中居住有两类代理，每类代理各有100000个，初始时随机分布。设两类代理的居住要求都是周边8各中有至少4名同类代理。使用计算机程序进行模拟迭代，每次迭代时，按随机顺序判断每个代理的居住要求是否得到满足，不满足者搬往随机空白方格，程序模拟运行结果如下：</p><p><img src="2-1.png" alt="图2-1"></p><p>可以看到，在迭代20次后，整个区域就基本稳定下来。</p><p><img src="2-2.jpg" alt="图2-2 稳定状态"></p><p>二十万个代理，只需20次迭代就可以从随机混沌的状态演变成同类聚居、异类隔离的格局，由此可见同质性的强大威力。观察稳态的图片不难发现，在不同类的同质块间存在着真空区域，将不同类代理聚居区域隔离开来。</p><p>改变模型参数，取20×20的区域，设置两类各15000名代理，设每个代理要求周边有至少5名同类代理，则可以得到如下结果：</p><p><img src="2-3.jpg" alt="图2-3 1000次迭代"></p><p><img src="2-4.jpg" alt="图2-4 2000次迭代"></p><p><img src="2-5.jpg" alt="图2-5 3000次迭代"></p><p><img src="2-6.jpg" alt="图2-6 4000次迭代"></p><p><img src="2-7.jpg" alt="图2-7 5000次迭代"></p><p><img src="2-8.jpg" alt="图2-8 28000次迭代"></p><p><img src="2-9.jpg" alt="图2-9 29000次迭代"></p><p><img src="2-10.jpg" alt="图2-10 70000次迭代"></p><p><img src="2-11.jpg" alt="图2-11 100000次迭代"></p><p>在增强了居住要求之后，同类聚集区域变大了许多，隔离现象也变得非常明显。观察迭代过程不难发现，一开始时会存在多个小聚居区，后来这些小聚居区会逐渐合并成一个大的区域，最终只剩下每类代理各一个超大聚居区。由于居住要求过强，小聚居区边缘出的代理的居住要求往往得不到满足，因此这些代理会向外搬离，并级联地带动聚居区内部的代理也向外搬离，最终汇聚到一个大聚居区中，这很好的验证了谢林模型的迁移连锁效应。不过，同样也是因为居住要求过强，大聚居区边缘区域处于动态平衡状态，模拟过程将会无法收敛，聚居区的大小也存在上界。</p><p>如图2-12所示，在同样条件的另一组实验中，有一类代理的两个大聚居区没有合并成更大的聚居区。这是因为这两个聚居区大小几乎相同，在随机搬迁模式下，两个区域边缘处的代理相互交换数量未能使得两者的代理数量失衡，于是两者的大小都基本保持不变。</p><p><img src="2-12.jpg" alt="图2-12 另一组实验"></p><h2 id="3-隔离发生的条件和程度"><a href="#3-隔离发生的条件和程度" class="headerlink" title="3 隔离发生的条件和程度"></a>3 隔离发生的条件和程度</h2><p>取300×300的区域，设两类代理各35000名，设两类代理的居住要求皆为周边8格内有x名同类代理。当x取不同的值时，稳态情况如下：</p><p><img src="3-1.png" alt="图3-1 x取值对隔离程度的影响"></p><p>显然在x取0、1时不发生隔离，在x取2时有很轻微的局部隔离，在x取3时有不明显的隔离，在x取4时有明显的隔离，在x取5时有非常明显的聚集和隔离，在x大于或等于6时不发生隔离。显然，当x过小时，几乎所有代理都满足现状，同质性无法积累导致不发生隔离；而当x过大时，几乎所有代理的居住要求都无法得到满足，由于无法定居而不发生隔离。总之，在要求同类代理占周边8格的约50%时，可以观察到隔离现象。</p><p>改变居住要求，设两类代理的居住要求皆为周边8格内同类代理比异类代理多x名。当x取不同的值时，程序模拟得到的稳态情况如下：</p><p><img src="3-2.png" alt="图3-2 x取值对隔离程度的影响"></p><p>由此可见，在考虑两类的相对关系而非同类的绝对数量时，稳态下代理分布的模式同样是这几种。在[-3,2]区间内，x的每两个取值对应一种程度的隔离，x取值不在此区间内时不发生隔离。</p><p>在以上两种居住条件下，在x的绝对值较大时的稳态是一种无法收敛的动态平衡；而在x的绝对值较小时的稳态容易出现聚居区内部有空白格子的情况。</p><p>另外，上述的只是一般情况。在x比较大时，未必就不会发生隔离。在多次模拟后发现，有小概率在迭代次数很高时突然出现一个某类代理的小聚居区，并以滚雪球之势迅速成长为一个大聚居区。一旦某类代理出现了聚集现象，在多次迭代后其它类型的代理也会更容易出现聚集。</p><h2 id="4-三类代理的情况"><a href="#4-三类代理的情况" class="headerlink" title="4 三类代理的情况"></a>4 三类代理的情况</h2><p>在生成三类代理的情况下，谢林模型依旧有效，但不能像二类模型那样在要求严格时产生大聚居区。在三类代理的情况下，采用上一节的两种居住要求(同类绝对数量或两类相对数量)，一旦发生隔离，稳态结果更容易收敛，隔离现象也更加明显，示例结果见图：</p><p><img src="4-1.jpg" alt="图4-1"></p><p><img src="4-2.jpg" alt="图4-2"></p><h2 id="5-考量周边15格时的情况"><a href="#5-考量周边15格时的情况" class="headerlink" title="5 考量周边15格时的情况"></a>5 考量周边15格时的情况</h2><p>上文所探讨的都是每个代理考察自己周边3×3小区域内8格状态时的情况，实际上若扩大每个代理的考察范围，谢林模型依旧可以有效运作。考量周边4×4范围内的15格，以周边同类代理绝对数量到达x为居住要求，x不同取值时两类代理和三类代理的各种稳态分布如下：</p><table><thead><tr><th align="center">x</th><th align="center">两类代理</th><th align="center">三类代理</th></tr></thead><tbody><tr><td align="center">2</td><td align="center"><img src="5-1.jpg" alt="5-1"></td><td align="center"><img src="5-2.jpg" alt="5-2"></td></tr><tr><td align="center">3</td><td align="center"><img src="5-3.jpg" alt="5-3"></td><td align="center"><img src="5-4.jpg" alt="5-4"></td></tr><tr><td align="center">4</td><td align="center"><img src="5-5.jpg" alt="5-5"></td><td align="center"><img src="5-6.jpg" alt="5-6"></td></tr><tr><td align="center">5</td><td align="center"><img src="5-7.jpg" alt="5-7"></td><td align="center"><img src="5-8.jpg" alt="5-8"></td></tr><tr><td align="center">6</td><td align="center"><img src="5-9.jpg" alt="5-9"></td><td align="center"><img src="5-10.jpg" alt="5-10"></td></tr><tr><td align="center">7</td><td align="center"><img src="5-11.jpg" alt="5-11"></td><td align="center"><img src="5-12.jpg" alt="5-12"></td></tr><tr><td align="center">8</td><td align="center"><img src="5-13.jpg" alt="5-13"></td><td align="center"><img src="5-14.jpg" alt="5-14"></td></tr><tr><td align="center">9</td><td align="center"><img src="5-15.jpg" alt="5-15"></td><td align="center"><img src="5-16.jpg" alt="5-16"></td></tr><tr><td align="center">10</td><td align="center"><img src="5-17.jpg" alt="5-17"></td><td align="center"><img src="5-18.jpg" alt="5-18"></td></tr><tr><td align="center">11</td><td align="center"><img src="5-19.jpg" alt="5-19"></td><td align="center"><img src="5-20.jpg" alt="5-20"></td></tr><tr><td align="center">12</td><td align="center"><img src="5-21.jpg" alt="5-21"></td><td align="center"><img src="5-22.jpg" alt="5-22"></td></tr><tr><td align="center">13</td><td align="center"><img src="5-23.jpg" alt="5-23"></td><td align="center"><img src="5-24.jpg" alt="5-24"> <code>大概率</code> <img src="5-25.jpg" alt="5-25"> <code>小概率</code></td></tr><tr><td align="center">14</td><td align="center"><img src="5-26.jpg" alt="5-26"></td><td align="center"><img src="5-27.jpg" alt="5-27"></td></tr><tr><td align="center">15</td><td align="center"><img src="5-28.jpg" alt="5-28"></td><td align="center"><img src="5-29.jpg" alt="5-29"></td></tr><tr><td align="center">16</td><td align="center"><img src="5-28.jpg" alt="5-30"></td><td align="center"><img src="5-31.jpg" alt="5-31"></td></tr></tbody></table><p>不难发现，考量周围15格时，比考量周围8格更容易出现隔离现象。</p><h2 id="6-综合分析"><a href="#6-综合分析" class="headerlink" title="6 综合分析"></a>6 综合分析</h2><p>“物以类聚，人以群分。”谢林模型很好地描述了同质性对社会空间隔离的作用和影响。即使人们选择杂居，也总是会存在一些局部的聚居现象。经过一段时间之后，较小的聚集体很可能会合并成更大的聚集体。个体的行为，往往会级联地带动整个群体的行为，谢林模型的动态变化过程很清晰地反映了这一现象。隔离的发生是无组织的，每个代理只考虑自己的喜好，最终却形成了整体上的隔离。在发生隔离并达到稳态时，代理的几何分布有交叉丝带状和相切类圆状两种，前者一般是静态平衡，后者往往是动态平衡。</p><h2 id="7-结束语"><a href="#7-结束语" class="headerlink" title="7 结束语"></a>7 结束语</h2><p>本文利用计算机程序验证了谢林模型的正确性，并对其特点进行了一定的挖掘。程序模拟并不能算是一种严谨的研究方法，但确实是非常有效的辅助手段，我们可以借助程序模拟来获取一些结论，再进行严谨的理论推导。[1]在前人的基础上总结和改良了对谢林模型的数学描述，可以借助其数学模型进行更深入和严谨的定量研究。</p><p>本文只使用了随机搬迁策略，没有对就近满意搬迁、高分搬迁等其它搬迁方式进行探究。另外，若各类代理采用不同的居住要求，或让已对居住环境满意的代理以较小的概率搬迁，又或者是给每类代理再分出小类，都可能取得不同的结果。代理的一些个人属性可以作为分类依据，包括静态属性(如种族)和动态属性(如年收入)。若使每类代理也可以同时有多种居住要求，当每种居住要求已得到或未得到满足时，代理以不同的概率、采取不同的策略进行搬迁，将可以更加贴近现实情况。</p><p>本文没有对达到稳态所需的迭代次数和代理的搬迁次数进行探究。如何设计一种机制或搬迁策略，能让达到稳态时所有代理的搬迁次数总和最小，亦即取得最小的社会代价，也是一个可行的研究方向。</p><p>另外，可以引入进化博弈论、概率论、网络动力学等理论，进行交叉性的研究。</p><h2 id="8-参考文献"><a href="#8-参考文献" class="headerlink" title="8 参考文献"></a>8 参考文献</h2><ul><li>[1] 谢燕娜. Schelling居住隔离模型[D].首都师范大学,2007.</li><li>[2] （美）David EasleY著. 网络、群体与市场——揭示高度互联世界的行为原理与效应机制. 李晓明等译. 北京：清华大学出版社,2011.</li><li>[3] Schelling T C . Models of Segregation.[J]. American Economic Review, 1969, 59(2):488-493.</li><li>[4] Schelling T C . Dynamic Models of Segregation[J]. Journal of Mathematical Sociology, 1971, 1(2):143-186.</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一道Crypto题</title>
      <link href="/2018/07/07/2018/crypto-problem/"/>
      <url>/2018/07/07/2018/crypto-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="题源"><a href="#题源" class="headerlink" title="题源"></a>题源</h2><p>北京理工大学计算机学院创新创业基地 2018 年 2017 级暑假集训选拔赛</p><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>CTF 比赛中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Crypto 是 CTF 比赛中常见的一种题型，其问题大多与加密有关。这一天 Alice 就遇到了一道简单的 Crypto 题目，题目给出了对字符串的一个加密算法和密文，要求你破解这个加密算法，并解密出 Flag。该加密算法是这样的：首先读入明文字符串，随后使用下方代码中的 <code>unpack</code> 函数把明文字符串编码为长度为 w 的数字序列 datas，随后使用 <code>encode</code> 函数对 datas 数组进行了加密。<code>encode</code> 函数的参数 n 为数字序列的长度，iv 是将给定的参数。</p><pre class="line-numbers language-c++"><code class="language-c++">int unpack(char * str, unsigned int * datas) {    int len = strlen(str), w = len / 4;    if (len % 4 != 0) w++;    for (int i = 0; i < w; i++) {        datas[i] = 0;        for (int j = 0; j < 4; j++) {            datas[i] <<= 8;            datas[i] += (i * 4 + j < len) ? str[i * 4 + j] : 0;        }    }    return w;}unsigned int crypto(unsigned int x) {    return x ^ (x >> 16);}void encode(unsigned int * datas, unsigned int iv, int n) {    datas[0] = crypto(datas[0] ^ iv);    for (int i = 1; i < n; i++)        datas[i] = crypto(datas[i] ^ datas[i - 1]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在给出加密后的密文数字序列，请编写解密算法解密出明文字符串。保证加密前的明文字符串仅包含数字、大小写英文字母、下划线和左右花括号（“{”和“}”）。</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><p>本题有多组测试用例，用例之间用空行隔开，处理到文件末为止。</p><p>对每组用例，第一行两个整数为 n(n&lt;=10^5) 和 iv(0&lt;iv&lt;2^32-1)，iv 代表数字序列的长度和加密参数；第二行为 n 个整数，代表密文数字序列。保证数字序列中每一个数字均在 32 位无符号整数范围内。保证输入文件中所有数字串长度之和不超过 6^10。</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><p>对每组测试用例输出一行一个字符串，为解密后的明文字符串。</p><h2 id="示例输入"><a href="#示例输入" class="headerlink" title="示例输入"></a>示例输入</h2><pre><code>4 6666661667575340 186401886 1816346995 1721823205 112017000076035551 2146073409 1251569323 536091756 1837724133</code></pre><h2 id="示例输出"><a href="#示例输出" class="headerlink" title="示例输出"></a>示例输出</h2><pre><code>coachyang_infFLAG{b1t5s_sUmm3r}</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先分析题目给定的三个函数。</p><p><code>unpack()</code> 是将字符串转化成 unsign int 矩阵，实际上保存的是 ASCII 码。</p><p><code>encode()</code> 和 <code>crypto()</code> 则是利用异或运算进行加密计算。</p><p>不难注意到异或运算和 <code>crypto()</code> 的可逆性，即加密和解密可通过相同的运算来实现。再注意一下矩阵每一行解密的顺序，即可完成这道题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在题目给定三个函数的基础上编程。</p><pre class="line-numbers language-c++"><code class="language-c++">unsigned int * uncode(unsigned int *datas, int n, int iv) {    unsigned int *solve = new unsigned int[n];    for (int i = n - 1; i > 0; i--) {        solve[i] = crypto(datas[i]);        solve[i] ^= datas[i - 1];    }    solve[0] = crypto(datas[0]);    solve[0] ^= iv;    return solve;}char* pack(unsigned int *codeArr, int n) {    char *flag = new char[4 * n];    for (int i = 0; i < n; i++) {        for (int j = 0; j < 4; j++) {            flag[i * 4 + j] = (codeArr[i] >> (8 * (3 - j))) & 127;        }    }    return flag;}int main() {    int n;    int iv;    unsigned int *cryptograph;    while (cin >> n) {        cin >> iv;        cryptograph = new unsigned int[n];        for (int i = 0; i < n; i++) {            cin >> cryptograph[i];        }        unsigned int *code = uncode(cryptograph, n, iv);        char *flag = pack(code, n);        cout << flag << endl;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
